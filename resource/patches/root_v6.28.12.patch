diff -rupN --exclude=.git* root_v6.28.12_unpatched/root_v6.28.12-source/CMakeLists.txt root_v6.28.12_patched/root_v6.28.12-source/CMakeLists.txt
--- root_v6.28.12_unpatched/root_v6.28.12-source/CMakeLists.txt	2024-09-18 13:23:14
+++ root_v6.28.12_patched/root_v6.28.12-source/CMakeLists.txt	2024-09-18 13:49:27
@@ -400,16 +400,21 @@ file(TO_NATIVE_PATH "${CMAKE_BINARY_DIR}/include/modul
   set(_os_cat "cat")
 endif()
 file(TO_NATIVE_PATH "${CMAKE_BINARY_DIR}/include/module.modulemap.extra" _from_native)
-file(TO_NATIVE_PATH "${CMAKE_BINARY_DIR}/include/module.modulemap" _to_native)
+#file(TO_NATIVE_PATH "${CMAKE_BINARY_DIR}/include/module.modulemap" _to_native)
+file(TO_NATIVE_PATH "${CMAKE_BINARY_DIR}/include/ROOT.modulemap" _to_native)
 
-add_custom_target(copymodulemap DEPENDS "${CMAKE_BINARY_DIR}/include/module.modulemap")
+#add_custom_target(copymodulemap DEPENDS "${CMAKE_BINARY_DIR}/include/module.modulemap")
+add_custom_target(copymodulemap DEPENDS "${CMAKE_BINARY_DIR}/include/ROOT.modulemap")
 add_custom_command(
-                  OUTPUT "${CMAKE_BINARY_DIR}/include/module.modulemap"
+                  #OUTPUT "${CMAKE_BINARY_DIR}/include/module.modulemap"
+		  OUTPUT "${CMAKE_BINARY_DIR}/include/ROOT.modulemap"
                   DEPENDS build/unix/module.modulemap "${CMAKE_BINARY_DIR}/include/module.modulemap.extra"
-                  COMMAND ${CMAKE_COMMAND} -E copy "${CMAKE_SOURCE_DIR}/build/unix/module.modulemap" "${CMAKE_BINARY_DIR}/include/module.modulemap"
+		  #COMMAND ${CMAKE_COMMAND} -E copy "${CMAKE_SOURCE_DIR}/build/unix/module.modulemap" "${CMAKE_BINARY_DIR}/include/module.modulemap"
+		  COMMAND ${CMAKE_COMMAND} -E copy "${CMAKE_SOURCE_DIR}/build/unix/module.modulemap" "${CMAKE_BINARY_DIR}/include/ROOT.modulemap"
                   COMMAND ${_os_cat} "${_from_native}" >> "${_to_native}"
 )
-install(FILES "${CMAKE_BINARY_DIR}/include/module.modulemap" DESTINATION ${CMAKE_INSTALL_INCLUDEDIR} COMPONENT headers)
+#install(FILES "${CMAKE_BINARY_DIR}/include/module.modulemap" DESTINATION ${CMAKE_INSTALL_INCLUDEDIR} COMPONENT headers)
+install(FILES "${CMAKE_BINARY_DIR}/include/ROOT.modulemap" DESTINATION ${CMAKE_INSTALL_INCLUDEDIR} COMPONENT headers)
 
 add_dependencies(move_headers copymodulemap)
 
diff -rupN --exclude=.git* root_v6.28.12_unpatched/root_v6.28.12-source/README/ReleaseNotes/v628/index.md root_v6.28.12_patched/root_v6.28.12-source/README/ReleaseNotes/v628/index.md
--- root_v6.28.12_unpatched/root_v6.28.12-source/README/ReleaseNotes/v628/index.md	2024-09-18 13:23:15
+++ root_v6.28.12_patched/root_v6.28.12-source/README/ReleaseNotes/v628/index.md	2024-09-18 13:49:27
@@ -989,12 +989,20 @@ List of issues solved:
 Besides the items below, this patch release features some improvements relative to run time performance. Firstly, the memory footprint of the plugin manager has been reduced. Moreover, the mechanism by which symbols are looked up by the interpreter was improved, avoiding to open and close a large number of libraries at startup, which improves considerably the user experience as well as cpu efficiency on batch jobs. More verbose output is now provided if wrong settings are used for the web-based widgets, the loopback device is always used and only one connection is allowed to `RBrowser`.
 
 List of issues solved:
+
 * [[ROOT-10234](https://its.cern.ch/jira/browse/ROOT-10234)] - Mistake in rs301_splot.C
-* [[#8126] (https://github.com/root-project/root/issues/8126)] - cling interpreter crash while autocomplete
-* [[#10178] (https://github.com/root-project/root/issues/10178)] - [cling] crash / compilation exception after undo
-* [[#11746] (https://github.com/root-project/root/issues/11746)] - TH2::Fill(const char *namex, const char *namey, Double_t w) doesn't update fTsumwxy
+* [[#8126](https://github.com/root-project/root/issues/8126)] - cling interpreter crash while autocomplete
+* [[#10178](https://github.com/root-project/root/issues/10178)] - [cling] crash / compilation exception after undo
+* [[#11746](https://github.com/root-project/root/issues/11746)] - TH2::Fill(const char *namex, const char *namey, Double_t w) doesn't update fTsumwxy
 
 ## HEAD of the v6-28-00-patches branch
+
+The next patch release removes the `RooPower` and `RooExpPoly` classes from this release branch.
+It is an unfortunate but unavoidable change: different classes with the same name were used in the CMS collaboration since at least the Higgs discovery.
+This name collision caused massive problems in backwards compatibility and was blocking CMS from picking up ROOT 6.28+ for statistical analysis.
+These classes were only introduced with ROOT 6.28.00 and were not widely advertised, so you should not be affected by this removal.
+If you were using one of these classes, please copy the sources from a previous ROOT tag in your analysis as a temporary solution, and report this unsupported usecase by opening a GitHub issue.
+Based on the feedback to this patch release, the `RooPower` and `RooExpPoly` classes will either be removed or renamed in the upcoming ROOT 6.32.
 
 These changes will be part of a future 6.28/14.
 
diff -rupN --exclude=.git* root_v6.28.12_unpatched/root_v6.28.12-source/bindings/pyroot/pythonizations/python/ROOT/_pythonization/_rvec.py root_v6.28.12_patched/root_v6.28.12-source/bindings/pyroot/pythonizations/python/ROOT/_pythonization/_rvec.py
--- root_v6.28.12_unpatched/root_v6.28.12-source/bindings/pyroot/pythonizations/python/ROOT/_pythonization/_rvec.py	2024-09-18 13:23:16
+++ root_v6.28.12_patched/root_v6.28.12-source/bindings/pyroot/pythonizations/python/ROOT/_pythonization/_rvec.py	2024-09-18 13:49:27
@@ -66,9 +66,10 @@ from . import pythonization
 '''
 
 from . import pythonization
-from libROOTPythonizations import GetEndianess, GetDataPointer, GetSizeOfType
+from libROOTPythonizations import GetEndianess
+import cppyy
+from cppyy import ll
 
-
 _array_interface_dtype_map = {
     "float": "f",
     "double": "f",
@@ -86,7 +87,7 @@ def get_array_interface(self):
     for dtype in _array_interface_dtype_map:
         if cppname.endswith("<{}>".format(dtype)):
             dtype_numpy = _array_interface_dtype_map[dtype]
-            dtype_size = GetSizeOfType(dtype)
+            dtype_size = cppyy.sizeof(dtype)
             endianess = GetEndianess()
             size = self.size()
             # Numpy breaks for data pointer of 0 even though the array is empty.
@@ -94,7 +95,7 @@ def get_array_interface(self):
             if self.empty():
                 pointer = 1
             else:
-                pointer = GetDataPointer(self, cppname, "data")
+                pointer = ll.addressof(self.data())
             return {
                 "shape": (size, ),
                 "typestr": "{}{}{}".format(endianess, dtype_numpy, dtype_size),
diff -rupN --exclude=.git* root_v6.28.12_unpatched/root_v6.28.12-source/bindings/pyroot/pythonizations/python/ROOT/_pythonization/_tmva/_rbdt.py root_v6.28.12_patched/root_v6.28.12-source/bindings/pyroot/pythonizations/python/ROOT/_pythonization/_tmva/_rbdt.py
--- root_v6.28.12_unpatched/root_v6.28.12-source/bindings/pyroot/pythonizations/python/ROOT/_pythonization/_tmva/_rbdt.py	2024-09-18 13:23:16
+++ root_v6.28.12_patched/root_v6.28.12-source/bindings/pyroot/pythonizations/python/ROOT/_pythonization/_tmva/_rbdt.py	2024-09-18 13:49:27
@@ -35,11 +35,24 @@ def Compute(self, x):
     # As fall-through we go to the original compute function and use the error-handling from cppyy
     return self._OriginalCompute(x)
 
+def RBDTInit(self, *args, **kwargs):
+    import warnings
+    warnings.warn(
+        ("Usage of xgboost models through RBDT is known to be limited and may "
+         "lead to unexpected behaviour. Proceed with caution if the input model "
+         "was obtained via `SaveXGBoost`. See https://github.com/root-project/root/issues/15197 "
+         "for more details."), UserWarning, stacklevel=2)
+    
+    return self._original_init(*args, **kwargs)
+    
 
 @pythonization("RBDT", ns="TMVA::Experimental", is_prefix=True)
 def pythonize_rbdt(klass):
     # Parameters:
     # klass: class to be pythonized
+
+    klass._original_init = klass.__init__
+    klass.__init__ = RBDTInit
 
     klass._OriginalCompute = klass.Compute
     klass.Compute = Compute
diff -rupN --exclude=.git* root_v6.28.12_unpatched/root_v6.28.12-source/bindings/pyroot/pythonizations/python/ROOT/_pythonization/_tmva/_rtensor.py root_v6.28.12_patched/root_v6.28.12-source/bindings/pyroot/pythonizations/python/ROOT/_pythonization/_tmva/_rtensor.py
--- root_v6.28.12_unpatched/root_v6.28.12-source/bindings/pyroot/pythonizations/python/ROOT/_pythonization/_tmva/_rtensor.py	2024-09-18 13:23:16
+++ root_v6.28.12_patched/root_v6.28.12-source/bindings/pyroot/pythonizations/python/ROOT/_pythonization/_tmva/_rtensor.py	2024-09-18 13:49:27
@@ -10,8 +10,9 @@ from .._rvec import _array_interface_dtype_map
 
 from .. import pythonization
 from .._rvec import _array_interface_dtype_map
-from libROOTPythonizations import GetEndianess, GetDataPointer, GetSizeOfType
+from libROOTPythonizations import GetEndianess
 import cppyy
+from cppyy import ll
 
 
 def get_array_interface(self):
@@ -28,13 +29,13 @@ def get_array_interface(self):
     idx2 = cppname.find(",", idx1)
     dtype = cppname[idx1 + 8 : idx2]
     dtype_numpy = _array_interface_dtype_map[dtype]
-    dtype_size = GetSizeOfType(dtype)
+    dtype_size = cppyy.sizeof(dtype)
     endianess = GetEndianess()
     shape = self.GetShape()
     strides = self.GetStrides()
     # Numpy breaks for data pointer of 0 even though the array is empty.
     # We set the pointer to 1 but the value itself is arbitrary and never accessed.
-    pointer = GetDataPointer(self, cppname, "GetData")
+    pointer = ll.addressof(self.GetData())
     if pointer == 0:
         pointer == 1
     return {
diff -rupN --exclude=.git* root_v6.28.12_unpatched/root_v6.28.12-source/bindings/pyroot/pythonizations/python/ROOT/_pythonization/_tmva/_tree_inference.py root_v6.28.12_patched/root_v6.28.12-source/bindings/pyroot/pythonizations/python/ROOT/_pythonization/_tmva/_tree_inference.py
--- root_v6.28.12_unpatched/root_v6.28.12-source/bindings/pyroot/pythonizations/python/ROOT/_pythonization/_tmva/_tree_inference.py	2024-09-18 13:23:16
+++ root_v6.28.12_patched/root_v6.28.12-source/bindings/pyroot/pythonizations/python/ROOT/_pythonization/_tmva/_tree_inference.py	2024-09-18 13:49:27
@@ -12,12 +12,18 @@ import cppyy
 import cppyy
 
 
-def SaveXGBoost(self, xgb_model, key_name, output_path, num_inputs=None, tmp_path="/tmp", threshold_dtype="float"):
+def SaveXGBoost(self, xgb_model, key_name, output_path, num_inputs, tmp_path="/tmp", threshold_dtype="float"):
+    import warnings
+    warnings.warn(
+        ("Usage of xgboost models through RBDT is known to be limited and may "
+         "lead to unexpected behaviour. See https://github.com/root-project/root/issues/15197 "
+         "for more details."), UserWarning, stacklevel=2)
     # Extract objective
     objective_map = {
         "multi:softprob": "softmax",  # Naming the objective softmax is more common today
         "binary:logistic": "logistic",
         "reg:linear": "identity",
+        "reg:squarederror": "identity",
     }
     model_objective = xgb_model.objective
     if not model_objective in objective_map:
@@ -48,7 +54,8 @@ def SaveXGBoost(self, xgb_model, key_name, output_path
 
     import json
 
-    forest = json.load(open(tmp_path, "r"))
+    with open(tmp_path, "r") as json_file:
+        forest = json.load(json_file)
 
     # Determine whether the model has a bias paramter and write bias trees
     if hasattr(xgb_model, "base_score") and "reg:" in model_objective:
@@ -95,16 +102,6 @@ def SaveXGBoost(self, xgb_model, key_name, output_path
     if num_outputs != 1:
         for i in range(num_trees):
             outputs[i] = int(i % num_outputs)
-
-    # Determine number of input variables
-    if not num_inputs is None:
-        pass
-    elif hasattr(xgb_model, "_features_count"):
-        num_inputs = xgb_model._features_count
-    else:
-        raise Exception(
-            "Failed to get number of input variables from XGBoost model. Please provide the additional keyword argument 'num_inputs' to this function."
-        )
 
     # Store arrays in a ROOT file in a folder with the given key name
     # TODO: Write single values as simple integers and not vectors.
diff -rupN --exclude=.git* root_v6.28.12_unpatched/root_v6.28.12-source/bindings/pyroot/pythonizations/src/PyROOTModule.cxx root_v6.28.12_patched/root_v6.28.12-source/bindings/pyroot/pythonizations/src/PyROOTModule.cxx
--- root_v6.28.12_unpatched/root_v6.28.12-source/bindings/pyroot/pythonizations/src/PyROOTModule.cxx	2024-09-18 13:23:16
+++ root_v6.28.12_patched/root_v6.28.12-source/bindings/pyroot/pythonizations/src/PyROOTModule.cxx	2024-09-18 13:49:27
@@ -68,9 +68,6 @@ static PyMethodDef gPyROOTMethods[] = {
    {(char *)"AddPrettyPrintingPyz", (PyCFunction)PyROOT::AddPrettyPrintingPyz, METH_VARARGS,
     (char *)"Add pretty printing pythonization"},
    {(char *)"GetEndianess", (PyCFunction)PyROOT::GetEndianess, METH_NOARGS, (char *)"Get endianess of the system"},
-   {(char *)"GetDataPointer", (PyCFunction)PyROOT::GetDataPointer, METH_VARARGS,
-    (char *)"Get pointer to data of a C++ object"},
-   {(char *)"GetSizeOfType", (PyCFunction)PyROOT::GetSizeOfType, METH_VARARGS, (char *)"Get size of data-type"},
    {(char *)"AsRVec", (PyCFunction)PyROOT::AsRVec, METH_O, (char *)"Get object with array interface as RVec"},
 #ifdef R__HAS_DATAFRAME
    {(char *)"AsRTensor", (PyCFunction)PyROOT::AsRTensor, METH_O, (char *)"Get object with array interface as RTensor"},
diff -rupN --exclude=.git* root_v6.28.12_unpatched/root_v6.28.12-source/bindings/pyroot/pythonizations/src/PyROOTPythonize.h root_v6.28.12_patched/root_v6.28.12-source/bindings/pyroot/pythonizations/src/PyROOTPythonize.h
--- root_v6.28.12_unpatched/root_v6.28.12-source/bindings/pyroot/pythonizations/src/PyROOTPythonize.h	2024-09-18 13:23:16
+++ root_v6.28.12_patched/root_v6.28.12-source/bindings/pyroot/pythonizations/src/PyROOTPythonize.h	2024-09-18 13:49:27
@@ -43,8 +43,6 @@ PyObject *GetEndianess(PyObject *self, PyObject *args)
 PyObject *CPPInstanceExpand(PyObject *self, PyObject *args);
 
 PyObject *GetEndianess(PyObject *self, PyObject *args);
-PyObject *GetDataPointer(PyObject *self, PyObject *args);
-PyObject *GetSizeOfType(PyObject *self, PyObject *args);
 
 PyObject *MakeNumpyDataFrameImpl(PyObject *self, PyObject *obj);
 
diff -rupN --exclude=.git* root_v6.28.12_unpatched/root_v6.28.12-source/bindings/pyroot/pythonizations/src/PyzPythonHelpers.cxx root_v6.28.12_patched/root_v6.28.12-source/bindings/pyroot/pythonizations/src/PyzPythonHelpers.cxx
--- root_v6.28.12_unpatched/root_v6.28.12-source/bindings/pyroot/pythonizations/src/PyzPythonHelpers.cxx	2024-09-18 13:23:16
+++ root_v6.28.12_patched/root_v6.28.12-source/bindings/pyroot/pythonizations/src/PyzPythonHelpers.cxx	2024-09-18 13:49:27
@@ -36,66 +36,6 @@ namespace CPyCppyy {
 }
 
 ////////////////////////////////////////////////////////////////////////////
-/// \brief Get size of C++ data-type
-/// \param[in] self Always null, since this is a module function.
-/// \param[in] args C++ data-type as Python string
-///
-/// This function returns the length of a C++ data-type in bytes
-/// as a Python integer.
-PyObject *PyROOT::GetSizeOfType(PyObject * /*self*/, PyObject *args)
-{
-   // Get name of data-type
-   PyObject *pydtype = PyTuple_GetItem(args, 0);
-   std::string dtype = CPyCppyy_PyText_AsString(pydtype);
-
-   // Call interpreter to get size of data-type using `sizeof`
-   size_t size = 0;
-   std::stringstream code;
-   code << "*((size_t*)" << std::showbase << (uintptr_t)&size << ") = (size_t)sizeof(" << dtype << ")";
-   gInterpreter->Calc(code.str().c_str());
-
-   // Return size of data-type as integer
-   PyObject *pysize = PyInt_FromLong(size);
-   return pysize;
-}
-
-////////////////////////////////////////////////////////////////////////////
-/// \brief Get pointer to the data of an object
-/// \param[in] self Always null, since this is a module function.
-/// \param[in] args [0] Python representation of the C++ object.
-///                 [1] Data-type of the C++ object as Python string.
-///                 [2] Method to be called on the C++ object to get the data pointer as Python string
-///
-/// This function returns the pointer to the data of an object as an Python
-/// integer retrieved by the given method.
-PyObject *PyROOT::GetDataPointer(PyObject * /*self*/, PyObject *args)
-{
-   // Get pointer of C++ object
-   PyObject *pyobj = PyTuple_GetItem(args, 0);
-   auto instance = (CPyCppyy::CPPInstance *)(pyobj);
-   auto cppobj = instance->GetObject();
-
-   // Get name of C++ object as string
-   PyObject *pycppname = PyTuple_GetItem(args, 1);
-   std::string cppname = CPyCppyy_PyText_AsString(pycppname);
-
-   // Get name of method to be called to get the data pointer
-   PyObject *pymethodname = PyTuple_GetItem(args, 2);
-   std::string methodname = CPyCppyy_PyText_AsString(pymethodname);
-
-   // Call interpreter to get pointer to data
-   uintptr_t pointer = 0;
-   std::stringstream code;
-   code << "*((intptr_t*)" << std::showbase << (uintptr_t)&pointer << ") = reinterpret_cast<uintptr_t>(reinterpret_cast<"
-        << cppname << "*>(" << std::showbase << (uintptr_t)cppobj << ")->" << methodname << "())";
-   gInterpreter->Calc(code.str().c_str());
-
-   // Return pointer as integer
-   PyObject *pypointer = PyLong_FromUnsignedLongLong(pointer);
-   return pypointer;
-}
-
-////////////////////////////////////////////////////////////////////////////
 /// \brief Get endianess of the system
 /// \param[in] self Always null, since this is a module function.
 /// \param[in] args Pointer to an empty Python tuple.
diff -rupN --exclude=.git* root_v6.28.12_unpatched/root_v6.28.12-source/bindings/pyroot/pythonizations/test/CMakeLists.txt root_v6.28.12_patched/root_v6.28.12-source/bindings/pyroot/pythonizations/test/CMakeLists.txt
--- root_v6.28.12_unpatched/root_v6.28.12-source/bindings/pyroot/pythonizations/test/CMakeLists.txt	2024-09-18 13:23:16
+++ root_v6.28.12_patched/root_v6.28.12-source/bindings/pyroot/pythonizations/test/CMakeLists.txt	2024-09-18 13:49:27
@@ -14,11 +14,6 @@ ROOT_ADD_PYUNITTEST(pyroot_root_module root_module.py)
 # Test ROOT module
 ROOT_ADD_PYUNITTEST(pyroot_root_module root_module.py)
 
-# Test versions of Python dependencies
-if(NOT MSVC)
-    ROOT_ADD_PYUNITTEST(pyroot_dependency_versions dependency_versions.py)
-endif()
-
 # @pythonization decorator
 ROOT_ADD_PYUNITTEST(pyroot_pyz_decorator pythonization_decorator.py)
 
diff -rupN --exclude=.git* root_v6.28.12_unpatched/root_v6.28.12-source/bindings/pyroot/pythonizations/test/dependency_versions.py root_v6.28.12_patched/root_v6.28.12-source/bindings/pyroot/pythonizations/test/dependency_versions.py
--- root_v6.28.12_unpatched/root_v6.28.12-source/bindings/pyroot/pythonizations/test/dependency_versions.py	2024-09-18 13:23:16
+++ root_v6.28.12_patched/root_v6.28.12-source/bindings/pyroot/pythonizations/test/dependency_versions.py	1969-12-31 16:00:00
@@ -1,68 +0,0 @@
-import unittest
-import pkg_resources
-import subprocess
-import os
-import sys
-
-
-# Compile list of packages to be ignored in the test
-ignore = []
-
-# Dependencies of distributed RDataFrame are ignored in this test because they
-# are checked through specific build options (`test_distrdf_*`).
-# The dependencies are checked at configuration time so that we know whether the
-# CTest environment would be ready for the tests of the distributed RDF backends
-ignore.append('pyspark')
-ignore.append('dask')
-ignore.append('distributed')
-ignore.append('dask-jobqueue')
-
-if sys.version_info[0] == 2 and 'ROOTTEST_IGNORE_NUMBA_PY2' in os.environ or \
-   sys.version_info[0] == 3 and 'ROOTTEST_IGNORE_NUMBA_PY3' in os.environ:
-    ignore += ['numba', 'cffi']
-
-if sys.version_info[0] == 2 and 'ROOTTEST_IGNORE_JUPYTER_PY2' in os.environ or \
-   sys.version_info[0] == 3 and 'ROOTTEST_IGNORE_JUPYTER_PY3' in os.environ:
-    ignore += ['notebook', 'metakernel']
-
-
-class DependencyVersions(unittest.TestCase):
-    def test_versions(self):
-        '''
-        Test the versions of the installed packages versus the
-        requirements file in ROOT
-        '''
-        # For implementation details see
-        # https://stackoverflow.com/questions/16294819/check-if-my-python-has-all-required-packages/45474387#45474387
-
-        # Get source directory with requirements.txt
-        p = subprocess.Popen(['root-config', '--srcdir'], stdout=subprocess.PIPE)
-        r, _ = p.communicate()
-        rootsrc = r.decode('UTF-8').strip()
-
-        # Check each requirement separately
-        path = os.path.join(rootsrc, 'requirements.txt')
-        f = open(path)
-        requirements = pkg_resources.parse_requirements(f)
-        errors = []
-        for requirement in requirements:
-            requirement_str = str(requirement)
-            name = requirement.project_name
-            if name in ignore:
-                print('Ignore dependency {}'.format(requirement_str))
-                continue
-            try:
-                pkg_resources.require(requirement_str)
-            except Exception as e:
-                errors.append(e)
-        f.close()
-        if errors:
-            print()
-            print('Full path to requirements.txt: {}'.format(path))
-            print('Details about not matched dependencies:')
-            print('\n'.join([' - ' + e.report() for e in errors]))
-            raise Exception('Found not matched dependencies declared in the requirements.txt, see test output for details')
-
-
-if __name__ == '__main__':
-    unittest.main()
diff -rupN --exclude=.git* root_v6.28.12_unpatched/root_v6.28.12-source/cmake/modules/RootMacros.cmake root_v6.28.12_patched/root_v6.28.12-source/cmake/modules/RootMacros.cmake
--- root_v6.28.12_unpatched/root_v6.28.12-source/cmake/modules/RootMacros.cmake	2024-09-18 13:23:14
+++ root_v6.28.12_patched/root_v6.28.12-source/cmake/modules/RootMacros.cmake	2024-09-18 13:49:27
@@ -551,8 +551,9 @@ function(ROOT_GENERATE_DICTIONARY dictionary)
       if(cpp_module)
         set(cpp_module_file ${library_output_dir}/${cpp_module}.pcm)
         # The module depends on its modulemap file.
-        if (cpp_module_file)
-          set (runtime_cxxmodule_dependencies copymodulemap "${CMAKE_BINARY_DIR}/include/module.modulemap")
+        if (cpp_module_file AND CMAKE_PROJECT_NAME STREQUAL ROOT)
+		#set (runtime_cxxmodule_dependencies copymodulemap "${CMAKE_BINARY_DIR}/include/module.modulemap")
+		set (runtime_cxxmodule_dependencies copymodulemap "${CMAKE_BINARY_DIR}/include/ROOT.modulemap")
         endif()
       endif(cpp_module)
     endif()
diff -rupN --exclude=.git* root_v6.28.12_unpatched/root_v6.28.12-source/core/clingutils/CMakeLists.txt root_v6.28.12_patched/root_v6.28.12-source/core/clingutils/CMakeLists.txt
--- root_v6.28.12_unpatched/root_v6.28.12-source/core/clingutils/CMakeLists.txt	2024-09-18 13:23:14
+++ root_v6.28.12_patched/root_v6.28.12-source/core/clingutils/CMakeLists.txt	2024-09-18 13:49:27
@@ -113,6 +113,13 @@ if (runtime_cxxmodules)
   # some systems install it under /usr/include/Vc/Vc which allows rootcling to
   # discover it and assert that the modulemap is not found.
   set(custom_modulemaps ${custom_modulemaps} vc.modulemap)
+
+  # We need to override the default modulemap because instead of producing a
+  # single std.pcm, produces millions of pcms. This changed with sdk 15.3.
+  if (CMAKE_SYSTEM_NAME MATCHES Darwin AND CMAKE_CXX_COMPILER_VERSION VERSION_GREATER_EQUAL 15.0.0.15000309)
+    set(custom_modulemaps ${custom_modulemaps} std_darwin.modulemap)
+  endif()
+
   if (NOT libcxx)
     if (MSVC)
       set(custom_modulemaps ${custom_modulemaps} vcruntime.modulemap)
diff -rupN --exclude=.git* root_v6.28.12_unpatched/root_v6.28.12-source/core/dictgen/src/rootcling_impl.cxx root_v6.28.12_patched/root_v6.28.12-source/core/dictgen/src/rootcling_impl.cxx
--- root_v6.28.12_unpatched/root_v6.28.12-source/core/dictgen/src/rootcling_impl.cxx	2024-09-18 13:23:14
+++ root_v6.28.12_patched/root_v6.28.12-source/core/dictgen/src/rootcling_impl.cxx	2024-09-18 13:49:27
@@ -4265,7 +4265,8 @@ int RootClingMain(int argc,
 
       clingArgsInterpreter.push_back("-fmodule-map-file=" +
                                      std::string(gDriverConfig->fTROOT__GetIncludeDir()) +
-                                     "/module.modulemap");
+                                     // "/module.modulemap");
+                                     "/ROOT.modulemap");
       std::string ModuleMapCWD = ROOT::FoundationUtils::GetCurrentDir() + "/module.modulemap";
       if (llvm::sys::fs::exists(ModuleMapCWD))
          clingArgsInterpreter.push_back("-fmodule-map-file=" + ModuleMapCWD);
diff -rupN --exclude=.git* root_v6.28.12_unpatched/root_v6.28.12-source/core/lzma/src/ZipLZMA.c root_v6.28.12_patched/root_v6.28.12-source/core/lzma/src/ZipLZMA.c
--- root_v6.28.12_unpatched/root_v6.28.12-source/core/lzma/src/ZipLZMA.c	2024-09-18 13:23:14
+++ root_v6.28.12_patched/root_v6.28.12-source/core/lzma/src/ZipLZMA.c	2024-09-18 13:26:22
@@ -68,7 +68,7 @@ void R__zipLZMA(int cxlevel, int *srcsize, char *src, 
    stream.avail_in  = (size_t)(*srcsize);
 
    stream.next_out  = (uint8_t *)(&tgt[kHeaderSize]);
-   stream.avail_out = (size_t)(*tgtsize);
+   stream.avail_out = (size_t)(*tgtsize) - kHeaderSize;
 
    returnStatus = lzma_code(&stream, LZMA_FINISH);
    if (returnStatus != LZMA_STREAM_END) {
@@ -117,7 +117,7 @@ void R__unzipLZMA(int *srcsize, unsigned char *src, in
    }
 
    stream.next_in   = (const uint8_t *)(&src[kHeaderSize]);
-   stream.avail_in  = (size_t)(*srcsize);
+   stream.avail_in  = (size_t)(*srcsize) - kHeaderSize;
    stream.next_out  = (uint8_t *)tgt;
    stream.avail_out = (size_t)(*tgtsize);
 
diff -rupN --exclude=.git* root_v6.28.12_unpatched/root_v6.28.12-source/core/metacling/src/TCling.cxx root_v6.28.12_patched/root_v6.28.12-source/core/metacling/src/TCling.cxx
--- root_v6.28.12_unpatched/root_v6.28.12-source/core/metacling/src/TCling.cxx	2024-09-18 13:23:14
+++ root_v6.28.12_patched/root_v6.28.12-source/core/metacling/src/TCling.cxx	2024-09-18 13:49:27
@@ -1491,7 +1491,8 @@ TCling::TCling(const char *name, const char *title, co
    if (fCxxModulesEnabled && !fromRootCling) {
       // For now we prefer rootcling to enumerate explicitly its modulemaps.
       std::vector<std::string> ModuleMaps;
-      std::string ModuleMapSuffix = ROOT::FoundationUtils::GetPathSeparator() + "module.modulemap";
+      //std::string ModuleMapSuffix = ROOT::FoundationUtils::GetPathSeparator() + "module.modulemap";
+      std::string ModuleMapSuffix = ROOT::FoundationUtils::GetPathSeparator() + "ROOT.modulemap";
       ModuleMaps.push_back(TROOT::GetIncludeDir().Data() + ModuleMapSuffix);
       GetEnvVarPath("CLING_MODULEMAP_FILES", ModuleMaps);
 
diff -rupN --exclude=.git* root_v6.28.12_unpatched/root_v6.28.12-source/core/zip/CMakeLists.txt root_v6.28.12_patched/root_v6.28.12-source/core/zip/CMakeLists.txt
--- root_v6.28.12_unpatched/root_v6.28.12-source/core/zip/CMakeLists.txt	2024-09-18 13:23:14
+++ root_v6.28.12_patched/root_v6.28.12-source/core/zip/CMakeLists.txt	2024-09-18 13:49:27
@@ -28,3 +28,5 @@ ROOT_INSTALL_HEADERS()
 )
 
 ROOT_INSTALL_HEADERS()
+
+ROOT_ADD_TEST_SUBDIRECTORY(test)
diff -rupN --exclude=.git* root_v6.28.12_unpatched/root_v6.28.12-source/core/zip/src/RZip.cxx root_v6.28.12_patched/root_v6.28.12-source/core/zip/src/RZip.cxx
--- root_v6.28.12_unpatched/root_v6.28.12-source/core/zip/src/RZip.cxx	2024-09-18 13:23:14
+++ root_v6.28.12_patched/root_v6.28.12-source/core/zip/src/RZip.cxx	2024-09-18 13:26:22
@@ -78,14 +78,18 @@ void R__zipMultipleAlgorithm(int cxlevel, int *srcsize
 /*                      3 = old */
 void R__zipMultipleAlgorithm(int cxlevel, int *srcsize, char *src, int *tgtsize, char *tgt, int *irep, ROOT::RCompressionSetting::EAlgorithm::EValues compressionAlgorithm)
 {
+  *irep = 0;
 
+  // Performance optimization: avoid compressing tiny source buffers.
   if (*srcsize < 1 + HDRSIZE + 1) {
-     *irep = 0;
      return;
   }
+  // Correctness check: we need at least enough bytes to prepend the header!
+  if (*tgtsize <= HDRSIZE) {
+     return;
+  }
 
   if (cxlevel <= 0) {
-    *irep = 0;
     return;
   }
 
@@ -197,7 +201,7 @@ static void R__zipZLIB(int cxlevel, int *srcsize, char
     stream.avail_in  = (uInt)(*srcsize);
 
     stream.next_out  = (Bytef*)(&tgt[HDRSIZE]);
-    stream.avail_out = (uInt)(*tgtsize);
+    stream.avail_out = (uInt)(*tgtsize) - HDRSIZE;
 
     stream.zalloc    = (alloc_func)0;
     stream.zfree     = (free_func)0;
diff -rupN --exclude=.git* root_v6.28.12_unpatched/root_v6.28.12-source/core/zip/test/CMakeLists.txt root_v6.28.12_patched/root_v6.28.12-source/core/zip/test/CMakeLists.txt
--- root_v6.28.12_unpatched/root_v6.28.12-source/core/zip/test/CMakeLists.txt	1969-12-31 16:00:00
+++ root_v6.28.12_patched/root_v6.28.12-source/core/zip/test/CMakeLists.txt	2024-09-18 13:26:22
@@ -0,0 +1,7 @@
+# Copyright (C) 1995-2024, Rene Brun and Fons Rademakers.
+# All rights reserved.
+#
+# For the licensing terms see $ROOTSYS/LICENSE.
+# For the list of contributors see $ROOTSYS/README/CREDITS.
+
+ROOT_ADD_GTEST(ZipTest ZipTest.cxx LIBRARIES Core)
diff -rupN --exclude=.git* root_v6.28.12_unpatched/root_v6.28.12-source/core/zip/test/ZipTest.cxx root_v6.28.12_patched/root_v6.28.12-source/core/zip/test/ZipTest.cxx
--- root_v6.28.12_unpatched/root_v6.28.12-source/core/zip/test/ZipTest.cxx	1969-12-31 16:00:00
+++ root_v6.28.12_patched/root_v6.28.12-source/core/zip/test/ZipTest.cxx	2024-09-18 13:26:22
@@ -0,0 +1,70 @@
+#include <Compression.h>
+#include <RZip.h>
+
+#include <gtest/gtest.h>
+
+#include <memory>
+
+static void testZipBufferSizes(ROOT::RCompressionSetting::EAlgorithm::EValues compressionAlgorithm)
+{
+   static constexpr size_t BufferSize = 256;
+   static constexpr size_t MaxBytes = 128;
+   static_assert(MaxBytes <= BufferSize, "MaxBytes must be smaller than BufferSize");
+   static constexpr size_t StartOffset = (BufferSize - MaxBytes) / 2;
+   // For extra "safety", allocate the buffers on the heap to avoid corrupting the stack should anything go wrong.
+   std::unique_ptr<char[]> source(new char[BufferSize]);
+   std::unique_ptr<char[]> target(new char[BufferSize]);
+
+   // Fill the buffers with monotonically increasing numbers. This is easy to compress, but that's fine because we scan
+   // through all possible sizes.
+   for (size_t i = 0; i < BufferSize; i++) {
+      source[i] = static_cast<char>(i);
+      target[i] = static_cast<char>(i);
+   }
+
+   // Now test all possible combinations of target and source sizes. The outer loop is for the target sizes because that
+   // allows us to check that nothing got overwritten.
+   for (size_t targetSize = 1; targetSize <= MaxBytes; targetSize++) {
+      for (size_t sourceSize = 1; sourceSize <= MaxBytes; sourceSize++) {
+         for (int cxlevel = 1; cxlevel <= 9; cxlevel++) {
+            int srcsize = static_cast<int>(sourceSize);
+            int tgtsize = static_cast<int>(targetSize);
+            int irep = -1;
+            R__zipMultipleAlgorithm(cxlevel, &srcsize, source.get(), &tgtsize, target.get() + StartOffset, &irep,
+                                    compressionAlgorithm);
+
+            for (size_t i = 0; i < StartOffset; i++) {
+               EXPECT_EQ(target[i], static_cast<char>(i));
+            }
+            for (size_t i = StartOffset + targetSize + 1; i < BufferSize; i++) {
+               EXPECT_EQ(target[i], static_cast<char>(i));
+            }
+         }
+      }
+   }
+}
+
+TEST(RZip, ZipBufferSizesOld)
+{
+   testZipBufferSizes(ROOT::RCompressionSetting::EAlgorithm::kOldCompressionAlgo);
+}
+
+TEST(RZip, ZipBufferSizesZLIB)
+{
+   testZipBufferSizes(ROOT::RCompressionSetting::EAlgorithm::kZLIB);
+}
+
+TEST(RZip, ZipBufferSizesLZMA)
+{
+   testZipBufferSizes(ROOT::RCompressionSetting::EAlgorithm::kLZMA);
+}
+
+TEST(RZip, ZipBufferSizesLZ4)
+{
+   testZipBufferSizes(ROOT::RCompressionSetting::EAlgorithm::kLZ4);
+}
+
+TEST(RZip, ZipBufferSizesZSTD)
+{
+   testZipBufferSizes(ROOT::RCompressionSetting::EAlgorithm::kZSTD);
+}
diff -rupN --exclude=.git* root_v6.28.12_unpatched/root_v6.28.12-source/etc/RooFitHS3_wsexportkeys.json root_v6.28.12_patched/root_v6.28.12-source/etc/RooFitHS3_wsexportkeys.json
--- root_v6.28.12_unpatched/root_v6.28.12-source/etc/RooFitHS3_wsexportkeys.json	2024-09-18 13:23:15
+++ root_v6.28.12_patched/root_v6.28.12-source/etc/RooFitHS3_wsexportkeys.json	2024-09-18 13:49:27
@@ -102,14 +102,6 @@
             "mean": "mean"
         }
     },
-    "RooPower": {
-        "type": "power_dist",
-        "proxies": {
-            "coefList": "coefficients",
-            "expList": "exponents",
-            "x": "x"
-        }
-    },
     "RooProdPdf": {
         "type": "product_dist",
         "proxies": {
diff -rupN --exclude=.git* root_v6.28.12_unpatched/root_v6.28.12-source/etc/RooFitHS3_wsfactoryexpressions.json root_v6.28.12_patched/root_v6.28.12-source/etc/RooFitHS3_wsfactoryexpressions.json
--- root_v6.28.12_unpatched/root_v6.28.12-source/etc/RooFitHS3_wsfactoryexpressions.json	2024-09-18 13:23:15
+++ root_v6.28.12_patched/root_v6.28.12-source/etc/RooFitHS3_wsfactoryexpressions.json	2024-09-18 13:49:27
@@ -90,14 +90,6 @@
             "mean"
         ]
     },
-    "power_dist": {
-        "class": "RooPower",
-        "arguments": [
-            "x",
-            "coefficients",
-            "exponents"
-        ]
-    },
     "product": {
         "class": "RooProduct",
         "arguments": [
diff -rupN --exclude=.git* root_v6.28.12_unpatched/root_v6.28.12-source/graf2d/asimage/CMakeLists.txt root_v6.28.12_patched/root_v6.28.12-source/graf2d/asimage/CMakeLists.txt
--- root_v6.28.12_unpatched/root_v6.28.12-source/graf2d/asimage/CMakeLists.txt	2024-09-18 13:23:16
+++ root_v6.28.12_patched/root_v6.28.12-source/graf2d/asimage/CMakeLists.txt	2024-09-18 13:49:27
@@ -33,6 +33,7 @@ ROOT_STANDARD_LIBRARY_PACKAGE(ASImage
   DEPENDENCIES
     Core
     Graf
+    Postscript
   BUILTINS
     AFTERIMAGE
 )
diff -rupN --exclude=.git* root_v6.28.12_unpatched/root_v6.28.12-source/graf2d/asimage/src/TASImage.cxx root_v6.28.12_patched/root_v6.28.12-source/graf2d/asimage/src/TASImage.cxx
--- root_v6.28.12_unpatched/root_v6.28.12-source/graf2d/asimage/src/TASImage.cxx	2024-09-18 13:23:16
+++ root_v6.28.12_patched/root_v6.28.12-source/graf2d/asimage/src/TASImage.cxx	2024-09-18 13:49:27
@@ -61,37 +61,39 @@ ROOT tutorials: `$ROOTSYS/tutorials/image/`
 #include FT_FREETYPE_H
 #include FT_GLYPH_H
 
+#include "RConfigure.h"
+#include "TArrayD.h"
+#include "TArrayL.h"
 #include "TASImage.h"
 #include "TASImagePlugin.h"
-#include "TROOT.h"
 #include "TBuffer.h"
-#include "TMath.h"
-#include "TSystem.h"
-#include "TVirtualX.h"
-#include "TVirtualPad.h"
-#include "TArrayD.h"
-#include "TVectorD.h"
-#include "TVirtualPS.h"
-#include "TGaxis.h"
 #include "TColor.h"
-#include "TObjArray.h"
-#include "TArrayL.h"
-#include "TPoint.h"
+#include "TEnv.h"
 #include "TFrame.h"
-#include "TTF.h"
-#include "TRandom.h"
-#include <iostream>
+#include "TGaxis.h"
 #include "THashTable.h"
+#include "TImageDump.h"
+#include "TMath.h"
+#include "TObjArray.h"
 #include "TPluginManager.h"
-#include "TEnv.h"
+#include "TPoint.h"
+#include "TRandom.h"
+#include "TROOT.h"
 #include "TStyle.h"
+#include "TSystem.h"
 #include "TText.h"
-#include "RConfigure.h"
+#include "TTF.h"
+#include "TVectorD.h"
+#include "TVirtualPad.h"
 #include "TVirtualPadPainter.h"
-#include "snprintf.h"
+#include "TVirtualPS.h"
+#include "TVirtualX.h"
 
+#include <iostream>
 #include <memory>
 
+#include "snprintf.h"
+
 #ifndef WIN32
 #ifndef R__HAS_COCOA
 #   include <X11/Xlib.h>
@@ -1095,7 +1097,7 @@ void TASImage::FromPad(TVirtualPad *pad, Int_t x, Int_
 
    if (gROOT->IsBatch()) { // in batch mode
       TVirtualPS *psave = gVirtualPS;
-      gVirtualPS = (TVirtualPS*)gROOT->ProcessLineFast("new TImageDump()");
+      gVirtualPS = new TImageDump();
       gVirtualPS->Open(pad->GetName(), 114); // in memory
       gVirtualPS->SetBit(BIT(11)); //kPrintingPS
 
diff -rupN --exclude=.git* root_v6.28.12_unpatched/root_v6.28.12-source/interpreter/cling/include/cling/std_darwin.modulemap root_v6.28.12_patched/root_v6.28.12-source/interpreter/cling/include/cling/std_darwin.modulemap
--- root_v6.28.12_unpatched/root_v6.28.12-source/interpreter/cling/include/cling/std_darwin.modulemap	1969-12-31 16:00:00
+++ root_v6.28.12_patched/root_v6.28.12-source/interpreter/cling/include/cling/std_darwin.modulemap	2024-09-18 13:49:27
@@ -0,0 +1,2064 @@
+module std [system] {
+export *
+// Main C++ standard library interfaces
+module std_algorithm [system] {
+  header "algorithm"
+  export *
+}
+module std_any [system] {
+  header "any"
+  export *
+}
+module std_array [system] {
+  header "array"
+  export *
+}
+module std_atomic [system] {
+  header "atomic"
+  export *
+}
+module std_barrier [system] {
+  header "barrier"
+  export *
+}
+module std_bit [system] {
+  header "bit"
+  export *
+}
+module std_bitset [system] {
+  header "bitset"
+  export *
+}
+module std_charconv [system] {
+  header "charconv"
+  export *
+}
+module std_chrono [system] {
+  header "chrono"
+  export *
+}
+module std_codecvt [system] {
+  header "codecvt"
+  export *
+}
+module std_compare [system] {
+  header "compare"
+  export *
+}
+module std_complex [system] {
+  header "complex"
+  export *
+}
+module std_concepts [system] {
+  header "concepts"
+  export *
+}
+module std_condition_variable [system] {
+  header "condition_variable"
+  export *
+}
+module std_coroutine [system] {
+  header "coroutine"
+  export *
+}
+module std_deque [system] {
+  header "deque"
+  export *
+}
+module std_exception [system] {
+  header "exception"
+  export *
+}
+module std_execution [system] {
+  header "execution"
+  export *
+}
+module std_expected [system] {
+  header "expected"
+  export *
+}
+module std_filesystem [system] {
+  header "filesystem"
+  export *
+}
+module std_format [system] {
+  header "format"
+  export *
+}
+module std_forward_list [system] {
+  header "forward_list"
+  export *
+}
+module std_fstream [system] {
+  header "fstream"
+  export *
+}
+module std_functional [system] {
+  header "functional"
+  export *
+}
+module std_future [system] {
+  header "future"
+  export *
+}
+module std_initializer_list [system] {
+  header "initializer_list"
+  export *
+}
+module std_iomanip [system] {
+  header "iomanip"
+  export *
+}
+module std_ios [system] {
+  header "ios"
+  export *
+}
+module std_iosfwd [system] {
+  header "iosfwd"
+  export *
+}
+module std_iostream [system] {
+  header "iostream"
+  export *
+}
+module std_istream [system] {
+  header "istream"
+  export *
+}
+module std_iterator [system] {
+  header "iterator"
+  export *
+}
+module std_latch [system] {
+  header "latch"
+  export *
+}
+module std_limits [system] {
+  header "limits"
+  export *
+}
+module std_list [system] {
+  header "list"
+  export *
+}
+module std_locale [system] {
+  header "locale"
+  export *
+}
+module std_map [system] {
+  header "map"
+  export *
+}
+module std_mdspan [system] {
+  header "mdspan"
+  export *
+}
+module std_memory [system] {
+  header "memory"
+  export *
+}
+module std_memory_resource [system] {
+  header "memory_resource"
+  export *
+}
+module std_mutex [system] {
+  header "mutex"
+  export *
+}
+module std_new [system] {
+  header "new"
+  export *
+}
+module std_numbers [system] {
+  header "numbers"
+  export *
+}
+module std_numeric [system] {
+  header "numeric"
+  export *
+}
+module std_optional [system] {
+  header "optional"
+  export *
+}
+module std_ostream [system] {
+  header "ostream"
+  export *
+}
+module std_print [system] {
+  header "print"
+  export *
+}
+module std_queue [system] {
+  header "queue"
+  export *
+}
+module std_random [system] {
+  header "random"
+  export *
+}
+module std_ranges [system] {
+  header "ranges"
+  export *
+}
+module std_ratio [system] {
+  header "ratio"
+  export *
+}
+module std_regex [system] {
+  header "regex"
+  export *
+}
+module std_scoped_allocator [system] {
+  header "scoped_allocator"
+  export *
+}
+module std_semaphore [system] {
+  header "semaphore"
+  export *
+}
+module std_set [system] {
+  header "set"
+  export *
+}
+module std_shared_mutex [system] {
+  header "shared_mutex"
+  export std_version
+}
+module std_source_location [system] {
+  header "source_location"
+  export *
+}
+module std_span [system] {
+  header "span"
+  export std_private_ranges_enable_borrowed_range
+  export std_version
+  export std_private_span_span_fwd
+}
+module std_sstream [system] {
+  header "sstream"
+  export *
+}
+module std_stack [system] {
+  header "stack"
+  export *
+}
+module std_stdexcept [system] {
+  header "stdexcept"
+  export *
+}
+module std_stop_token {
+  header "stop_token"
+  export *
+}
+module std_streambuf [system] {
+  header "streambuf"
+  export *
+}
+module std_string [system] {
+  header "string"
+  export *
+}
+module std_string_view [system] {
+  header "string_view"
+  export *
+}
+module std_strstream [system] {
+  header "strstream"
+  export *
+}
+module std_system_error [system] {
+  header "system_error"
+  export *
+}
+module std_thread [system] {
+  header "thread"
+  export *
+}
+module std_tuple [system] {
+  header "tuple"
+  export *
+}
+module std_type_traits [system] {
+  header "type_traits"
+  export *
+}
+module std_typeindex [system] {
+  header "typeindex"
+  export *
+}
+module std_typeinfo [system] {
+  header "typeinfo"
+  export *
+}
+module std_unordered_map [system] {
+  header "unordered_map"
+  export *
+}
+module std_unordered_set [system] {
+  header "unordered_set"
+  export *
+}
+module std_utility [system] {
+  header "utility"
+  export *
+}
+module std_valarray [system] {
+  header "valarray"
+  export *
+}
+module std_variant [system] {
+  header "variant"
+  export *
+}
+module std_vector [system] {
+  header "vector"
+  export *
+}
+module std_version [system] {
+  header "version"
+  export *
+}
+
+// C standard library interface wrappers
+module std_cassert [system] {
+  // <cassert>'s use of NDEBUG requires textual inclusion.
+  textual header "cassert"
+}
+module std_ccomplex [system] {
+  header "ccomplex"
+  export *
+}
+module std_cctype [system] {
+  header "cctype"
+  export *
+}
+module std_cerrno [system] {
+  header "cerrno"
+  export *
+}
+module std_cfenv [system] {
+  header "cfenv"
+  export *
+}
+module std_cfloat [system] {
+  header "cfloat"
+  export *
+}
+module std_cinttypes [system] {
+  header "cinttypes"
+  export *
+}
+module std_ciso646 [system] {
+  header "ciso646"
+  export *
+}
+module std_climits [system] {
+  header "climits"
+  export *
+}
+module std_clocale [system] {
+  header "clocale"
+  export *
+}
+module std_cmath [system] {
+  header "cmath"
+  export *
+}
+module std_csetjmp [system] {
+  header "csetjmp"
+  export *
+}
+module std_csignal [system] {
+  header "csignal"
+  export *
+}
+// FIXME: <cstdalign> is missing.
+module std_cstdarg [system] {
+  header "cstdarg"
+  export *
+}
+module std_cstdbool [system] {
+  header "cstdbool"
+  export *
+}
+module std_cstddef [system] {
+  header "cstddef"
+  export *
+}
+module std_cstdint [system] {
+  header "cstdint"
+  export *
+}
+module std_cstdio [system] {
+  header "cstdio"
+  export *
+}
+module std_cstdlib [system] {
+  header "cstdlib"
+  export *
+}
+module std_cstring [system] {
+  header "cstring"
+  export *
+}
+module std_ctgmath [system] {
+  header "ctgmath"
+  export *
+}
+module std_ctime [system] {
+  header "ctime"
+  export *
+}
+module std_cuchar [system] {
+  header "cuchar"
+  export *
+}
+module std_cwchar [system] {
+  header "cwchar"
+  export *
+}
+module std_cwctype [system] {
+  header "cwctype"
+  export *
+}
+
+// C standard library interfaces augmented/replaced in C++
+// <assert.h> provided by C library.
+module std_complex_h [system] {
+  header "complex.h"
+  export *
+}
+module std_ctype_h [system] {
+  header "ctype.h"
+  export *
+}
+module std_errno_h [system] {
+  header "errno.h"
+  export *
+}
+module std_fenv_h [system] {
+  header "fenv.h"
+  export *
+}
+module std_float_h [system] {
+  header "float.h"
+  export *
+}
+module std_inttypes_h [system] {
+  header "inttypes.h"
+  export *
+}
+// <iso646.h> provided by compiler.
+module std_limits_h [system] {
+  header "limits.h"
+  export *
+}
+module std_locale_h [system] {
+  header "locale.h"
+  export *
+}
+module std_math_h [system] {
+  header "math.h"
+  export *
+}
+module std_setjmp_h [system] {
+  header "setjmp.h"
+  export *
+}
+// <signal.h> provided by C library.
+// FIXME: <stdalign.h> is missing.
+// <stdarg.h> provided by compiler.
+module std_stdatomic_h [system] {
+  header "stdatomic.h"
+  export *
+}
+module std_stdbool_h [system] {
+  // <stdbool.h>'s __bool_true_false_are_defined macro requires textual inclusion.
+  textual header "stdbool.h"
+  export *
+}
+module std_stddef_h [system] {
+  // <stddef.h>'s __need_* macros require textual inclusion.
+  textual header "stddef.h"
+  export *
+}
+module std_stdint_h [system] {
+  header "stdint.h"
+  export *
+}
+module std_stdio_h [system] {
+  // <stdio.h>'s __need_* macros require textual inclusion.
+  textual header "stdio.h"
+  export *
+}
+module std_stdlib_h [system] {
+  // <stdlib.h>'s __need_* macros require textual inclusion.
+  textual header "stdlib.h"
+  export *
+}
+module std_string_h [system] {
+  header "string.h"
+  export *
+}
+module std_tgmath_h [system] {
+  header "tgmath.h"
+  export *
+}
+module std_uchar_h [system] {
+  header "uchar.h"
+  export *
+}
+// <time.h> provided by C library.
+module std_wchar_h [system] {
+  // <wchar.h>'s __need_* macros require textual inclusion.
+  textual header "wchar.h"
+  export *
+}
+module std_wctype_h [system] {
+  header "wctype.h"
+  export *
+}
+
+// Experimental C++ standard library interfaces
+module std_experimental [system] {
+  module deque {
+    header "experimental/deque"
+    export *
+  }
+  module forward_list {
+    header "experimental/forward_list"
+    export *
+  }
+  module iterator {
+    header "experimental/iterator"
+    export *
+  }
+  module list {
+    header "experimental/list"
+    export *
+  }
+  module map {
+    header "experimental/map"
+    export *
+  }
+  module memory_resource {
+    header "experimental/memory_resource"
+    export *
+  }
+  module propagate_const {
+    header "experimental/propagate_const"
+    export *
+  }
+  module regex {
+    
+    header "experimental/regex"
+    export *
+  }
+  module simd {
+    header "experimental/simd"
+    export *
+  }
+  module set {
+    header "experimental/set"
+    export *
+  }
+  module string {
+    header "experimental/string"
+    export *
+  }
+  module type_traits {
+    header "experimental/type_traits"
+    export *
+  }
+  module unordered_map {
+    header "experimental/unordered_map"
+    export *
+  }
+  module unordered_set {
+    header "experimental/unordered_set"
+    export *
+  }
+  module utility {
+    header "experimental/utility"
+    export *
+  }
+  module vector {
+    header "experimental/vector"
+    export *
+  }
+  module __config {
+    private textual header "experimental/__config"
+    export *
+  }
+  // FIXME these should be private
+  module __memory {
+    header "experimental/__memory"
+    export *
+  }
+}
+
+// Convenience method to get all of the above modules in a single import statement.
+// Importing only the needed modules is likely to be more performant.
+//module std [system] {
+//  header "__std_clang_module"
+//  export *
+//}
+
+// Implementation detail headers that are private to libc++. These modules
+// must not be directly imported.
+module std_private_assert            [system] {
+  header "__assert"
+  export *
+}
+module std_private_availability      [system] {
+  header "__availability"
+  export *
+}
+module std_private_bit_reference     [system] {
+  header "__bit_reference"
+  export *
+}
+module std_private_config            [system] {
+  textual header "__config"
+  export *
+}
+module std_private_hash_table        [system] {
+  header "__hash_table"
+  export *
+}
+module std_private_locale            [system] {
+  header "__locale"
+  export *
+}
+module std_private_mbstate_t         [system] {
+  header "__mbstate_t.h"
+  export *
+}
+module std_private_node_handle       [system] {
+  header "__node_handle"
+  export *
+}
+module std_private_split_buffer      [system] {
+  header "__split_buffer"
+  export *
+}
+module std_private_std_mbstate_t     [system] {
+  header "__std_mbstate_t.h"
+  export *
+}
+module std_private_threading_support [system] {
+  header "__threading_support"
+  export *
+}
+module std_private_tree              [system] {
+  header "__tree"
+  export *
+}
+module std_private_undef_macros      [system] {
+  textual header "__undef_macros"
+  export *
+}
+module std_private_verbose_abort     [system] {
+  header "__verbose_abort"
+  export *
+}
+
+module std_private_algorithm_adjacent_find                               [system] { header "__algorithm/adjacent_find.h" }
+module std_private_algorithm_all_of                                      [system] { header "__algorithm/all_of.h" }
+module std_private_algorithm_any_of                                      [system] { header "__algorithm/any_of.h" }
+module std_private_algorithm_binary_search                               [system] { header "__algorithm/binary_search.h" }
+module std_private_algorithm_clamp                                       [system] { header "__algorithm/clamp.h" }
+module std_private_algorithm_comp                                        [system] { header "__algorithm/comp.h" }
+module std_private_algorithm_comp_ref_type                               [system] { header "__algorithm/comp_ref_type.h" }
+module std_private_algorithm_copy                                        [system] {
+  header "__algorithm/copy.h"
+  export std_private_algorithm_copy_move_common
+}
+module std_private_algorithm_copy_backward                               [system] { header "__algorithm/copy_backward.h" }
+module std_private_algorithm_copy_if                                     [system] { header "__algorithm/copy_if.h" }
+module std_private_algorithm_copy_move_common                            [system] {
+  header "__algorithm/copy_move_common.h"
+  export std_private_type_traits_is_trivially_copyable
+}
+module std_private_algorithm_copy_n                                      [system] { header "__algorithm/copy_n.h" }
+module std_private_algorithm_count                                       [system] { header "__algorithm/count.h" }
+module std_private_algorithm_count_if                                    [system] { header "__algorithm/count_if.h" }
+module std_private_algorithm_equal                                       [system] { header "__algorithm/equal.h" }
+module std_private_algorithm_equal_range                                 [system] { header "__algorithm/equal_range.h" }
+module std_private_algorithm_fill                                        [system] { header "__algorithm/fill.h" }
+module std_private_algorithm_fill_n                                      [system] { header "__algorithm/fill_n.h" }
+module std_private_algorithm_find                                        [system] {
+  header "__algorithm/find.h"
+  export std_private_algorithm_unwrap_iter
+}
+module std_private_algorithm_find_end                                    [system] { header "__algorithm/find_end.h" }
+module std_private_algorithm_find_first_of                               [system] { header "__algorithm/find_first_of.h" }
+module std_private_algorithm_find_if                                     [system] { header "__algorithm/find_if.h" }
+module std_private_algorithm_find_if_not                                 [system] { header "__algorithm/find_if_not.h" }
+module std_private_algorithm_for_each                                    [system] { header "__algorithm/for_each.h" }
+module std_private_algorithm_for_each_n                                  [system] { header "__algorithm/for_each_n.h" }
+module std_private_algorithm_for_each_segment                            [system] { header "__algorithm/for_each_segment.h" }
+module std_private_algorithm_generate                                    [system] { header "__algorithm/generate.h" }
+module std_private_algorithm_generate_n                                  [system] { header "__algorithm/generate_n.h" }
+module std_private_algorithm_half_positive                               [system] { header "__algorithm/half_positive.h" }
+module std_private_algorithm_in_found_result                             [system] { header "__algorithm/in_found_result.h" }
+module std_private_algorithm_in_fun_result                               [system] { header "__algorithm/in_fun_result.h" }
+module std_private_algorithm_in_in_out_result                            [system] { header "__algorithm/in_in_out_result.h" }
+module std_private_algorithm_in_in_result                                [system] { header "__algorithm/in_in_result.h" }
+module std_private_algorithm_in_out_out_result                           [system] { header "__algorithm/in_out_out_result.h" }
+module std_private_algorithm_in_out_result                               [system] { header "__algorithm/in_out_result.h" }
+module std_private_algorithm_includes                                    [system] { header "__algorithm/includes.h" }
+module std_private_algorithm_inplace_merge                               [system] { header "__algorithm/inplace_merge.h" }
+module std_private_algorithm_is_heap                                     [system] { header "__algorithm/is_heap.h" }
+module std_private_algorithm_is_heap_until                               [system] { header "__algorithm/is_heap_until.h" }
+module std_private_algorithm_is_partitioned                              [system] { header "__algorithm/is_partitioned.h" }
+module std_private_algorithm_is_permutation                              [system] { header "__algorithm/is_permutation.h" }
+module std_private_algorithm_is_sorted                                   [system] { header "__algorithm/is_sorted.h" }
+module std_private_algorithm_is_sorted_until                             [system] { header "__algorithm/is_sorted_until.h" }
+module std_private_algorithm_iter_swap                                   [system] { header "__algorithm/iter_swap.h" }
+module std_private_algorithm_iterator_operations                         [system] {
+  header "__algorithm/iterator_operations.h"
+  export *
+}
+module std_private_algorithm_lexicographical_compare                     [system] { header "__algorithm/lexicographical_compare.h" }
+module std_private_algorithm_lexicographical_compare_three_way           [system] { header "__algorithm/lexicographical_compare_three_way.h" }
+module std_private_algorithm_lower_bound                                 [system] { header "__algorithm/lower_bound.h" }
+module std_private_algorithm_make_heap                                   [system] { header "__algorithm/make_heap.h" }
+module std_private_algorithm_make_projected                              [system] { header "__algorithm/make_projected.h" }
+module std_private_algorithm_max                                         [system] { header "__algorithm/max.h" }
+module std_private_algorithm_max_element                                 [system] { header "__algorithm/max_element.h" }
+module std_private_algorithm_merge                                       [system] { header "__algorithm/merge.h" }
+module std_private_algorithm_min                                         [system] { header "__algorithm/min.h" }
+module std_private_algorithm_min_element                                 [system] { header "__algorithm/min_element.h" }
+module std_private_algorithm_min_max_result                              [system] { header "__algorithm/min_max_result.h" }
+module std_private_algorithm_minmax                                      [system] {
+  header "__algorithm/minmax.h"
+  export *
+}
+module std_private_algorithm_minmax_element                              [system] { header "__algorithm/minmax_element.h" }
+module std_private_algorithm_mismatch                                    [system] { header "__algorithm/mismatch.h" }
+module std_private_algorithm_move                                        [system] { header "__algorithm/move.h" }
+module std_private_algorithm_move_backward                               [system] { header "__algorithm/move_backward.h" }
+module std_private_algorithm_next_permutation                            [system] { header "__algorithm/next_permutation.h" }
+module std_private_algorithm_none_of                                     [system] { header "__algorithm/none_of.h" }
+module std_private_algorithm_nth_element                                 [system] { header "__algorithm/nth_element.h" }
+module std_private_algorithm_partial_sort                                [system] { header "__algorithm/partial_sort.h" }
+module std_private_algorithm_partial_sort_copy                           [system] { header "__algorithm/partial_sort_copy.h" }
+module std_private_algorithm_partition                                   [system] { header "__algorithm/partition.h" }
+module std_private_algorithm_partition_copy                              [system] { header "__algorithm/partition_copy.h" }
+module std_private_algorithm_partition_point                             [system] { header "__algorithm/partition_point.h" }
+module std_private_algorithm_pop_heap                                    [system] { header "__algorithm/pop_heap.h" }
+module std_private_algorithm_prev_permutation                            [system] { header "__algorithm/prev_permutation.h" }
+module std_private_algorithm_pstl_any_all_none_of                        [system] { header "__algorithm/pstl_any_all_none_of.h" }
+module std_private_algorithm_pstl_backend                                [system] {
+  header "__algorithm/pstl_backend.h"
+  export *
+}
+module std_private_algorithm_pstl_backends_cpu_backend                   [system] {
+  header "__algorithm/pstl_backends/cpu_backend.h"
+  export *
+}
+module std_private_algorithm_pstl_backends_cpu_backends_any_of           [system] { header "__algorithm/pstl_backends/cpu_backends/any_of.h" }
+module std_private_algorithm_pstl_backends_cpu_backends_backend          [system] {
+  header "__algorithm/pstl_backends/cpu_backends/backend.h"
+  export *
+}
+module std_private_algorithm_pstl_backends_cpu_backends_fill             [system] { header "__algorithm/pstl_backends/cpu_backends/fill.h" }
+module std_private_algorithm_pstl_backends_cpu_backends_find_if          [system] { header "__algorithm/pstl_backends/cpu_backends/find_if.h" }
+module std_private_algorithm_pstl_backends_cpu_backends_for_each         [system] { header "__algorithm/pstl_backends/cpu_backends/for_each.h" }
+module std_private_algorithm_pstl_backends_cpu_backends_libdispatch      [system] { header "__algorithm/pstl_backends/cpu_backends/libdispatch.h" }
+module std_private_algorithm_pstl_backends_cpu_backends_merge            [system] { header "__algorithm/pstl_backends/cpu_backends/merge.h" }
+module std_private_algorithm_pstl_backends_cpu_backends_serial           [system] { textual header "__algorithm/pstl_backends/cpu_backends/serial.h" }
+module std_private_algorithm_pstl_backends_cpu_backends_stable_sort      [system] { header "__algorithm/pstl_backends/cpu_backends/stable_sort.h" }
+module std_private_algorithm_pstl_backends_cpu_backends_thread           [system] { textual header "__algorithm/pstl_backends/cpu_backends/thread.h" }
+module std_private_algorithm_pstl_backends_cpu_backends_transform        [system] {
+  header "__algorithm/pstl_backends/cpu_backends/transform.h"
+  export std_private_algorithm_transform
+}
+module std_private_algorithm_pstl_backends_cpu_backends_transform_reduce [system] { header "__algorithm/pstl_backends/cpu_backends/transform_reduce.h" }
+module std_private_algorithm_pstl_copy                                   [system] { header "__algorithm/pstl_copy.h" }
+module std_private_algorithm_pstl_count                                  [system] { header "__algorithm/pstl_count.h" }
+module std_private_algorithm_pstl_fill                                   [system] { header "__algorithm/pstl_fill.h" }
+module std_private_algorithm_pstl_find                                   [system] {
+  header "__algorithm/pstl_find.h"
+  export *
+}
+module std_private_algorithm_pstl_for_each                               [system] {
+  header "__algorithm/pstl_for_each.h"
+  export *
+}
+module std_private_algorithm_pstl_frontend_dispatch                      [system] {
+  header "__algorithm/pstl_frontend_dispatch.h"
+  export std_private_utility_forward
+}
+module std_private_algorithm_pstl_generate                               [system] { header "__algorithm/pstl_generate.h" }
+module std_private_algorithm_pstl_is_partitioned                         [system] { header "__algorithm/pstl_is_partitioned.h" }
+module std_private_algorithm_pstl_merge                                  [system] { header "__algorithm/pstl_merge.h" }
+module std_private_algorithm_pstl_replace                                [system] { header "__algorithm/pstl_replace.h" }
+module std_private_algorithm_pstl_sort                                   [system] { header "__algorithm/pstl_sort.h" }
+module std_private_algorithm_pstl_stable_sort                            [system] {
+  header "__algorithm/pstl_stable_sort.h"
+  export std_private_functional_operations
+}
+module std_private_algorithm_pstl_transform                              [system] { header "__algorithm/pstl_transform.h" }
+module std_private_algorithm_push_heap                                   [system] { header "__algorithm/push_heap.h" }
+module std_private_algorithm_ranges_adjacent_find                        [system] { header "__algorithm/ranges_adjacent_find.h" }
+module std_private_algorithm_ranges_all_of                               [system] { header "__algorithm/ranges_all_of.h" }
+module std_private_algorithm_ranges_any_of                               [system] { header "__algorithm/ranges_any_of.h" }
+module std_private_algorithm_ranges_binary_search                        [system] {
+  header "__algorithm/ranges_binary_search.h"
+  export std_private_functional_ranges_operations
+}
+module std_private_algorithm_ranges_clamp                                [system] {
+  header "__algorithm/ranges_clamp.h"
+  export std_private_functional_ranges_operations
+}
+module std_private_algorithm_ranges_copy                                 [system] {
+  header "__algorithm/ranges_copy.h"
+  export std_private_algorithm_in_out_result
+}
+module std_private_algorithm_ranges_copy_backward                        [system] {
+  header "__algorithm/ranges_copy_backward.h"
+  export std_private_algorithm_in_out_result
+}
+module std_private_algorithm_ranges_copy_if                              [system] {
+  header "__algorithm/ranges_copy_if.h"
+  export std_private_algorithm_in_out_result
+}
+module std_private_algorithm_ranges_copy_n                               [system] {
+  header "__algorithm/ranges_copy_n.h"
+  export std_private_algorithm_in_out_result
+}
+module std_private_algorithm_ranges_count                                [system] { header "__algorithm/ranges_count.h" }
+module std_private_algorithm_ranges_count_if                             [system] { header "__algorithm/ranges_count_if.h" }
+module std_private_algorithm_ranges_equal                                [system] { header "__algorithm/ranges_equal.h" }
+module std_private_algorithm_ranges_equal_range                          [system] {
+  header "__algorithm/ranges_equal_range.h"
+  export std_private_functional_ranges_operations
+}
+module std_private_algorithm_ranges_fill                                 [system] { header "__algorithm/ranges_fill.h" }
+module std_private_algorithm_ranges_fill_n                               [system] { header "__algorithm/ranges_fill_n.h" }
+module std_private_algorithm_ranges_find                                 [system] { header "__algorithm/ranges_find.h" }
+module std_private_algorithm_ranges_find_end                             [system] { header "__algorithm/ranges_find_end.h" }
+module std_private_algorithm_ranges_find_first_of                        [system] { header "__algorithm/ranges_find_first_of.h" }
+module std_private_algorithm_ranges_find_if                              [system] { header "__algorithm/ranges_find_if.h" }
+module std_private_algorithm_ranges_find_if_not                          [system] { header "__algorithm/ranges_find_if_not.h" }
+module std_private_algorithm_ranges_for_each                             [system] {
+  header "__algorithm/ranges_for_each.h"
+  export std_private_algorithm_in_fun_result
+}
+module std_private_algorithm_ranges_for_each_n                           [system] {
+  header "__algorithm/ranges_for_each_n.h"
+  export std_private_algorithm_in_fun_result
+}
+module std_private_algorithm_ranges_generate                             [system] { header "__algorithm/ranges_generate.h" }
+module std_private_algorithm_ranges_generate_n                           [system] { header "__algorithm/ranges_generate_n.h" }
+module std_private_algorithm_ranges_includes                             [system] {
+  header "__algorithm/ranges_includes.h"
+  export std_private_functional_ranges_operations
+}
+module std_private_algorithm_ranges_inplace_merge                        [system] {
+  header "__algorithm/ranges_inplace_merge.h"
+  export std_private_functional_ranges_operations
+}
+module std_private_algorithm_ranges_is_heap                              [system] {
+  header "__algorithm/ranges_is_heap.h"
+  export std_private_functional_ranges_operations
+}
+module std_private_algorithm_ranges_is_heap_until                        [system] {
+  header "__algorithm/ranges_is_heap_until.h"
+  export std_private_functional_ranges_operations
+}
+module std_private_algorithm_ranges_is_partitioned                       [system] { header "__algorithm/ranges_is_partitioned.h" }
+module std_private_algorithm_ranges_is_permutation                       [system] { header "__algorithm/ranges_is_permutation.h" }
+module std_private_algorithm_ranges_is_sorted                            [system] {
+  header "__algorithm/ranges_is_sorted.h"
+  export std_private_functional_ranges_operations
+}
+module std_private_algorithm_ranges_is_sorted_until                      [system] {
+  header "__algorithm/ranges_is_sorted_until.h"
+  export std_private_functional_ranges_operations
+}
+module std_private_algorithm_ranges_iterator_concept                     [system] { header "__algorithm/ranges_iterator_concept.h" }
+module std_private_algorithm_ranges_lexicographical_compare              [system] {
+  header "__algorithm/ranges_lexicographical_compare.h"
+  export std_private_functional_ranges_operations
+}
+module std_private_algorithm_ranges_lower_bound                          [system] {
+  header "__algorithm/ranges_lower_bound.h"
+  export std_private_functional_ranges_operations
+}
+module std_private_algorithm_ranges_make_heap                            [system] {
+  header "__algorithm/ranges_make_heap.h"
+  export std_private_functional_ranges_operations
+}
+module std_private_algorithm_ranges_max                                  [system] {
+  header "__algorithm/ranges_max.h"
+  export std_private_functional_ranges_operations
+}
+module std_private_algorithm_ranges_max_element                          [system] {
+  header "__algorithm/ranges_max_element.h"
+  export std_private_functional_ranges_operations
+}
+module std_private_algorithm_ranges_merge                                [system] {
+  header "__algorithm/ranges_merge.h"
+  export std_private_algorithm_in_in_out_result
+}
+module std_private_algorithm_ranges_min                                  [system] {
+  header "__algorithm/ranges_min.h"
+  export std_private_functional_ranges_operations
+}
+module std_private_algorithm_ranges_min_element                          [system] {
+  header "__algorithm/ranges_min_element.h"
+  export std_private_functional_ranges_operations
+}
+module std_private_algorithm_ranges_minmax                               [system] {
+  header "__algorithm/ranges_minmax.h"
+  export std_private_functional_ranges_operations
+  export std_private_algorithm_min_max_result
+}
+module std_private_algorithm_ranges_minmax_element                       [system] {
+  header "__algorithm/ranges_minmax_element.h"
+  export std_private_functional_ranges_operations
+  export std_private_algorithm_min_max_result
+}
+module std_private_algorithm_ranges_mismatch                             [system] {
+  header "__algorithm/ranges_mismatch.h"
+  export std_private_algorithm_in_in_result
+}
+module std_private_algorithm_ranges_move                                 [system] {
+  header "__algorithm/ranges_move.h"
+  export std_private_algorithm_in_out_result
+}
+module std_private_algorithm_ranges_move_backward                        [system] {
+  header "__algorithm/ranges_move_backward.h"
+  export std_private_algorithm_in_out_result
+}
+module std_private_algorithm_ranges_next_permutation                     [system] {
+  header "__algorithm/ranges_next_permutation.h"
+  export std_private_algorithm_in_found_result
+  export std_private_functional_ranges_operations
+}
+module std_private_algorithm_ranges_none_of                              [system] { header "__algorithm/ranges_none_of.h" }
+module std_private_algorithm_ranges_nth_element                          [system] {
+  header "__algorithm/ranges_nth_element.h"
+  export std_private_functional_ranges_operations
+}
+module std_private_algorithm_ranges_partial_sort                         [system] {
+  header "__algorithm/ranges_partial_sort.h"
+  export std_private_functional_ranges_operations
+}
+module std_private_algorithm_ranges_partial_sort_copy                    [system] {
+  header "__algorithm/ranges_partial_sort_copy.h"
+  export std_private_algorithm_in_out_result
+  export std_private_functional_ranges_operations
+}
+module std_private_algorithm_ranges_partition                            [system] { header "__algorithm/ranges_partition.h" }
+module std_private_algorithm_ranges_partition_copy                       [system] { header "__algorithm/ranges_partition_copy.h" }
+module std_private_algorithm_ranges_partition_point                      [system] { header "__algorithm/ranges_partition_point.h" }
+module std_private_algorithm_ranges_pop_heap                             [system] {
+  header "__algorithm/ranges_pop_heap.h"
+  export std_private_functional_ranges_operations
+}
+module std_private_algorithm_ranges_prev_permutation                     [system] {
+  header "__algorithm/ranges_prev_permutation.h"
+  export std_private_algorithm_in_found_result
+  export std_private_functional_ranges_operations
+}
+module std_private_algorithm_ranges_push_heap                            [system] {
+  header "__algorithm/ranges_push_heap.h"
+  export std_private_functional_ranges_operations
+}
+module std_private_algorithm_ranges_remove                               [system] { header "__algorithm/ranges_remove.h" }
+module std_private_algorithm_ranges_remove_copy                          [system] {
+  header "__algorithm/ranges_remove_copy.h"
+  export std_private_algorithm_in_out_result
+}
+module std_private_algorithm_ranges_remove_copy_if                       [system] {
+  header "__algorithm/ranges_remove_copy_if.h"
+  export std_private_algorithm_in_out_result
+}
+module std_private_algorithm_ranges_remove_if                            [system] { header "__algorithm/ranges_remove_if.h" }
+module std_private_algorithm_ranges_replace                              [system] { header "__algorithm/ranges_replace.h" }
+module std_private_algorithm_ranges_replace_copy                         [system] {
+  header "__algorithm/ranges_replace_copy.h"
+  export std_private_algorithm_in_out_result
+}
+module std_private_algorithm_ranges_replace_copy_if                      [system] {
+  header "__algorithm/ranges_replace_copy_if.h"
+  export std_private_algorithm_in_out_result
+}
+module std_private_algorithm_ranges_replace_if                           [system] { header "__algorithm/ranges_replace_if.h" }
+module std_private_algorithm_ranges_reverse                              [system] { header "__algorithm/ranges_reverse.h" }
+module std_private_algorithm_ranges_reverse_copy                         [system] {
+  header "__algorithm/ranges_reverse_copy.h"
+  export std_private_algorithm_in_out_result
+}
+module std_private_algorithm_ranges_rotate                               [system] { header "__algorithm/ranges_rotate.h" }
+module std_private_algorithm_ranges_rotate_copy                          [system] {
+  header "__algorithm/ranges_rotate_copy.h"
+  export std_private_algorithm_in_out_result
+}
+module std_private_algorithm_ranges_sample                               [system] { header "__algorithm/ranges_sample.h" }
+module std_private_algorithm_ranges_search                               [system] { header "__algorithm/ranges_search.h" }
+module std_private_algorithm_ranges_search_n                             [system] { header "__algorithm/ranges_search_n.h" }
+module std_private_algorithm_ranges_set_difference                       [system] {
+  header "__algorithm/ranges_set_difference.h"
+  export std_private_algorithm_in_out_result
+}
+module std_private_algorithm_ranges_set_intersection                     [system] {
+  header "__algorithm/ranges_set_intersection.h"
+  export std_private_algorithm_in_in_out_result
+}
+module std_private_algorithm_ranges_set_symmetric_difference             [system] {
+  header "__algorithm/ranges_set_symmetric_difference.h"
+  export std_private_algorithm_in_in_out_result
+  export std_private_functional_ranges_operations
+}
+module std_private_algorithm_ranges_set_union                            [system] {
+  header "__algorithm/ranges_set_union.h"
+  export std_private_algorithm_in_in_out_result
+  export std_private_functional_ranges_operations
+}
+module std_private_algorithm_ranges_shuffle                              [system] { header "__algorithm/ranges_shuffle.h" }
+module std_private_algorithm_ranges_sort                                 [system] {
+  header "__algorithm/ranges_sort.h"
+  export std_private_algorithm_make_projected
+  export std_private_functional_ranges_operations
+}
+module std_private_algorithm_ranges_sort_heap                            [system] {
+  header "__algorithm/ranges_sort_heap.h"
+  export std_private_functional_ranges_operations
+}
+module std_private_algorithm_ranges_stable_partition                     [system] { header "__algorithm/ranges_stable_partition.h" }
+module std_private_algorithm_ranges_stable_sort                          [system] {
+  header "__algorithm/ranges_stable_sort.h"
+  export std_private_functional_ranges_operations
+}
+module std_private_algorithm_ranges_starts_with                          [system] { header "__algorithm/ranges_starts_with.h" }
+module std_private_algorithm_ranges_swap_ranges                          [system] {
+  header "__algorithm/ranges_swap_ranges.h"
+  export std_private_algorithm_in_in_result
+}
+module std_private_algorithm_ranges_transform                            [system] {
+  header "__algorithm/ranges_transform.h"
+  export std_private_algorithm_in_in_out_result
+  export std_private_algorithm_in_out_result
+}
+module std_private_algorithm_ranges_unique                               [system] { header "__algorithm/ranges_unique.h" }
+module std_private_algorithm_ranges_unique_copy                          [system] {
+  header "__algorithm/ranges_unique_copy.h"
+  export std_private_algorithm_in_out_result
+}
+module std_private_algorithm_ranges_upper_bound                          [system] {
+  header "__algorithm/ranges_upper_bound.h"
+  export std_private_functional_ranges_operations
+}
+module std_private_algorithm_remove                                      [system] { header "__algorithm/remove.h" }
+module std_private_algorithm_remove_copy                                 [system] { header "__algorithm/remove_copy.h" }
+module std_private_algorithm_remove_copy_if                              [system] { header "__algorithm/remove_copy_if.h" }
+module std_private_algorithm_remove_if                                   [system] { header "__algorithm/remove_if.h" }
+module std_private_algorithm_replace                                     [system] { header "__algorithm/replace.h" }
+module std_private_algorithm_replace_copy                                [system] { header "__algorithm/replace_copy.h" }
+module std_private_algorithm_replace_copy_if                             [system] { header "__algorithm/replace_copy_if.h" }
+module std_private_algorithm_replace_if                                  [system] { header "__algorithm/replace_if.h" }
+module std_private_algorithm_reverse                                     [system] { header "__algorithm/reverse.h" }
+module std_private_algorithm_reverse_copy                                [system] { header "__algorithm/reverse_copy.h" }
+module std_private_algorithm_rotate                                      [system] { header "__algorithm/rotate.h" }
+module std_private_algorithm_rotate_copy                                 [system] { header "__algorithm/rotate_copy.h" }
+module std_private_algorithm_sample                                      [system] { header "__algorithm/sample.h" }
+module std_private_algorithm_search                                      [system] { header "__algorithm/search.h" }
+module std_private_algorithm_search_n                                    [system] { header "__algorithm/search_n.h" }
+module std_private_algorithm_set_difference                              [system] { header "__algorithm/set_difference.h" }
+module std_private_algorithm_set_intersection                            [system] { header "__algorithm/set_intersection.h" }
+module std_private_algorithm_set_symmetric_difference                    [system] { header "__algorithm/set_symmetric_difference.h" }
+module std_private_algorithm_set_union                                   [system] { header "__algorithm/set_union.h" }
+module std_private_algorithm_shift_left                                  [system] { header "__algorithm/shift_left.h" }
+module std_private_algorithm_shift_right                                 [system] { header "__algorithm/shift_right.h" }
+module std_private_algorithm_shuffle                                     [system] { header "__algorithm/shuffle.h" }
+module std_private_algorithm_sift_down                                   [system] { header "__algorithm/sift_down.h" }
+module std_private_algorithm_sort                                        [system] {
+  header "__algorithm/sort.h"
+  export std_private_debug_utils_strict_weak_ordering_check
+}
+module std_private_algorithm_sort_heap                                   [system] { header "__algorithm/sort_heap.h" }
+module std_private_algorithm_stable_partition                            [system] { header "__algorithm/stable_partition.h" }
+module std_private_algorithm_stable_sort                                 [system] { header "__algorithm/stable_sort.h" }
+module std_private_algorithm_swap_ranges                                 [system] {
+  header "__algorithm/swap_ranges.h"
+  export std_private_algorithm_iterator_operations
+}
+module std_private_algorithm_three_way_comp_ref_type                     [system] { header "__algorithm/three_way_comp_ref_type.h" }
+module std_private_algorithm_transform                                   [system] { header "__algorithm/transform.h" }
+module std_private_algorithm_uniform_random_bit_generator_adaptor        [system] { header "__algorithm/uniform_random_bit_generator_adaptor.h" }
+module std_private_algorithm_unique                                      [system] { header "__algorithm/unique.h" }
+module std_private_algorithm_unique_copy                                 [system] { header "__algorithm/unique_copy.h" }
+module std_private_algorithm_unwrap_iter                                 [system] {
+  header "__algorithm/unwrap_iter.h"
+  export std_private_iterator_iterator_traits
+}
+module std_private_algorithm_unwrap_range                                [system] {
+  header "__algorithm/unwrap_range.h"
+  export std_private_utility_pair
+}
+module std_private_algorithm_upper_bound                                 [system] { header "__algorithm/upper_bound.h" }
+
+module std_private_array_array_fwd [system] { header "__fwd/array.h" }
+
+module std_private_atomic_aliases             [system] {
+  header "__atomic/aliases.h"
+  export std_private_atomic_atomic
+}
+module std_private_atomic_atomic              [system] {
+  header "__atomic/atomic.h"
+  export std_private_atomic_atomic_base
+}
+module std_private_atomic_atomic_base         [system] { header "__atomic/atomic_base.h" }
+module std_private_atomic_atomic_flag         [system] {
+  header "__atomic/atomic_flag.h"
+  export *
+}
+module std_private_atomic_atomic_init         [system] { header "__atomic/atomic_init.h" }
+module std_private_atomic_atomic_lock_free    [system] { header "__atomic/atomic_lock_free.h" }
+module std_private_atomic_atomic_sync         [system] { header "__atomic/atomic_sync.h" }
+module std_private_atomic_check_memory_order  [system] { header "__atomic/check_memory_order.h" }
+module std_private_atomic_contention_t        [system] { header "__atomic/contention_t.h" }
+module std_private_atomic_cxx_atomic_impl     [system] { header "__atomic/cxx_atomic_impl.h" }
+module std_private_atomic_fence               [system] { header "__atomic/fence.h" }
+module std_private_atomic_is_always_lock_free [system] { header "__atomic/is_always_lock_free.h" }
+module std_private_atomic_kill_dependency     [system] { header "__atomic/kill_dependency.h" }
+module std_private_atomic_memory_order        [system] { header "__atomic/memory_order.h" }
+
+module std_private_bit_bit_cast       [system] { header "__bit/bit_cast.h" }
+module std_private_bit_bit_ceil       [system] { header "__bit/bit_ceil.h" }
+module std_private_bit_bit_floor      [system] { header "__bit/bit_floor.h" }
+module std_private_bit_bit_log2       [system] { header "__bit/bit_log2.h" }
+module std_private_bit_bit_width      [system] { header "__bit/bit_width.h" }
+module std_private_bit_blsr           [system] { header "__bit/blsr.h" }
+module std_private_bit_byteswap       [system] { header "__bit/byteswap.h" }
+module std_private_bit_countl         [system] { header "__bit/countl.h" }
+module std_private_bit_countr         [system] { header "__bit/countr.h" }
+module std_private_bit_endian         [system] { header "__bit/endian.h" }
+module std_private_bit_has_single_bit [system] { header "__bit/has_single_bit.h" }
+module std_private_bit_popcount       [system] { header "__bit/popcount.h" }
+module std_private_bit_rotate         [system] { header "__bit/rotate.h" }
+
+module std_private_charconv_chars_format            [system] { header "__charconv/chars_format.h" }
+module std_private_charconv_from_chars_integral     [system] { header "__charconv/from_chars_integral.h" }
+module std_private_charconv_from_chars_result       [system] { header "__charconv/from_chars_result.h" }
+module std_private_charconv_tables                  [system] { header "__charconv/tables.h" }
+module std_private_charconv_to_chars                [system] { header "__charconv/to_chars.h" }
+module std_private_charconv_to_chars_base_10        [system] { header "__charconv/to_chars_base_10.h" }
+module std_private_charconv_to_chars_floating_point [system] { header "__charconv/to_chars_floating_point.h" }
+module std_private_charconv_to_chars_integral       [system] { header "__charconv/to_chars_integral.h" }
+module std_private_charconv_to_chars_result         [system] { header "__charconv/to_chars_result.h" }
+module std_private_charconv_traits                  [system] { header "__charconv/traits.h" }
+
+module std_private_chrono_calendar               [system] { header "__chrono/calendar.h" }
+module std_private_chrono_concepts               [system] { header "__chrono/concepts.h" }
+module std_private_chrono_convert_to_timespec    [system] { header "__chrono/convert_to_timespec.h" }
+module std_private_chrono_convert_to_tm          [system] { header "__chrono/convert_to_tm.h" }
+module std_private_chrono_day                    [system] { header "__chrono/day.h" }
+module std_private_chrono_duration               [system] {
+  header "__chrono/duration.h"
+  export std_private_type_traits_is_convertible
+}
+module std_private_chrono_file_clock             [system] { header "__chrono/file_clock.h" }
+module std_private_chrono_formatter              [system] {
+  header "__chrono/formatter.h"
+}
+module std_private_chrono_hh_mm_ss               [system] { header "__chrono/hh_mm_ss.h" }
+module std_private_chrono_high_resolution_clock  [system] {
+  header "__chrono/high_resolution_clock.h"
+  export std_private_chrono_steady_clock
+  export std_private_chrono_system_clock
+}
+module std_private_chrono_literals               [system] { header "__chrono/literals.h" }
+module std_private_chrono_month                  [system] { header "__chrono/month.h" }
+module std_private_chrono_month_weekday          [system] { header "__chrono/month_weekday.h" }
+module std_private_chrono_monthday               [system] { header "__chrono/monthday.h" }
+module std_private_chrono_ostream                [system] {
+  header "__chrono/ostream.h"
+}
+module std_private_chrono_parser_std_format_spec [system] {
+  header "__chrono/parser_std_format_spec.h"
+}
+module std_private_chrono_statically_widen       [system] { header "__chrono/statically_widen.h" }
+module std_private_chrono_steady_clock           [system] {
+  header "__chrono/steady_clock.h"
+  export std_private_chrono_time_point
+}
+module std_private_chrono_system_clock           [system] {
+  header "__chrono/system_clock.h"
+  export std_private_chrono_time_point
+}
+module std_private_chrono_time_point             [system] { header "__chrono/time_point.h" }
+module std_private_chrono_weekday                [system] { header "__chrono/weekday.h" }
+module std_private_chrono_year                   [system] { header "__chrono/year.h" }
+module std_private_chrono_year_month             [system] { header "__chrono/year_month.h" }
+module std_private_chrono_year_month_day         [system] { header "__chrono/year_month_day.h" }
+module std_private_chrono_year_month_weekday     [system] { header "__chrono/year_month_weekday.h" }
+
+module std_private_compare_common_comparison_category     [system] { header "__compare/common_comparison_category.h" }
+module std_private_compare_compare_partial_order_fallback [system] { header "__compare/compare_partial_order_fallback.h" }
+module std_private_compare_compare_strong_order_fallback  [system] { header "__compare/compare_strong_order_fallback.h" }
+module std_private_compare_compare_three_way              [system] { header "__compare/compare_three_way.h" }
+module std_private_compare_compare_three_way_result       [system] { header "__compare/compare_three_way_result.h" }
+module std_private_compare_compare_weak_order_fallback    [system] { header "__compare/compare_weak_order_fallback.h" }
+module std_private_compare_is_eq                          [system] { header "__compare/is_eq.h" }
+module std_private_compare_ordering                       [system] { header "__compare/ordering.h" }
+module std_private_compare_partial_order                  [system] { header "__compare/partial_order.h" }
+module std_private_compare_strong_order                   [system] { header "__compare/strong_order.h" }
+module std_private_compare_synth_three_way                [system] { header "__compare/synth_three_way.h" }
+module std_private_compare_three_way_comparable           [system] { header "__compare/three_way_comparable.h" }
+module std_private_compare_weak_order                     [system] { header "__compare/weak_order.h" }
+
+module std_private_concepts_arithmetic            [system] { header "__concepts/arithmetic.h" }
+module std_private_concepts_assignable            [system] { header "__concepts/assignable.h" }
+module std_private_concepts_boolean_testable      [system] { header "__concepts/boolean_testable.h" }
+module std_private_concepts_class_or_enum         [system] { header "__concepts/class_or_enum.h" }
+module std_private_concepts_common_reference_with [system] { header "__concepts/common_reference_with.h" }
+module std_private_concepts_common_with           [system] { header "__concepts/common_with.h" }
+module std_private_concepts_constructible         [system] {
+  header "__concepts/constructible.h"
+  export std_private_concepts_destructible
+}
+module std_private_concepts_convertible_to        [system] { header "__concepts/convertible_to.h" }
+module std_private_concepts_copyable              [system] { header "__concepts/copyable.h" }
+module std_private_concepts_derived_from          [system] { header "__concepts/derived_from.h" }
+module std_private_concepts_destructible          [system] {
+  header "__concepts/destructible.h"
+  export std_private_type_traits_is_nothrow_destructible
+}
+module std_private_concepts_different_from        [system] { header "__concepts/different_from.h" }
+module std_private_concepts_equality_comparable   [system] {
+  header "__concepts/equality_comparable.h"
+  export std_private_type_traits_common_reference
+}
+module std_private_concepts_invocable             [system] { header "__concepts/invocable.h" }
+module std_private_concepts_movable               [system] {
+  header "__concepts/movable.h"
+  export std_private_type_traits_is_object
+}
+module std_private_concepts_predicate             [system] { header "__concepts/predicate.h" }
+module std_private_concepts_regular               [system] { header "__concepts/regular.h" }
+module std_private_concepts_relation              [system] { header "__concepts/relation.h" }
+module std_private_concepts_same_as               [system] {
+  header "__concepts/same_as.h"
+  export std_private_type_traits_is_same
+}
+module std_private_concepts_semiregular           [system] { header "__concepts/semiregular.h" }
+module std_private_concepts_swappable             [system] { header "__concepts/swappable.h" }
+module std_private_concepts_totally_ordered       [system] { header "__concepts/totally_ordered.h" }
+
+module std_private_condition_variable_condition_variable [system] {
+  header "__condition_variable/condition_variable.h"
+  export *
+}
+
+module std_private_coroutine_coroutine_handle      [system] { header "__coroutine/coroutine_handle.h" }
+module std_private_coroutine_coroutine_traits      [system] { header "__coroutine/coroutine_traits.h" }
+module std_private_coroutine_noop_coroutine_handle [system] { header "__coroutine/noop_coroutine_handle.h" }
+module std_private_coroutine_trivial_awaitables    [system] { header "__coroutine/trivial_awaitables.h" }
+
+module std_private_debug_utils_randomize_range            [system] { header "__debug_utils/randomize_range.h" }
+module std_private_debug_utils_strict_weak_ordering_check [system] {
+  header "__debug_utils/strict_weak_ordering_check.h"
+  export std_private_type_traits_is_constant_evaluated
+}
+
+module std_private_exception_exception        [system] { header "__exception/exception.h" }
+module std_private_exception_exception_ptr    [system] {
+  header "__exception/exception_ptr.h"
+  export std_private_exception_operations
+}
+module std_private_exception_nested_exception [system] { header "__exception/nested_exception.h" }
+module std_private_exception_operations       [system] { header "__exception/operations.h" }
+module std_private_exception_terminate        [system] { header "__exception/terminate.h" }
+
+module std_private_expected_bad_expected_access [system] { header "__expected/bad_expected_access.h" }
+module std_private_expected_expected            [system] { header "__expected/expected.h" }
+module std_private_expected_unexpect            [system] { header "__expected/unexpect.h" }
+module std_private_expected_unexpected          [system] { header "__expected/unexpected.h" }
+
+module std_private_filesystem_copy_options                 [system] { header "__filesystem/copy_options.h" }
+module std_private_filesystem_directory_entry              [system] {
+  header "__filesystem/directory_entry.h"
+  export *
+}
+module std_private_filesystem_directory_iterator           [system] {
+  header "__filesystem/directory_iterator.h"
+  export *
+}
+module std_private_filesystem_directory_options            [system] { header "__filesystem/directory_options.h" }
+module std_private_filesystem_file_status                  [system] { header "__filesystem/file_status.h" }
+module std_private_filesystem_file_time_type               [system] { header "__filesystem/file_time_type.h" }
+module std_private_filesystem_file_type                    [system] { header "__filesystem/file_type.h" }
+module std_private_filesystem_filesystem_error             [system] {
+  header "__filesystem/filesystem_error.h"
+  export *
+}
+module std_private_filesystem_operations                   [system] { header "__filesystem/operations.h" }
+module std_private_filesystem_path                         [system] {
+  header "__filesystem/path.h"
+  export *
+}
+module std_private_filesystem_path_iterator                [system] { header "__filesystem/path_iterator.h" }
+module std_private_filesystem_perm_options                 [system] { header "__filesystem/perm_options.h" }
+module std_private_filesystem_perms                        [system] { header "__filesystem/perms.h" }
+module std_private_filesystem_recursive_directory_iterator [system] {
+  header "__filesystem/recursive_directory_iterator.h"
+  export *
+}
+module std_private_filesystem_space_info                   [system] { header "__filesystem/space_info.h" }
+module std_private_filesystem_u8path                       [system] { header "__filesystem/u8path.h" }
+
+module std_private_format_buffer                          [system] { header "__format/buffer.h" }
+module std_private_format_concepts                        [system] { header "__format/concepts.h" }
+module std_private_format_container_adaptor               [system] { header "__format/container_adaptor.h" }
+module std_private_format_enable_insertable               [system] { header "__format/enable_insertable.h" }
+module std_private_format_escaped_output_table            [system] { header "__format/escaped_output_table.h" }
+module std_private_format_extended_grapheme_cluster_table [system] { header "__format/extended_grapheme_cluster_table.h" }
+module std_private_format_format_arg                      [system] { header "__format/format_arg.h" }
+module std_private_format_format_arg_store                [system] { header "__format/format_arg_store.h" }
+module std_private_format_format_args                     [system] { header "__format/format_args.h" }
+module std_private_format_format_context                  [system] {
+  header "__format/format_context.h"
+  export *
+}
+module std_private_format_format_error                    [system] { header "__format/format_error.h" }
+module std_private_format_format_functions                [system] {
+  header "__format/format_functions.h"
+  export std_string
+}
+module std_private_format_format_fwd                      [system] { header "__format/format_fwd.h" }
+module std_private_format_format_parse_context            [system] { header "__format/format_parse_context.h" }
+module std_private_format_format_string                   [system] { header "__format/format_string.h" }
+module std_private_format_format_to_n_result              [system] {
+  header "__format/format_to_n_result.h"
+  export std_private_iterator_incrementable_traits
+}
+module std_private_format_formatter                       [system] { header "__format/formatter.h" }
+module std_private_format_formatter_bool                  [system] { header "__format/formatter_bool.h" }
+module std_private_format_formatter_char                  [system] { header "__format/formatter_char.h" }
+module std_private_format_formatter_floating_point        [system] { header "__format/formatter_floating_point.h" }
+module std_private_format_formatter_integer               [system] { header "__format/formatter_integer.h" }
+module std_private_format_formatter_integral              [system] { header "__format/formatter_integral.h" }
+module std_private_format_formatter_output                [system] { header "__format/formatter_output.h" }
+module std_private_format_formatter_pointer               [system] { header "__format/formatter_pointer.h" }
+module std_private_format_formatter_string                [system] { header "__format/formatter_string.h" }
+module std_private_format_formatter_tuple                 [system] { header "__format/formatter_tuple.h" }
+module std_private_format_parser_std_format_spec          [system] { header "__format/parser_std_format_spec.h" }
+module std_private_format_range_default_formatter         [system] { header "__format/range_default_formatter.h" }
+module std_private_format_range_formatter                 [system] { header "__format/range_formatter.h" }
+module std_private_format_unicode                         [system] {
+  header "__format/unicode.h"
+  export std_private_format_extended_grapheme_cluster_table
+}
+module std_private_format_width_estimation_table          [system] { header "__format/width_estimation_table.h" }
+module std_private_format_write_escaped                   [system] { header "__format/write_escaped.h" }
+
+module std_private_functional_binary_function            [system] { header "__functional/binary_function.h" }
+module std_private_functional_binary_negate              [system] { header "__functional/binary_negate.h" }
+module std_private_functional_bind                       [system] { header "__functional/bind.h" }
+module std_private_functional_bind_back                  [system] { header "__functional/bind_back.h" }
+module std_private_functional_bind_front                 [system] { header "__functional/bind_front.h" }
+module std_private_functional_binder1st                  [system] { header "__functional/binder1st.h" }
+module std_private_functional_binder2nd                  [system] { header "__functional/binder2nd.h" }
+module std_private_functional_boyer_moore_searcher       [system] {
+  header "__functional/boyer_moore_searcher.h"
+  export std_private_memory_shared_ptr
+}
+module std_private_functional_compose                    [system] {
+  header "__functional/compose.h"
+  export std_private_functional_perfect_forward
+}
+module std_private_functional_default_searcher           [system] { header "__functional/default_searcher.h" }
+module std_private_functional_function                   [system] { header "__functional/function.h" }
+module std_private_functional_hash                       [system] {
+  header "__functional/hash.h"
+  export std_cstdint
+  export std_private_type_traits_underlying_type
+  export std_private_utility_pair
+}
+module std_private_functional_hash_fwd                   [system] { header "__fwd/hash.h" }
+module std_private_functional_identity                   [system] { header "__functional/identity.h" }
+module std_private_functional_invoke                     [system] {
+  header "__functional/invoke.h"
+  export *
+}
+module std_private_functional_is_transparent             [system] { header "__functional/is_transparent.h" }
+module std_private_functional_mem_fn                     [system] { header "__functional/mem_fn.h" }
+module std_private_functional_mem_fun_ref                [system] { header "__functional/mem_fun_ref.h" }
+module std_private_functional_not_fn                     [system] { header "__functional/not_fn.h" }
+module std_private_functional_operations                 [system] { header "__functional/operations.h" }
+module std_private_functional_perfect_forward            [system] {
+  header "__functional/perfect_forward.h"
+  export *
+}
+module std_private_functional_pointer_to_binary_function [system] { header "__functional/pointer_to_binary_function.h" }
+module std_private_functional_pointer_to_unary_function  [system] { header "__functional/pointer_to_unary_function.h" }
+module std_private_functional_ranges_operations          [system] { header "__functional/ranges_operations.h" }
+module std_private_functional_reference_wrapper          [system] { header "__functional/reference_wrapper.h" }
+module std_private_functional_unary_function             [system] { header "__functional/unary_function.h" }
+module std_private_functional_unary_negate               [system] { header "__functional/unary_negate.h" }
+module std_private_functional_weak_result_type           [system] { header "__functional/weak_result_type.h" }
+
+module std_private_ios_fpos [system] { header "__ios/fpos.h" }
+
+module std_private_iosfwd_fstream_fwd   [system] { header "__fwd/fstream.h" }
+module std_private_iosfwd_ios_fwd       [system] { header "__fwd/ios.h" }
+module std_private_iosfwd_istream_fwd   [system] { header "__fwd/istream.h" }
+module std_private_iosfwd_ostream_fwd   [system] { header "__fwd/ostream.h" }
+module std_private_iosfwd_sstream_fwd   [system] { header "__fwd/sstream.h" }
+module std_private_iosfwd_streambuf_fwd [system] { header "__fwd/streambuf.h" }
+
+module std_private_iterator_access                  [system] { header "__iterator/access.h" }
+module std_private_iterator_advance                 [system] { header "__iterator/advance.h" }
+module std_private_iterator_back_insert_iterator    [system] { header "__iterator/back_insert_iterator.h" }
+module std_private_iterator_bounded_iter            [system] { header "__iterator/bounded_iter.h" }
+module std_private_iterator_common_iterator         [system] { header "__iterator/common_iterator.h" }
+module std_private_iterator_concepts                [system] {
+  header "__iterator/concepts.h"
+  export std_private_concepts_constructible
+  export std_private_concepts_equality_comparable
+  export std_private_concepts_movable
+  export std_private_type_traits_common_reference
+  export std_private_type_traits_is_reference
+  export std_private_type_traits_remove_cvref
+}
+module std_private_iterator_counted_iterator        [system] { header "__iterator/counted_iterator.h" }
+module std_private_iterator_cpp17_iterator_concepts [system] { header "__iterator/cpp17_iterator_concepts.h" }
+module std_private_iterator_data                    [system] { header "__iterator/data.h" }
+module std_private_iterator_default_sentinel        [system] { header "__iterator/default_sentinel.h" }
+module std_private_iterator_distance                [system] {
+  header "__iterator/distance.h"
+  export std_private_ranges_size
+}
+module std_private_iterator_empty                   [system] { header "__iterator/empty.h" }
+module std_private_iterator_erase_if_container      [system] { header "__iterator/erase_if_container.h" }
+module std_private_iterator_front_insert_iterator   [system] { header "__iterator/front_insert_iterator.h" }
+module std_private_iterator_incrementable_traits    [system] { header "__iterator/incrementable_traits.h" }
+module std_private_iterator_indirectly_comparable   [system] { header "__iterator/indirectly_comparable.h" }
+module std_private_iterator_insert_iterator         [system] { header "__iterator/insert_iterator.h" }
+module std_private_iterator_istream_iterator        [system] { header "__iterator/istream_iterator.h" }
+module std_private_iterator_istreambuf_iterator     [system] { header "__iterator/istreambuf_iterator.h" }
+module std_private_iterator_iter_move               [system] { header "__iterator/iter_move.h" }
+module std_private_iterator_iter_swap               [system] { header "__iterator/iter_swap.h" }
+module std_private_iterator_iterator                [system] { header "__iterator/iterator.h" }
+module std_private_iterator_iterator_traits         [system] {
+  header "__iterator/iterator_traits.h"
+  export std_private_type_traits_is_primary_template
+}
+module std_private_iterator_iterator_with_data      [system] { header "__iterator/iterator_with_data.h" }
+module std_private_iterator_mergeable               [system] {
+  header "__iterator/mergeable.h"
+  export std_private_functional_ranges_operations
+}
+module std_private_iterator_move_iterator           [system] { header "__iterator/move_iterator.h" }
+module std_private_iterator_move_sentinel           [system] { header "__iterator/move_sentinel.h" }
+module std_private_iterator_next                    [system] { header "__iterator/next.h" }
+module std_private_iterator_ostream_iterator        [system] { header "__iterator/ostream_iterator.h" }
+module std_private_iterator_ostreambuf_iterator     [system] {
+  header "__iterator/ostreambuf_iterator.h"
+  export *
+}
+module std_private_iterator_permutable              [system] { header "__iterator/permutable.h" }
+module std_private_iterator_prev                    [system] { header "__iterator/prev.h" }
+module std_private_iterator_projected               [system] { header "__iterator/projected.h" }
+module std_private_iterator_ranges_iterator_traits  [system] { header "__iterator/ranges_iterator_traits.h" }
+module std_private_iterator_readable_traits         [system] { header "__iterator/readable_traits.h" }
+module std_private_iterator_reverse_access          [system] { header "__iterator/reverse_access.h" }
+module std_private_iterator_reverse_iterator        [system] { header "__iterator/reverse_iterator.h" }
+module std_private_iterator_segmented_iterator      [system] { header "__iterator/segmented_iterator.h" }
+module std_private_iterator_size                    [system] { header "__iterator/size.h" }
+module std_private_iterator_sortable                [system] {
+  header "__iterator/sortable.h"
+  export std_private_functional_ranges_operations
+}
+module std_private_iterator_unreachable_sentinel    [system] { header "__iterator/unreachable_sentinel.h" }
+module std_private_iterator_wrap_iter               [system] { header "__iterator/wrap_iter.h" }
+
+module std_private_locale_locale_base_api_bsd_locale_defaults  [system] { textual header "__locale_dir/locale_base_api/bsd_locale_defaults.h" }
+module std_private_locale_locale_base_api_bsd_locale_fallbacks [system] { textual header "__locale_dir/locale_base_api/bsd_locale_fallbacks.h" }
+module std_private_locale_locale_base_api_locale_guard         [system] { header "__locale_dir/locale_base_api/locale_guard.h" }
+
+module std_private_mdspan_default_accessor [system] { header "__mdspan/default_accessor.h" }
+module std_private_mdspan_extents          [system] {
+  header "__mdspan/extents.h"
+  export *
+}
+module std_private_mdspan_layout_left      [system] { header "__mdspan/layout_left.h" }
+module std_private_mdspan_layout_right     [system] { header "__mdspan/layout_right.h" }
+module std_private_mdspan_mdspan           [system] { header "__mdspan/mdspan.h" }
+module std_private_mdspan_mdspan_fwd       [system] { header "__fwd/mdspan.h" }
+
+module std_private_memory_addressof                       [system] { header "__memory/addressof.h" }
+module std_private_memory_align                           [system] { header "__memory/align.h" }
+module std_private_memory_aligned_alloc                   [system] { header "__memory/aligned_alloc.h" }
+module std_private_memory_allocate_at_least               [system] { header "__memory/allocate_at_least.h" }
+module std_private_memory_allocation_guard                [system] { header "__memory/allocation_guard.h" }
+module std_private_memory_allocator                       [system] { header "__memory/allocator.h" }
+module std_private_memory_allocator_arg_t                 [system] { header "__memory/allocator_arg_t.h" }
+module std_private_memory_allocator_destructor            [system] { header "__memory/allocator_destructor.h" }
+module std_private_memory_allocator_traits                [system] { header "__memory/allocator_traits.h" }
+module std_private_memory_assume_aligned                  [system] { header "__memory/assume_aligned.h" }
+module std_private_memory_auto_ptr                        [system] { header "__memory/auto_ptr.h" }
+module std_private_memory_builtin_new_allocator           [system] {
+  header "__memory/builtin_new_allocator.h"
+  export *
+}
+module std_private_memory_compressed_pair                 [system] { header "__memory/compressed_pair.h" }
+module std_private_memory_concepts                        [system] {
+  header "__memory/concepts.h"
+  export std_private_type_traits_remove_reference
+}
+module std_private_memory_construct_at                    [system] { header "__memory/construct_at.h" }
+module std_private_memory_destruct_n                      [system] { header "__memory/destruct_n.h" }
+module std_private_memory_pointer_traits                  [system] { header "__memory/pointer_traits.h" }
+module std_private_memory_ranges_construct_at             [system] { header "__memory/ranges_construct_at.h" }
+module std_private_memory_ranges_uninitialized_algorithms [system] {
+  header "__memory/ranges_uninitialized_algorithms.h"
+  export std_private_algorithm_in_out_result
+}
+module std_private_memory_raw_storage_iterator            [system] { header "__memory/raw_storage_iterator.h" }
+module std_private_memory_shared_ptr                      [system] {
+  header "__memory/shared_ptr.h"
+  export std_private_memory_uninitialized_algorithms
+}
+module std_private_memory_swap_allocator                  [system] { header "__memory/swap_allocator.h" }
+module std_private_memory_temp_value                      [system] { header "__memory/temp_value.h" }
+module std_private_memory_temporary_buffer                [system] { header "__memory/temporary_buffer.h" }
+module std_private_memory_uninitialized_algorithms        [system] {
+  header "__memory/uninitialized_algorithms.h"
+  export std_private_algorithm_copy
+}
+module std_private_memory_unique_ptr                      [system] {
+  header "__memory/unique_ptr.h"
+  export std_private_type_traits_add_lvalue_reference
+  export std_private_type_traits_is_pointer
+  export std_private_type_traits_type_identity
+}
+module std_private_memory_uses_allocator                  [system] { header "__memory/uses_allocator.h" }
+module std_private_memory_uses_allocator_construction     [system] { header "__memory/uses_allocator_construction.h" }
+module std_private_memory_voidify                         [system] { header "__memory/voidify.h" }
+
+module std_private_memory_resource_memory_resource              [system] { header "__memory_resource/memory_resource.h" }
+module std_private_memory_resource_memory_resource_fwd          [system] { header "__fwd/memory_resource.h" }
+module std_private_memory_resource_monotonic_buffer_resource    [system] { header "__memory_resource/monotonic_buffer_resource.h" }
+module std_private_memory_resource_polymorphic_allocator        [system] { header "__memory_resource/polymorphic_allocator.h" }
+module std_private_memory_resource_pool_options                 [system] { header "__memory_resource/pool_options.h" }
+module std_private_memory_resource_synchronized_pool_resource   [system] {
+  header "__memory_resource/synchronized_pool_resource.h"
+  export *
+}
+module std_private_memory_resource_unsynchronized_pool_resource [system] { header "__memory_resource/unsynchronized_pool_resource.h" }
+
+module std_private_mutex_lock_guard  [system] { header "__mutex/lock_guard.h" }
+module std_private_mutex_mutex       [system] { header "__mutex/mutex.h" }
+module std_private_mutex_tag_types   [system] { header "__mutex/tag_types.h" }
+module std_private_mutex_unique_lock [system] { header "__mutex/unique_lock.h" }
+
+module std_private_numeric_accumulate               [system] { header "__numeric/accumulate.h" }
+module std_private_numeric_adjacent_difference      [system] { header "__numeric/adjacent_difference.h" }
+module std_private_numeric_exclusive_scan           [system] { header "__numeric/exclusive_scan.h" }
+module std_private_numeric_gcd_lcm                  [system] { header "__numeric/gcd_lcm.h" }
+module std_private_numeric_inclusive_scan           [system] { header "__numeric/inclusive_scan.h" }
+module std_private_numeric_inner_product            [system] { header "__numeric/inner_product.h" }
+module std_private_numeric_iota                     [system] { header "__numeric/iota.h" }
+module std_private_numeric_midpoint                 [system] { header "__numeric/midpoint.h" }
+module std_private_numeric_partial_sum              [system] { header "__numeric/partial_sum.h" }
+module std_private_numeric_pstl_reduce              [system] { header "__numeric/pstl_reduce.h" }
+module std_private_numeric_pstl_transform_reduce    [system] {
+  header "__numeric/pstl_transform_reduce.h"
+  export *
+}
+module std_private_numeric_reduce                   [system] { header "__numeric/reduce.h" }
+module std_private_numeric_transform_exclusive_scan [system] { header "__numeric/transform_exclusive_scan.h" }
+module std_private_numeric_transform_inclusive_scan [system] { header "__numeric/transform_inclusive_scan.h" }
+module std_private_numeric_transform_reduce         [system] { header "__numeric/transform_reduce.h" }
+
+module std_private_random_bernoulli_distribution          [system] { header "__random/bernoulli_distribution.h" }
+module std_private_random_binomial_distribution           [system] { header "__random/binomial_distribution.h" }
+module std_private_random_cauchy_distribution             [system] { header "__random/cauchy_distribution.h" }
+module std_private_random_chi_squared_distribution        [system] { header "__random/chi_squared_distribution.h" }
+module std_private_random_clamp_to_integral               [system] { header "__random/clamp_to_integral.h" }
+module std_private_random_default_random_engine           [system] { header "__random/default_random_engine.h" }
+module std_private_random_discard_block_engine            [system] { header "__random/discard_block_engine.h" }
+module std_private_random_discrete_distribution           [system] {
+  header "__random/discrete_distribution.h"
+  export *
+}
+module std_private_random_exponential_distribution        [system] { header "__random/exponential_distribution.h" }
+module std_private_random_extreme_value_distribution      [system] { header "__random/extreme_value_distribution.h" }
+module std_private_random_fisher_f_distribution           [system] { header "__random/fisher_f_distribution.h" }
+module std_private_random_gamma_distribution              [system] { header "__random/gamma_distribution.h" }
+module std_private_random_generate_canonical              [system] { header "__random/generate_canonical.h" }
+module std_private_random_geometric_distribution          [system] { header "__random/geometric_distribution.h" }
+module std_private_random_independent_bits_engine         [system] { header "__random/independent_bits_engine.h" }
+module std_private_random_is_seed_sequence                [system] { header "__random/is_seed_sequence.h" }
+module std_private_random_is_valid                        [system] { header "__random/is_valid.h" }
+module std_private_random_knuth_b                         [system] { header "__random/knuth_b.h" }
+module std_private_random_linear_congruential_engine      [system] { header "__random/linear_congruential_engine.h" }
+module std_private_random_log2                            [system] { header "__random/log2.h" }
+module std_private_random_lognormal_distribution          [system] { header "__random/lognormal_distribution.h" }
+module std_private_random_mersenne_twister_engine         [system] { header "__random/mersenne_twister_engine.h" }
+module std_private_random_negative_binomial_distribution  [system] { header "__random/negative_binomial_distribution.h" }
+module std_private_random_normal_distribution             [system] { header "__random/normal_distribution.h" }
+module std_private_random_piecewise_constant_distribution [system] {
+  header "__random/piecewise_constant_distribution.h"
+  export *
+}
+module std_private_random_piecewise_linear_distribution   [system] {
+  header "__random/piecewise_linear_distribution.h"
+  export *
+}
+module std_private_random_poisson_distribution            [system] { header "__random/poisson_distribution.h" }
+module std_private_random_random_device                   [system] {
+  header "__random/random_device.h"
+  export *
+}
+module std_private_random_ranlux                          [system] { header "__random/ranlux.h" }
+module std_private_random_seed_seq                        [system] {
+  header "__random/seed_seq.h"
+  export *
+}
+module std_private_random_shuffle_order_engine            [system] { header "__random/shuffle_order_engine.h" }
+module std_private_random_student_t_distribution          [system] { header "__random/student_t_distribution.h" }
+module std_private_random_subtract_with_carry_engine      [system] { header "__random/subtract_with_carry_engine.h" }
+module std_private_random_uniform_int_distribution        [system] { header "__random/uniform_int_distribution.h" }
+module std_private_random_uniform_random_bit_generator    [system] { header "__random/uniform_random_bit_generator.h" }
+module std_private_random_uniform_real_distribution       [system] { header "__random/uniform_real_distribution.h" }
+module std_private_random_weibull_distribution            [system] { header "__random/weibull_distribution.h" }
+
+module std_private_ranges_access                     [system] { header "__ranges/access.h" }
+module std_private_ranges_all                        [system] {
+  header "__ranges/all.h"
+  export std_private_functional_compose
+  export std_private_functional_perfect_forward
+  export std_private_ranges_owning_view
+}
+module std_private_ranges_as_rvalue_view             [system] { header "__ranges/as_rvalue_view.h" }
+module std_private_ranges_common_view                [system] { header "__ranges/common_view.h" }
+module std_private_ranges_concepts                   [system] {
+  header "__ranges/concepts.h"
+  export std_private_iterator_concepts
+}
+module std_private_ranges_container_compatible_range [system] { header "__ranges/container_compatible_range.h" }
+module std_private_ranges_counted                    [system] {
+  header "__ranges/counted.h"
+  export std_span
+}
+module std_private_ranges_dangling                   [system] { header "__ranges/dangling.h" }
+module std_private_ranges_data                       [system] { header "__ranges/data.h" }
+module std_private_ranges_drop_view                  [system] { header "__ranges/drop_view.h" }
+module std_private_ranges_drop_while_view            [system] { header "__ranges/drop_while_view.h" }
+module std_private_ranges_elements_view              [system] { header "__ranges/elements_view.h" }
+module std_private_ranges_empty                      [system] { header "__ranges/empty.h" }
+module std_private_ranges_empty_view                 [system] { header "__ranges/empty_view.h" }
+module std_private_ranges_enable_borrowed_range      [system] { header "__ranges/enable_borrowed_range.h" }
+module std_private_ranges_enable_view                [system] { header "__ranges/enable_view.h" }
+module std_private_ranges_filter_view                [system] {
+  header "__ranges/filter_view.h"
+  export std_private_ranges_range_adaptor
+}
+module std_private_ranges_from_range                 [system] { header "__ranges/from_range.h" }
+module std_private_ranges_iota_view                  [system] { header "__ranges/iota_view.h" }
+module std_private_ranges_istream_view               [system] {
+  header "__ranges/istream_view.h"
+}
+module std_private_ranges_join_view                  [system] {
+  header "__ranges/join_view.h"
+  export std_private_iterator_iterator_with_data
+  export std_private_iterator_segmented_iterator
+}
+module std_private_ranges_lazy_split_view            [system] {
+  header "__ranges/lazy_split_view.h"
+  export std_private_ranges_non_propagating_cache
+}
+module std_private_ranges_movable_box                [system] { header "__ranges/movable_box.h" }
+module std_private_ranges_non_propagating_cache      [system] { header "__ranges/non_propagating_cache.h" }
+module std_private_ranges_owning_view                [system] { header "__ranges/owning_view.h" }
+module std_private_ranges_range_adaptor              [system] { header "__ranges/range_adaptor.h" }
+module std_private_ranges_rbegin                     [system] { header "__ranges/rbegin.h" }
+module std_private_ranges_ref_view                   [system] { header "__ranges/ref_view.h" }
+module std_private_ranges_rend                       [system] { header "__ranges/rend.h" }
+module std_private_ranges_repeat_view                [system] { header "__ranges/repeat_view.h" }
+module std_private_ranges_reverse_view               [system] { header "__ranges/reverse_view.h" }
+module std_private_ranges_single_view                [system] { header "__ranges/single_view.h" }
+module std_private_ranges_size                       [system] {
+  header "__ranges/size.h"
+  export std_private_type_traits_make_unsigned
+}
+module std_private_ranges_split_view                 [system] { header "__ranges/split_view.h" }
+module std_private_ranges_subrange                   [system] {
+  header "__ranges/subrange.h"
+  export std_private_ranges_subrange_fwd
+}
+module std_private_ranges_subrange_fwd               [system] {
+  header "__fwd/subrange.h"
+  export std_private_iterator_concepts
+}
+module std_private_ranges_take_view                  [system] { header "__ranges/take_view.h" }
+module std_private_ranges_take_while_view            [system] { header "__ranges/take_while_view.h" }
+module std_private_ranges_to                         [system] { header "__ranges/to.h" }
+module std_private_ranges_transform_view             [system] {
+  header "__ranges/transform_view.h"
+  export std_private_functional_bind_back
+  export std_private_functional_perfect_forward
+  export std_private_ranges_movable_box
+}
+module std_private_ranges_view_interface             [system] { header "__ranges/view_interface.h" }
+module std_private_ranges_views                      [system] { header "__ranges/views.h" }
+module std_private_ranges_zip_view                   [system] { header "__ranges/zip_view.h" }
+
+module std_private_span_span_fwd [system] { header "__fwd/span.h" }
+
+module std_private_stop_token_atomic_unique_lock   [system] { header "__stop_token/atomic_unique_lock.h" }
+module std_private_stop_token_intrusive_list_view  [system] { header "__stop_token/intrusive_list_view.h" }
+module std_private_stop_token_intrusive_shared_ptr [system] { header "__stop_token/intrusive_shared_ptr.h" }
+module std_private_stop_token_stop_callback        [system] { header "__stop_token/stop_callback.h" }
+module std_private_stop_token_stop_source          [system] {
+  header "__stop_token/stop_source.h"
+  export *
+}
+module std_private_stop_token_stop_state           [system] {
+  header "__stop_token/stop_state.h"
+  export *
+}
+module std_private_stop_token_stop_token           [system] {
+  header "__stop_token/stop_token.h"
+  export *
+}
+
+module std_private_string_char_traits           [system] {
+  header "__string/char_traits.h"
+  export *
+}
+module std_private_string_constexpr_c_functions [system] {
+  header "__string/constexpr_c_functions.h"
+  export std_private_type_traits_is_equality_comparable
+}
+module std_private_string_extern_template_lists [system] { header "__string/extern_template_lists.h" }
+module std_private_string_string_fwd            [system] { header "__fwd/string.h" }
+
+module std_private_string_view_string_view_fwd [system] { header "__fwd/string_view.h" }
+
+module std_private_system_error_errc            [system] { header "__system_error/errc.h" }
+module std_private_system_error_error_category  [system] { header "__system_error/error_category.h" }
+module std_private_system_error_error_code      [system] {
+  header "__system_error/error_code.h"
+  export std_private_functional_hash
+  export std_private_functional_unary_function
+}
+module std_private_system_error_error_condition [system] {
+  header "__system_error/error_condition.h"
+  export std_private_functional_hash
+  export std_private_functional_unary_function
+}
+module std_private_system_error_system_error    [system] { header "__system_error/system_error.h" }
+
+module std_private_thread_formatter            [system] { header "__thread/formatter.h" }
+module std_private_thread_id                   [system] { header "__thread/id.h" }
+module std_private_thread_poll_with_backoff    [system] { header "__thread/poll_with_backoff.h" }
+module std_private_thread_this_thread          [system] { header "__thread/this_thread.h" }
+module std_private_thread_thread               [system] {
+  header "__thread/thread.h"
+  export *
+}
+module std_private_thread_timed_backoff_policy [system] { header "__thread/timed_backoff_policy.h" }
+
+module std_private_tuple_get_fwd          [system] { header "__fwd/get.h" }
+module std_private_tuple_make_tuple_types [system] { header "__tuple/make_tuple_types.h" }
+module std_private_tuple_pair_like        [system] {
+  header "__tuple/pair_like.h"
+  export std_private_tuple_tuple_like
+}
+module std_private_tuple_sfinae_helpers   [system] { header "__tuple/sfinae_helpers.h" }
+module std_private_tuple_tuple_element    [system] { header "__tuple/tuple_element.h" }
+module std_private_tuple_tuple_fwd        [system] { header "__fwd/tuple.h" }
+module std_private_tuple_tuple_indices    [system] { header "__tuple/tuple_indices.h" }
+module std_private_tuple_tuple_like       [system] { header "__tuple/tuple_like.h" }
+module std_private_tuple_tuple_like_ext   [system] { header "__tuple/tuple_like_ext.h" }
+module std_private_tuple_tuple_size       [system] { header "__tuple/tuple_size.h" }
+module std_private_tuple_tuple_types      [system] { header "__tuple/tuple_types.h" }
+
+module std_private_type_traits_add_const                                 [system] { header "__type_traits/add_const.h" }
+module std_private_type_traits_add_cv                                    [system] { header "__type_traits/add_cv.h" }
+module std_private_type_traits_add_lvalue_reference                      [system] {
+  header "__type_traits/add_lvalue_reference.h"
+  export std_private_type_traits_is_referenceable
+}
+module std_private_type_traits_add_pointer                               [system] { header "__type_traits/add_pointer.h" }
+module std_private_type_traits_add_rvalue_reference                      [system] { header "__type_traits/add_rvalue_reference.h" }
+module std_private_type_traits_add_volatile                              [system] { header "__type_traits/add_volatile.h" }
+module std_private_type_traits_aligned_storage                           [system] { header "__type_traits/aligned_storage.h" }
+module std_private_type_traits_aligned_union                             [system] { header "__type_traits/aligned_union.h" }
+module std_private_type_traits_alignment_of                              [system] { header "__type_traits/alignment_of.h" }
+module std_private_type_traits_apply_cv                                  [system] {
+  header "__type_traits/apply_cv.h"
+  export std_private_type_traits_is_const
+  export std_private_type_traits_is_volatile
+}
+module std_private_type_traits_can_extract_key                           [system] { header "__type_traits/can_extract_key.h" }
+module std_private_type_traits_common_reference                          [system] {
+  header "__type_traits/common_reference.h"
+  export std_private_type_traits_remove_cvref
+}
+module std_private_type_traits_common_type                               [system] {
+  header "__type_traits/common_type.h"
+  export std_private_utility_declval
+}
+module std_private_type_traits_conditional                               [system] { header "__type_traits/conditional.h" }
+module std_private_type_traits_conjunction                               [system] { header "__type_traits/conjunction.h" }
+module std_private_type_traits_copy_cv                                   [system] { header "__type_traits/copy_cv.h" }
+module std_private_type_traits_copy_cvref                                [system] { header "__type_traits/copy_cvref.h" }
+module std_private_type_traits_datasizeof                                [system] { header "__type_traits/datasizeof.h" }
+module std_private_type_traits_decay                                     [system] {
+  header "__type_traits/decay.h"
+  export std_private_type_traits_add_pointer
+}
+module std_private_type_traits_dependent_type                            [system] { header "__type_traits/dependent_type.h" }
+module std_private_type_traits_disjunction                               [system] { header "__type_traits/disjunction.h" }
+module std_private_type_traits_enable_if                                 [system] { header "__type_traits/enable_if.h" }
+module std_private_type_traits_extent                                    [system] { header "__type_traits/extent.h" }
+module std_private_type_traits_has_unique_object_representation          [system] { header "__type_traits/has_unique_object_representation.h" }
+module std_private_type_traits_has_virtual_destructor                    [system] { header "__type_traits/has_virtual_destructor.h" }
+module std_private_type_traits_integral_constant                         [system] { header "__type_traits/integral_constant.h" }
+module std_private_type_traits_invoke                                    [system] {
+  header "__type_traits/invoke.h"
+  export std_private_type_traits_conditional
+  export std_private_type_traits_decay
+  export std_private_type_traits_decay
+  export std_private_type_traits_enable_if
+  export std_private_type_traits_is_base_of
+  export std_private_type_traits_is_core_convertible
+  export std_private_type_traits_is_reference_wrapper
+  export std_private_type_traits_is_same
+  export std_private_type_traits_is_void
+  export std_private_type_traits_nat
+  export std_private_type_traits_remove_cv
+}
+module std_private_type_traits_is_abstract                               [system] { header "__type_traits/is_abstract.h" }
+module std_private_type_traits_is_aggregate                              [system] { header "__type_traits/is_aggregate.h" }
+module std_private_type_traits_is_allocator                              [system] { header "__type_traits/is_allocator.h" }
+module std_private_type_traits_is_always_bitcastable                     [system] { header "__type_traits/is_always_bitcastable.h" }
+module std_private_type_traits_is_arithmetic                             [system] {
+  header "__type_traits/is_arithmetic.h"
+  export std_private_type_traits_integral_constant
+}
+module std_private_type_traits_is_array                                  [system] {
+  header "__type_traits/is_array.h"
+  export std_private_type_traits_integral_constant
+}
+module std_private_type_traits_is_assignable                             [system] { header "__type_traits/is_assignable.h" }
+module std_private_type_traits_is_base_of                                [system] { header "__type_traits/is_base_of.h" }
+module std_private_type_traits_is_bounded_array                          [system] { header "__type_traits/is_bounded_array.h" }
+module std_private_type_traits_is_callable                               [system] { header "__type_traits/is_callable.h" }
+module std_private_type_traits_is_char_like_type                         [system] { header "__type_traits/is_char_like_type.h" }
+module std_private_type_traits_is_class                                  [system] { header "__type_traits/is_class.h" }
+module std_private_type_traits_is_compound                               [system] { header "__type_traits/is_compound.h" }
+module std_private_type_traits_is_const                                  [system] { header "__type_traits/is_const.h" }
+module std_private_type_traits_is_constant_evaluated                     [system] { header "__type_traits/is_constant_evaluated.h" }
+module std_private_type_traits_is_constructible                          [system] { header "__type_traits/is_constructible.h" }
+module std_private_type_traits_is_convertible                            [system] {
+  header "__type_traits/is_convertible.h"
+  export std_private_type_traits_is_array
+}
+module std_private_type_traits_is_copy_assignable                        [system] { header "__type_traits/is_copy_assignable.h" }
+module std_private_type_traits_is_copy_constructible                     [system] { header "__type_traits/is_copy_constructible.h" }
+module std_private_type_traits_is_core_convertible                       [system] {
+  header "__type_traits/is_core_convertible.h"
+  export std_private_type_traits_integral_constant
+}
+module std_private_type_traits_is_default_constructible                  [system] { header "__type_traits/is_default_constructible.h" }
+module std_private_type_traits_is_destructible                           [system] { header "__type_traits/is_destructible.h" }
+module std_private_type_traits_is_empty                                  [system] { header "__type_traits/is_empty.h" }
+module std_private_type_traits_is_enum                                   [system] {
+  header "__type_traits/is_enum.h"
+  export std_private_type_traits_integral_constant
+}
+module std_private_type_traits_is_equality_comparable                    [system] {
+  header "__type_traits/is_equality_comparable.h"
+  export std_private_type_traits_integral_constant
+}
+module std_private_type_traits_is_execution_policy                       [system] {
+  header "__type_traits/is_execution_policy.h"
+  export std_private_type_traits_remove_cvref
+}
+module std_private_type_traits_is_final                                  [system] { header "__type_traits/is_final.h" }
+module std_private_type_traits_is_floating_point                         [system] { header "__type_traits/is_floating_point.h" }
+module std_private_type_traits_is_function                               [system] { header "__type_traits/is_function.h" }
+module std_private_type_traits_is_fundamental                            [system] { header "__type_traits/is_fundamental.h" }
+module std_private_type_traits_is_implicitly_default_constructible       [system] { header "__type_traits/is_implicitly_default_constructible.h" }
+module std_private_type_traits_is_integral                               [system] { header "__type_traits/is_integral.h" }
+module std_private_type_traits_is_literal_type                           [system] { header "__type_traits/is_literal_type.h" }
+module std_private_type_traits_is_member_function_pointer                [system] { header "__type_traits/is_member_function_pointer.h" }
+module std_private_type_traits_is_member_object_pointer                  [system] { header "__type_traits/is_member_object_pointer.h" }
+module std_private_type_traits_is_member_pointer                         [system] { header "__type_traits/is_member_pointer.h" }
+module std_private_type_traits_is_move_assignable                        [system] { header "__type_traits/is_move_assignable.h" }
+module std_private_type_traits_is_move_constructible                     [system] { header "__type_traits/is_move_constructible.h" }
+module std_private_type_traits_is_nothrow_assignable                     [system] { header "__type_traits/is_nothrow_assignable.h" }
+module std_private_type_traits_is_nothrow_constructible                  [system] { header "__type_traits/is_nothrow_constructible.h" }
+module std_private_type_traits_is_nothrow_convertible                    [system] { header "__type_traits/is_nothrow_convertible.h" }
+module std_private_type_traits_is_nothrow_copy_assignable                [system] { header "__type_traits/is_nothrow_copy_assignable.h" }
+module std_private_type_traits_is_nothrow_copy_constructible             [system] { header "__type_traits/is_nothrow_copy_constructible.h" }
+module std_private_type_traits_is_nothrow_default_constructible          [system] { header "__type_traits/is_nothrow_default_constructible.h" }
+module std_private_type_traits_is_nothrow_destructible                   [system] {
+  header "__type_traits/is_nothrow_destructible.h"
+  export std_private_type_traits_is_destructible
+}
+module std_private_type_traits_is_nothrow_move_assignable                [system] { header "__type_traits/is_nothrow_move_assignable.h" }
+module std_private_type_traits_is_nothrow_move_constructible             [system] {
+  header "__type_traits/is_nothrow_move_constructible.h"
+  export std_private_type_traits_is_nothrow_constructible
+}
+module std_private_type_traits_is_null_pointer                           [system] {
+  header "__type_traits/is_null_pointer.h"
+  export std_cstddef
+}
+module std_private_type_traits_is_object                                 [system] {
+  header "__type_traits/is_object.h"
+  export std_private_type_traits_is_scalar
+}
+module std_private_type_traits_is_pod                                    [system] { header "__type_traits/is_pod.h" }
+module std_private_type_traits_is_pointer                                [system] { header "__type_traits/is_pointer.h" }
+module std_private_type_traits_is_polymorphic                            [system] { header "__type_traits/is_polymorphic.h" }
+module std_private_type_traits_is_primary_template                       [system] {
+  header "__type_traits/is_primary_template.h"
+  export std_private_type_traits_enable_if
+}
+module std_private_type_traits_is_reference                              [system] { header "__type_traits/is_reference.h" }
+module std_private_type_traits_is_reference_wrapper                      [system] { header "__type_traits/is_reference_wrapper.h" }
+module std_private_type_traits_is_referenceable                          [system] { header "__type_traits/is_referenceable.h" }
+module std_private_type_traits_is_same                                   [system] {
+  header "__type_traits/is_same.h"
+  export std_private_type_traits_integral_constant
+}
+module std_private_type_traits_is_scalar                                 [system] {
+  header "__type_traits/is_scalar.h"
+  export std_private_type_traits_is_null_pointer
+}
+module std_private_type_traits_is_scoped_enum                            [system] { header "__type_traits/is_scoped_enum.h" }
+module std_private_type_traits_is_signed                                 [system] { header "__type_traits/is_signed.h" }
+module std_private_type_traits_is_signed_integer                         [system] { header "__type_traits/is_signed_integer.h" }
+module std_private_type_traits_is_specialization                         [system] { header "__type_traits/is_specialization.h" }
+module std_private_type_traits_is_standard_layout                        [system] { header "__type_traits/is_standard_layout.h" }
+module std_private_type_traits_is_swappable                              [system] {
+  header "__type_traits/is_swappable.h"
+  export std_private_type_traits_is_move_constructible
+}
+module std_private_type_traits_is_trivial                                [system] { header "__type_traits/is_trivial.h" }
+module std_private_type_traits_is_trivially_assignable                   [system] { header "__type_traits/is_trivially_assignable.h" }
+module std_private_type_traits_is_trivially_constructible                [system] { header "__type_traits/is_trivially_constructible.h" }
+module std_private_type_traits_is_trivially_copy_assignable              [system] { header "__type_traits/is_trivially_copy_assignable.h" }
+module std_private_type_traits_is_trivially_copy_constructible           [system] { header "__type_traits/is_trivially_copy_constructible.h" }
+module std_private_type_traits_is_trivially_copyable                     [system] { header "__type_traits/is_trivially_copyable.h" }
+module std_private_type_traits_is_trivially_default_constructible        [system] { header "__type_traits/is_trivially_default_constructible.h" }
+module std_private_type_traits_is_trivially_destructible                 [system] { header "__type_traits/is_trivially_destructible.h" }
+module std_private_type_traits_is_trivially_lexicographically_comparable [system] { header "__type_traits/is_trivially_lexicographically_comparable.h" }
+module std_private_type_traits_is_trivially_move_assignable              [system] { header "__type_traits/is_trivially_move_assignable.h" }
+module std_private_type_traits_is_trivially_move_constructible           [system] { header "__type_traits/is_trivially_move_constructible.h" }
+module std_private_type_traits_is_unbounded_array                        [system] { header "__type_traits/is_unbounded_array.h" }
+module std_private_type_traits_is_union                                  [system] { header "__type_traits/is_union.h" }
+module std_private_type_traits_is_unsigned                               [system] { header "__type_traits/is_unsigned.h" }
+module std_private_type_traits_is_unsigned_integer                       [system] { header "__type_traits/is_unsigned_integer.h" }
+module std_private_type_traits_is_valid_expansion                        [system] { header "__type_traits/is_valid_expansion.h" }
+module std_private_type_traits_is_void                                   [system] {
+  header "__type_traits/is_void.h"
+  export std_private_type_traits_integral_constant
+}
+module std_private_type_traits_is_volatile                               [system] { header "__type_traits/is_volatile.h" }
+module std_private_type_traits_lazy                                      [system] { header "__type_traits/lazy.h" }
+module std_private_type_traits_make_32_64_or_128_bit                     [system] { header "__type_traits/make_32_64_or_128_bit.h" }
+module std_private_type_traits_make_const_lvalue_ref                     [system] { header "__type_traits/make_const_lvalue_ref.h" }
+module std_private_type_traits_make_signed                               [system] { header "__type_traits/make_signed.h" }
+module std_private_type_traits_make_unsigned                             [system] {
+  header "__type_traits/make_unsigned.h"
+  export std_private_type_traits_is_unsigned
+}
+module std_private_type_traits_maybe_const                               [system] { header "__type_traits/maybe_const.h" }
+module std_private_type_traits_nat                                       [system] { header "__type_traits/nat.h" }
+module std_private_type_traits_negation                                  [system] { header "__type_traits/negation.h" }
+module std_private_type_traits_noexcept_move_assign_container            [system] { header "__type_traits/noexcept_move_assign_container.h" }
+module std_private_type_traits_operation_traits                          [system] { header "__type_traits/operation_traits.h" }
+module std_private_type_traits_predicate_traits                          [system] { header "__type_traits/predicate_traits.h" }
+module std_private_type_traits_promote                                   [system] { header "__type_traits/promote.h" }
+module std_private_type_traits_rank                                      [system] { header "__type_traits/rank.h" }
+module std_private_type_traits_remove_all_extents                        [system] { header "__type_traits/remove_all_extents.h" }
+module std_private_type_traits_remove_const                              [system] { header "__type_traits/remove_const.h" }
+module std_private_type_traits_remove_const_ref                          [system] { header "__type_traits/remove_const_ref.h" }
+module std_private_type_traits_remove_cv                                 [system] {
+  header "__type_traits/remove_cv.h"
+  export std_private_type_traits_remove_const
+  export std_private_type_traits_remove_volatile
+}
+module std_private_type_traits_remove_cvref                              [system] { header "__type_traits/remove_cvref.h" }
+module std_private_type_traits_remove_extent                             [system] { header "__type_traits/remove_extent.h" }
+module std_private_type_traits_remove_pointer                            [system] { header "__type_traits/remove_pointer.h" }
+module std_private_type_traits_remove_reference                          [system] { header "__type_traits/remove_reference.h" }
+module std_private_type_traits_remove_volatile                           [system] { header "__type_traits/remove_volatile.h" }
+module std_private_type_traits_result_of                                 [system] { header "__type_traits/result_of.h" }
+module std_private_type_traits_strip_signature                           [system] { header "__type_traits/strip_signature.h" }
+module std_private_type_traits_type_identity                             [system] { header "__type_traits/type_identity.h" }
+module std_private_type_traits_type_list                                 [system] { header "__type_traits/type_list.h" }
+module std_private_type_traits_underlying_type                           [system] {
+  header "__type_traits/underlying_type.h"
+  export std_private_type_traits_is_enum
+}
+module std_private_type_traits_unwrap_ref                                [system] { header "__type_traits/unwrap_ref.h" }
+module std_private_type_traits_void_t                                    [system] { header "__type_traits/void_t.h" }
+
+module std_private_utility_as_const               [system] { header "__utility/as_const.h" }
+module std_private_utility_auto_cast              [system] {
+  header "__utility/auto_cast.h"
+  export std_private_type_traits_decay
+}
+module std_private_utility_cmp                    [system] {
+  header "__utility/cmp.h"
+  export std_private_type_traits_make_unsigned
+}
+module std_private_utility_convert_to_integral    [system] { header "__utility/convert_to_integral.h" }
+module std_private_utility_declval                [system] { header "__utility/declval.h" }
+module std_private_utility_exception_guard        [system] { header "__utility/exception_guard.h" }
+module std_private_utility_exchange               [system] { header "__utility/exchange.h" }
+module std_private_utility_forward                [system] { header "__utility/forward.h" }
+module std_private_utility_forward_like           [system] { header "__utility/forward_like.h" }
+module std_private_utility_in_place               [system] { header "__utility/in_place.h" }
+module std_private_utility_integer_sequence       [system] { header "__utility/integer_sequence.h" }
+module std_private_utility_is_pointer_in_range    [system] { header "__utility/is_pointer_in_range.h" }
+module std_private_utility_move                   [system] {
+  header "__utility/move.h"
+  export std_private_type_traits_is_copy_constructible
+  export std_private_type_traits_is_nothrow_move_constructible
+  export std_private_type_traits_remove_reference
+}
+module std_private_utility_pair                   [system] {
+  header "__utility/pair.h"
+  export std_private_ranges_subrange_fwd
+  export std_private_tuple_pair_like
+  export std_private_type_traits_is_assignable
+  export std_private_type_traits_is_constructible
+  export std_private_type_traits_is_convertible
+  export std_private_type_traits_is_copy_assignable
+  export std_private_type_traits_is_move_assignable
+  export std_private_type_traits_is_nothrow_copy_constructible
+  export std_private_type_traits_is_nothrow_default_constructible
+  export std_private_type_traits_is_nothrow_move_assignable
+  export std_private_utility_pair_fwd
+}
+module std_private_utility_pair_fwd               [system] { header "__fwd/pair.h" }
+module std_private_utility_piecewise_construct    [system] { header "__utility/piecewise_construct.h" }
+module std_private_utility_priority_tag           [system] { header "__utility/priority_tag.h" }
+module std_private_utility_rel_ops                [system] { header "__utility/rel_ops.h" }
+module std_private_utility_swap                   [system] {
+  header "__utility/swap.h"
+  export std_private_type_traits_is_swappable
+}
+module std_private_utility_terminate_on_exception [system] { header "__utility/terminate_on_exception.h" }
+module std_private_utility_to_underlying          [system] { header "__utility/to_underlying.h" }
+module std_private_utility_unreachable            [system] { header "__utility/unreachable.h" }
+
+module std_private_variant_monostate [system] { header "__variant/monostate.h" }
+}
diff -rupN --exclude=.git* root_v6.28.12_unpatched/root_v6.28.12-source/interpreter/cling/lib/Interpreter/CIFactory.cpp root_v6.28.12_patched/root_v6.28.12-source/interpreter/cling/lib/Interpreter/CIFactory.cpp
--- root_v6.28.12_unpatched/root_v6.28.12-source/interpreter/cling/lib/Interpreter/CIFactory.cpp	2024-09-18 13:23:13
+++ root_v6.28.12_patched/root_v6.28.12-source/interpreter/cling/lib/Interpreter/CIFactory.cpp	2024-09-18 13:49:27
@@ -609,7 +609,7 @@ namespace {
       llvm::sys::path::append(systemLoc, modulemapFilename);
       // Check if we need to mount a custom modulemap. We may have it, for
       // instance when we are on osx or using libc++.
-      if (AllowModulemapOverride &&llvm::sys::fs::exists(systemLoc.str())) {
+      if (AllowModulemapOverride && llvm::sys::fs::exists(systemLoc.str())) {
         if (HSOpts.Verbose)
           cling::log() << "Loading '" << systemLoc.str() << "'\n";
 
@@ -651,6 +651,8 @@ namespace {
         ModuleMapFiles.push_back(systemLoc.str().str());
     };
 
+    const llvm::Triple &Triple = CI.getTarget().getTriple();
+
     if (!HSOpts.ImplicitModuleMaps) {
       // Register the modulemap files.
       llvm::SmallString<512> resourceDirLoc(HSOpts.ResourceDir);
@@ -659,17 +661,20 @@ namespace {
       llvm::SmallString<512> clingModuleMap(clingIncLoc);
       llvm::sys::path::append(clingModuleMap, "module.modulemap");
       ModuleMapFiles.push_back(clingModuleMap.str().str());
-#ifdef __APPLE__
-      llvm::SmallString<512> libcModuleMap(cIncLoc);
-      llvm::sys::path::append(libcModuleMap, "module.modulemap");
-      ModuleMapFiles.push_back(libcModuleMap.str().str());
-      llvm::SmallString<512> stdModuleMap(stdIncLoc);
-      llvm::sys::path::append(stdModuleMap, "module.modulemap");
-      ModuleMapFiles.push_back(stdModuleMap.str().str());
-#endif // __APPLE__
+      if (Triple.isMacOSX()) {
+        llvm::SmallString<512> libcModuleMap(cIncLoc);
+        llvm::sys::path::append(libcModuleMap, "module.modulemap");
+        ModuleMapFiles.push_back(libcModuleMap.str().str());
+        if (CI.getTarget().getSDKVersion() < VersionTuple(14, 4)) {
+          llvm::SmallString<512> stdModuleMap(stdIncLoc);
+          llvm::sys::path::append(stdModuleMap, "module.modulemap");
+          ModuleMapFiles.push_back(stdModuleMap.str().str());
+        }
+      }
     }
 
     std::string MOverlay;
+
 #ifdef _WIN32
     maybeAppendOverlayEntry(vcIncLoc.str(), "vcruntime.modulemap",
                             clingIncLoc.str().str(), MOverlay,
@@ -687,6 +692,12 @@ namespace {
                             clingIncLoc.str().str(), MOverlay,
                             /*RegisterModuleMap=*/ true,
                             /*AllowModulemapOverride=*/ false);
+#elif __APPLE__
+    if (Triple.isMacOSX() && CI.getTarget().getSDKVersion() >= VersionTuple(14, 4))
+      maybeAppendOverlayEntry(stdIncLoc.str(), "std_darwin.modulemap",
+                              clingIncLoc.str().str(), MOverlay,
+                              /*RegisterModuleMap=*/ true,
+                              /*AllowModulemapOverride=*/ false);
 #else
     maybeAppendOverlayEntry(cIncLoc.str(), "libc.modulemap",
                             clingIncLoc.str().str(), MOverlay,
diff -rupN --exclude=.git* root_v6.28.12_unpatched/root_v6.28.12-source/interpreter/cling/lib/Interpreter/IncrementalJIT.cpp root_v6.28.12_patched/root_v6.28.12-source/interpreter/cling/lib/Interpreter/IncrementalJIT.cpp
--- root_v6.28.12_unpatched/root_v6.28.12-source/interpreter/cling/lib/Interpreter/IncrementalJIT.cpp	2024-09-18 13:23:13
+++ root_v6.28.12_patched/root_v6.28.12-source/interpreter/cling/lib/Interpreter/IncrementalJIT.cpp	2024-09-18 13:49:27
@@ -36,7 +36,7 @@ using namespace llvm::orc;
 using namespace llvm;
 using namespace llvm::orc;
 
-namespace {
+namespace cling {
 
   class ClingMMapper final : public SectionMemoryManager::MemoryMapper {
   public:
@@ -65,8 +65,10 @@ namespace {
     }
   };
 
-  ClingMMapper MMapperInstance;
+}
 
+namespace {
+
   // A memory manager for Cling that reserves memory for code and data sections
   // to keep them contiguous for the emission of one module. This is required
   // for working exception handling support since one .eh_frame section will
@@ -128,7 +130,7 @@ namespace {
     AllocInfo m_RWData;
 
   public:
-    ClingMemoryManager() : Super(&MMapperInstance) {}
+    ClingMemoryManager(cling::ClingMMapper& MMapper) : Super(&MMapper) {}
 
     uint8_t* allocateCodeSection(uintptr_t Size, unsigned Alignment,
                                  unsigned SectionID,
@@ -397,7 +399,10 @@ IncrementalJIT::IncrementalJIT(
   // Create ObjectLinkingLayer with our own MemoryManager.
   Builder.setObjectLinkingLayerCreator([&](ExecutionSession& ES,
                                            const Triple& TT) {
-    auto GetMemMgr = []() { return std::make_unique<ClingMemoryManager>(); };
+    m_MMapper = std::make_unique<ClingMMapper>();
+    auto GetMemMgr = [this]() {
+      return std::make_unique<ClingMemoryManager>(*m_MMapper);
+    };
     auto Layer =
         std::make_unique<RTDyldObjectLinkingLayer>(ES, std::move(GetMemMgr));
 
@@ -506,6 +511,8 @@ IncrementalJIT::IncrementalJIT(
   };
   Jit->getExecutionSession().setErrorReporter(ErrorReporter);
 }
+
+IncrementalJIT::~IncrementalJIT() = default;
 
 std::unique_ptr<llvm::orc::DefinitionGenerator> IncrementalJIT::getGenerator() {
   return std::make_unique<DelegateGenerator>(
diff -rupN --exclude=.git* root_v6.28.12_unpatched/root_v6.28.12-source/interpreter/cling/lib/Interpreter/IncrementalJIT.h root_v6.28.12_patched/root_v6.28.12-source/interpreter/cling/lib/Interpreter/IncrementalJIT.h
--- root_v6.28.12_unpatched/root_v6.28.12-source/interpreter/cling/lib/Interpreter/IncrementalJIT.h	2024-09-18 13:23:13
+++ root_v6.28.12_patched/root_v6.28.12-source/interpreter/cling/lib/Interpreter/IncrementalJIT.h	2024-09-18 13:49:27
@@ -33,6 +33,7 @@ namespace cling {
 
 namespace cling {
 
+class ClingMMapper;
 class IncrementalExecutor;
 class Transaction;
 
@@ -59,6 +60,7 @@ class IncrementalJIT { (public)
                  const clang::CompilerInstance &CI,
                  std::unique_ptr<llvm::orc::ExecutorProcessControl> EPC,
                  llvm::Error &Err, void *ExtraLibHandle, bool Verbose);
+  ~IncrementalJIT();
 
   /// Register a DefinitionGenerator to dynamically provide symbols for
   /// generated code that are not already available within the process.
@@ -102,6 +104,7 @@ class IncrementalJIT { (public)
   llvm::TargetMachine &getTargetMachine() { return *TM; }
 
 private:
+  std::unique_ptr<ClingMMapper> m_MMapper;
   std::unique_ptr<llvm::orc::LLJIT> Jit;
   llvm::orc::SymbolMap m_InjectedSymbols;
   SharedAtomicFlag SkipHostProcessLookup;
diff -rupN --exclude=.git* root_v6.28.12_unpatched/root_v6.28.12-source/interpreter/llvm/src/lib/ExecutionEngine/Orc/LLJIT.cpp root_v6.28.12_patched/root_v6.28.12-source/interpreter/llvm/src/lib/ExecutionEngine/Orc/LLJIT.cpp
--- root_v6.28.12_unpatched/root_v6.28.12-source/interpreter/llvm/src/lib/ExecutionEngine/Orc/LLJIT.cpp	2024-09-18 13:23:13
+++ root_v6.28.12_patched/root_v6.28.12-source/interpreter/llvm/src/lib/ExecutionEngine/Orc/LLJIT.cpp	2024-09-18 13:49:28
@@ -481,8 +481,8 @@ GlobalCtorDtorScraper::operator()(ThreadSafeModule TSM
     std::vector<std::pair<Function *, unsigned>> Inits;
     for (auto E : getConstructors(M))
       Inits.push_back(std::make_pair(E.Func, E.Priority));
-    llvm::sort(Inits, [](const std::pair<Function *, unsigned> &LHS,
-                         const std::pair<Function *, unsigned> &RHS) {
+    llvm::stable_sort(Inits, [](const std::pair<Function *, unsigned> &LHS,
+                                const std::pair<Function *, unsigned> &RHS) {
       return LHS.second < RHS.second;
     });
     auto *EntryBlock = BasicBlock::Create(Ctx, "entry", InitFunc);
diff -rupN --exclude=.git* root_v6.28.12_unpatched/root_v6.28.12-source/interpreter/llvm/src/tools/clang/include/clang/AST/ComputeDependence.h root_v6.28.12_patched/root_v6.28.12-source/interpreter/llvm/src/tools/clang/include/clang/AST/ComputeDependence.h
--- root_v6.28.12_unpatched/root_v6.28.12-source/interpreter/llvm/src/tools/clang/include/clang/AST/ComputeDependence.h	2024-09-18 13:23:11
+++ root_v6.28.12_patched/root_v6.28.12-source/interpreter/llvm/src/tools/clang/include/clang/AST/ComputeDependence.h	2024-09-18 13:49:28
@@ -30,7 +30,8 @@ class CompoundLiteralExpr;
 class ArraySubscriptExpr;
 class MatrixSubscriptExpr;
 class CompoundLiteralExpr;
-class CastExpr;
+class ImplicitCastExpr;
+class ExplicitCastExpr;
 class BinaryOperator;
 class ConditionalOperator;
 class BinaryConditionalOperator;
@@ -70,6 +71,7 @@ class CXXConstructExpr;
 class OverloadExpr;
 class DependentScopeDeclRefExpr;
 class CXXConstructExpr;
+class CXXTemporaryObjectExpr;
 class CXXDefaultInitExpr;
 class CXXDefaultArgExpr;
 class LambdaExpr;
@@ -114,7 +116,8 @@ ExprDependence computeDependence(CompoundLiteralExpr *
 ExprDependence computeDependence(ArraySubscriptExpr *E);
 ExprDependence computeDependence(MatrixSubscriptExpr *E);
 ExprDependence computeDependence(CompoundLiteralExpr *E);
-ExprDependence computeDependence(CastExpr *E);
+ExprDependence computeDependence(ImplicitCastExpr *E);
+ExprDependence computeDependence(ExplicitCastExpr *E);
 ExprDependence computeDependence(BinaryOperator *E);
 ExprDependence computeDependence(ConditionalOperator *E);
 ExprDependence computeDependence(BinaryConditionalOperator *E);
@@ -156,6 +159,7 @@ ExprDependence computeDependence(CXXConstructExpr *E);
                                  bool KnownContainsUnexpandedParameterPack);
 ExprDependence computeDependence(DependentScopeDeclRefExpr *E);
 ExprDependence computeDependence(CXXConstructExpr *E);
+ExprDependence computeDependence(CXXTemporaryObjectExpr *E);
 ExprDependence computeDependence(CXXDefaultInitExpr *E);
 ExprDependence computeDependence(CXXDefaultArgExpr *E);
 ExprDependence computeDependence(LambdaExpr *E,
diff -rupN --exclude=.git* root_v6.28.12_unpatched/root_v6.28.12-source/interpreter/llvm/src/tools/clang/include/clang/AST/DependenceFlags.h root_v6.28.12_patched/root_v6.28.12-source/interpreter/llvm/src/tools/clang/include/clang/AST/DependenceFlags.h
--- root_v6.28.12_unpatched/root_v6.28.12-source/interpreter/llvm/src/tools/clang/include/clang/AST/DependenceFlags.h	2024-09-18 13:23:11
+++ root_v6.28.12_patched/root_v6.28.12-source/interpreter/llvm/src/tools/clang/include/clang/AST/DependenceFlags.h	2024-09-18 13:49:28
@@ -130,6 +130,14 @@ class Dependence { (public)
 
     // Dependence that is propagated syntactically, regardless of semantics.
     Syntactic = UnexpandedPack | Instantiation | Error,
+    // Dependence that is propagated semantically, even in cases where the
+    // type doesn't syntactically appear. This currently excludes only
+    // UnexpandedPack. Even though Instantiation dependence is also notionally
+    // syntactic, we also want to propagate it semantically because anything
+    // that semantically depends on an instantiation-dependent entity should
+    // always be instantiated when that instantiation-dependent entity is.
+    Semantic =
+        Instantiation | Type | Value | Dependent | Error | VariablyModified,
 
     LLVM_MARK_AS_BITMASK_ENUM(/*LargestValue=*/VariablyModified)
   };
@@ -175,6 +183,14 @@ class Dependence { (public)
     return Result;
   }
 
+  /// Extract the semantic portions of this type's dependence that apply even
+  /// to uses where the type does not appear syntactically.
+  Dependence semantic() {
+    Dependence Result = *this;
+    Result.V &= Semantic;
+    return Result;
+  }
+
   TypeDependence type() const {
     return translate(V, UnexpandedPack, TypeDependence::UnexpandedPack) |
            translate(V, Instantiation, TypeDependence::Instantiation) |
@@ -231,7 +247,10 @@ inline ExprDependence toExprDependence(TemplateArgumen
 inline ExprDependence toExprDependence(TemplateArgumentDependence TA) {
   return Dependence(TA).expr();
 }
-inline ExprDependence toExprDependence(TypeDependence D) {
+inline ExprDependence toExprDependenceForImpliedType(TypeDependence D) {
+  return Dependence(D).semantic().expr();
+}
+inline ExprDependence toExprDependenceAsWritten(TypeDependence D) {
   return Dependence(D).expr();
 }
 // Note: it's often necessary to strip `Dependent` from qualifiers.
@@ -268,6 +287,9 @@ inline TypeDependence toSyntacticDependence(TypeDepend
 
 inline TypeDependence toSyntacticDependence(TypeDependence D) {
   return Dependence(D).syntactic().type();
+}
+inline TypeDependence toSemanticDependence(TypeDependence D) {
+  return Dependence(D).semantic().type();
 }
 
 inline NestedNameSpecifierDependence
diff -rupN --exclude=.git* root_v6.28.12_unpatched/root_v6.28.12-source/interpreter/llvm/src/tools/clang/include/clang/AST/Expr.h root_v6.28.12_patched/root_v6.28.12-source/interpreter/llvm/src/tools/clang/include/clang/AST/Expr.h
--- root_v6.28.12_unpatched/root_v6.28.12-source/interpreter/llvm/src/tools/clang/include/clang/AST/Expr.h	2024-09-18 13:23:11
+++ root_v6.28.12_patched/root_v6.28.12-source/interpreter/llvm/src/tools/clang/include/clang/AST/Expr.h	2024-09-18 13:49:28
@@ -3485,7 +3485,6 @@ class CastExpr : public Expr { (protected)
     CastExprBits.BasePathSize = BasePathSize;
     assert((CastExprBits.BasePathSize == BasePathSize) &&
            "BasePathSize overflow!");
-    setDependence(computeDependence(this));
     assert(CastConsistency());
     CastExprBits.HasFPFeatures = HasFPFeatures;
   }
@@ -3619,6 +3618,7 @@ class ImplicitCastExpr final
                    ExprValueKind VK)
       : CastExpr(ImplicitCastExprClass, ty, VK, kind, op, BasePathLength,
                  FPO.requiresTrailingStorage()) {
+    setDependence(computeDependence(this));
     if (hasStoredFPFeatures())
       *getTrailingFPFeatures() = FPO;
   }
@@ -3696,7 +3696,9 @@ class ExplicitCastExpr : public CastExpr { (protected)
                    CastKind kind, Expr *op, unsigned PathSize,
                    bool HasFPFeatures, TypeSourceInfo *writtenTy)
       : CastExpr(SC, exprTy, VK, kind, op, PathSize, HasFPFeatures),
-        TInfo(writtenTy) {}
+        TInfo(writtenTy) {
+    setDependence(computeDependence(this));
+  }
 
   /// Construct an empty explicit cast.
   ExplicitCastExpr(StmtClass SC, EmptyShell Shell, unsigned PathSize,
diff -rupN --exclude=.git* root_v6.28.12_unpatched/root_v6.28.12-source/interpreter/llvm/src/tools/clang/lib/AST/ComputeDependence.cpp root_v6.28.12_patched/root_v6.28.12-source/interpreter/llvm/src/tools/clang/lib/AST/ComputeDependence.cpp
--- root_v6.28.12_unpatched/root_v6.28.12-source/interpreter/llvm/src/tools/clang/lib/AST/ComputeDependence.cpp	2024-09-18 13:23:11
+++ root_v6.28.12_patched/root_v6.28.12-source/interpreter/llvm/src/tools/clang/lib/AST/ComputeDependence.cpp	2024-09-18 13:49:28
@@ -26,7 +26,7 @@ ExprDependence clang::computeDependence(OpaqueValueExp
 }
 
 ExprDependence clang::computeDependence(OpaqueValueExpr *E) {
-  auto D = toExprDependence(E->getType()->getDependence());
+  auto D = toExprDependenceForImpliedType(E->getType()->getDependence());
   if (auto *S = E->getSourceExpr())
     D |= S->getDependence();
   assert(!(D & ExprDependence::UnexpandedPack));
@@ -39,8 +39,10 @@ ExprDependence clang::computeDependence(UnaryOperator 
 
 ExprDependence clang::computeDependence(UnaryOperator *E,
                                         const ASTContext &Ctx) {
-  ExprDependence Dep = toExprDependence(E->getType()->getDependence()) |
-                       E->getSubExpr()->getDependence();
+  ExprDependence Dep =
+      // FIXME: Do we need to look at the type?
+      toExprDependenceForImpliedType(E->getType()->getDependence()) |
+      E->getSubExpr()->getDependence();
 
   // C++ [temp.dep.constexpr]p5:
   //   An expression of the form & qualified-id where the qualified-id names a
@@ -77,7 +79,7 @@ ExprDependence clang::computeDependence(UnaryExprOrTyp
   // Value-dependent if the argument is type-dependent.
   if (E->isArgumentType())
     return turnTypeToValueDependence(
-        toExprDependence(E->getArgumentType()->getDependence()));
+        toExprDependenceAsWritten(E->getArgumentType()->getDependence()));
 
   auto ArgDeps = E->getArgumentExpr()->getDependence();
   auto Deps = ArgDeps & ~ExprDependence::TypeValue;
@@ -120,21 +122,36 @@ ExprDependence clang::computeDependence(CompoundLitera
 }
 
 ExprDependence clang::computeDependence(CompoundLiteralExpr *E) {
-  return toExprDependence(E->getTypeSourceInfo()->getType()->getDependence()) |
+  return toExprDependenceAsWritten(
+             E->getTypeSourceInfo()->getType()->getDependence()) |
+         toExprDependenceForImpliedType(E->getType()->getDependence()) |
          turnTypeToValueDependence(E->getInitializer()->getDependence());
 }
 
-ExprDependence clang::computeDependence(CastExpr *E) {
+ExprDependence clang::computeDependence(ImplicitCastExpr *E) {
+  // We model implicit conversions as combining the dependence of their
+  // subexpression, apart from its type, with the semantic portion of the
+  // target type.
+  ExprDependence D =
+      toExprDependenceForImpliedType(E->getType()->getDependence());
+  if (auto *S = E->getSubExpr())
+    D |= S->getDependence() & ~ExprDependence::Type;
+  return D;
+}
+
+ExprDependence clang::computeDependence(ExplicitCastExpr *E) {
   // Cast expressions are type-dependent if the type is
   // dependent (C++ [temp.dep.expr]p3).
   // Cast expressions are value-dependent if the type is
   // dependent or if the subexpression is value-dependent.
-  auto D = toExprDependence(E->getType()->getDependence());
-  if (E->getStmtClass() == Stmt::ImplicitCastExprClass) {
-    // An implicit cast expression doesn't (lexically) contain an
-    // unexpanded pack, even if its target type does.
-    D &= ~ExprDependence::UnexpandedPack;
-  }
+  //
+  // Note that we also need to consider the dependence of the actual type here,
+  // because when the type as written is a deduced type, that type is not
+  // dependent, but it may be deduced as a dependent type.
+  ExprDependence D =
+      toExprDependenceAsWritten(
+          cast<ExplicitCastExpr>(E)->getTypeAsWritten()->getDependence()) |
+      toExprDependenceForImpliedType(E->getType()->getDependence());
   if (auto *S = E->getSubExpr())
     D |= S->getDependence() & ~ExprDependence::Type;
   return D;
@@ -158,7 +175,7 @@ ExprDependence clang::computeDependence(StmtExpr *E, u
 }
 
 ExprDependence clang::computeDependence(StmtExpr *E, unsigned TemplateDepth) {
-  auto D = toExprDependence(E->getType()->getDependence());
+  auto D = toExprDependenceForImpliedType(E->getType()->getDependence());
   // Propagate dependence of the result.
   if (const auto *CompoundExprResult =
           dyn_cast_or_null<ValueStmt>(E->getSubStmt()->getStmtExprResult()))
@@ -174,7 +191,8 @@ ExprDependence clang::computeDependence(ConvertVectorE
 }
 
 ExprDependence clang::computeDependence(ConvertVectorExpr *E) {
-  auto D = toExprDependence(E->getType()->getDependence()) |
+  auto D = toExprDependenceAsWritten(
+               E->getTypeSourceInfo()->getType()->getDependence()) |
            E->getSrcExpr()->getDependence();
   if (!E->getType()->isDependentType())
     D &= ~ExprDependence::Type;
@@ -206,14 +224,14 @@ ExprDependence clang::computeDependence(VAArgExpr *E) 
 }
 
 ExprDependence clang::computeDependence(VAArgExpr *E) {
-  auto D =
-      toExprDependence(E->getWrittenTypeInfo()->getType()->getDependence()) |
-      (E->getSubExpr()->getDependence() & ~ExprDependence::Type);
+  auto D = toExprDependenceAsWritten(
+               E->getWrittenTypeInfo()->getType()->getDependence()) |
+           (E->getSubExpr()->getDependence() & ~ExprDependence::Type);
   return D & ~ExprDependence::Value;
 }
 
 ExprDependence clang::computeDependence(NoInitExpr *E) {
-  return toExprDependence(E->getType()->getDependence()) &
+  return toExprDependenceForImpliedType(E->getType()->getDependence()) &
          (ExprDependence::Instantiation | ExprDependence::Error);
 }
 
@@ -226,7 +244,7 @@ ExprDependence clang::computeDependence(ImplicitValueI
 }
 
 ExprDependence clang::computeDependence(ImplicitValueInitExpr *E) {
-  return toExprDependence(E->getType()->getDependence()) &
+  return toExprDependenceForImpliedType(E->getType()->getDependence()) &
          ExprDependence::Instantiation;
 }
 
@@ -235,14 +253,16 @@ ExprDependence clang::computeDependence(BlockExpr *E) 
 }
 
 ExprDependence clang::computeDependence(BlockExpr *E) {
-  auto D = toExprDependence(E->getType()->getDependence());
+  auto D = toExprDependenceForImpliedType(E->getType()->getDependence());
   if (E->getBlockDecl()->isDependentContext())
     D |= ExprDependence::Instantiation;
-  return D & ~ExprDependence::UnexpandedPack;
+  return D;
 }
 
 ExprDependence clang::computeDependence(AsTypeExpr *E) {
-  auto D = toExprDependence(E->getType()->getDependence()) |
+  // FIXME: AsTypeExpr doesn't store the type as written. Assume the expression
+  // type has identical sugar for now, so is a type-as-written.
+  auto D = toExprDependenceAsWritten(E->getType()->getDependence()) |
            E->getSrcExpr()->getDependence();
   if (!E->getType()->isDependentType())
     D &= ~ExprDependence::Type;
@@ -255,15 +275,14 @@ ExprDependence clang::computeDependence(CXXStdInitiali
 
 ExprDependence clang::computeDependence(CXXStdInitializerListExpr *E) {
   auto D = turnTypeToValueDependence(E->getSubExpr()->getDependence());
-  D |= toExprDependence(E->getType()->getDependence()) &
-       (ExprDependence::Type | ExprDependence::Error);
+  D |= toExprDependenceForImpliedType(E->getType()->getDependence());
   return D;
 }
 
 ExprDependence clang::computeDependence(CXXTypeidExpr *E) {
   auto D = ExprDependence::None;
   if (E->isTypeOperand())
-    D = toExprDependence(
+    D = toExprDependenceAsWritten(
         E->getTypeOperandSourceInfo()->getType()->getDependence());
   else
     D = turnTypeToValueDependence(E->getExprOperand()->getDependence());
@@ -281,7 +300,7 @@ ExprDependence clang::computeDependence(CXXUuidofExpr 
 
 ExprDependence clang::computeDependence(CXXUuidofExpr *E) {
   if (E->isTypeOperand())
-    return turnTypeToValueDependence(toExprDependence(
+    return turnTypeToValueDependence(toExprDependenceAsWritten(
         E->getTypeOperandSourceInfo()->getType()->getDependence()));
 
   return turnTypeToValueDependence(E->getExprOperand()->getDependence());
@@ -290,7 +309,7 @@ ExprDependence clang::computeDependence(CXXThisExpr *E
 ExprDependence clang::computeDependence(CXXThisExpr *E) {
   // 'this' is type-dependent if the class type of the enclosing
   // member function is dependent (C++ [temp.dep.expr]p2)
-  auto D = toExprDependence(E->getType()->getDependence());
+  auto D = toExprDependenceForImpliedType(E->getType()->getDependence());
   assert(!(D & ExprDependence::UnexpandedPack));
   return D;
 }
@@ -307,8 +326,10 @@ ExprDependence clang::computeDependence(CXXScalarValue
 }
 
 ExprDependence clang::computeDependence(CXXScalarValueInitExpr *E) {
-  return toExprDependence(E->getType()->getDependence()) &
-         ~ExprDependence::TypeValue;
+  auto D = toExprDependenceForImpliedType(E->getType()->getDependence());
+  if (auto *TSI = E->getTypeSourceInfo())
+    D |= toExprDependenceAsWritten(TSI->getType()->getDependence());
+  return D;
 }
 
 ExprDependence clang::computeDependence(CXXDeleteExpr *E) {
@@ -316,7 +337,7 @@ ExprDependence clang::computeDependence(ArrayTypeTrait
 }
 
 ExprDependence clang::computeDependence(ArrayTypeTraitExpr *E) {
-  auto D = toExprDependence(E->getQueriedType()->getDependence());
+  auto D = toExprDependenceAsWritten(E->getQueriedType()->getDependence());
   if (auto *Dim = E->getDimensionExpression())
     D |= Dim->getDependence();
   return turnTypeToValueDependence(D);
@@ -366,7 +387,7 @@ ExprDependence clang::computeDependence(ObjCEncodeExpr
 }
 
 ExprDependence clang::computeDependence(ObjCEncodeExpr *E) {
-  return toExprDependence(E->getEncodedType()->getDependence());
+  return toExprDependenceAsWritten(E->getEncodedType()->getDependence());
 }
 
 ExprDependence clang::computeDependence(ObjCIvarRefExpr *E) {
@@ -377,7 +398,8 @@ ExprDependence clang::computeDependence(ObjCPropertyRe
   if (E->isObjectReceiver())
     return E->getBase()->getDependence() & ~ExprDependence::Type;
   if (E->isSuperReceiver())
-    return toExprDependence(E->getSuperReceiverType()->getDependence()) &
+    return toExprDependenceForImpliedType(
+               E->getSuperReceiverType()->getDependence()) &
            ~ExprDependence::TypeValue;
   assert(E->isClassReceiver());
   return ExprDependence::None;
@@ -406,19 +428,22 @@ ExprDependence clang::computeDependence(OMPArrayShapin
 }
 
 ExprDependence clang::computeDependence(OMPArrayShapingExpr *E) {
-  auto D = E->getBase()->getDependence() |
-           toExprDependence(E->getType()->getDependence());
+  auto D = E->getBase()->getDependence();
   for (Expr *Dim: E->getDimensions())
     if (Dim)
-      D |= Dim->getDependence();
+      D |= turnValueToTypeDependence(Dim->getDependence());
   return D;
 }
 
 ExprDependence clang::computeDependence(OMPIteratorExpr *E) {
-  auto D = toExprDependence(E->getType()->getDependence());
+  auto D = toExprDependenceForImpliedType(E->getType()->getDependence());
   for (unsigned I = 0, End = E->numOfIterators(); I < End; ++I) {
-    if (auto *VD = cast_or_null<ValueDecl>(E->getIteratorDecl(I)))
-      D |= toExprDependence(VD->getType()->getDependence());
+    if (auto *DD = cast_or_null<DeclaratorDecl>(E->getIteratorDecl(I))) {
+      // If the type is omitted, it's 'int', and is not dependent in any way.
+      if (auto *TSI = DD->getTypeSourceInfo()) {
+        D |= toExprDependenceAsWritten(TSI->getType()->getDependence());
+      }
+    }
     OMPIteratorExpr::IteratorRange IR = E->getIteratorRange(I);
     if (Expr *BE = IR.Begin)
       D |= BE->getDependence();
@@ -451,7 +476,8 @@ ExprDependence clang::computeDependence(DeclRefExpr *E
 
   if (Decl->isParameterPack())
     Deps |= ExprDependence::UnexpandedPack;
-  Deps |= toExprDependence(Type->getDependence()) & ExprDependence::Error;
+  Deps |= toExprDependenceForImpliedType(Type->getDependence()) &
+          ExprDependence::Error;
 
   // C++ [temp.dep.expr]p3:
   //   An id-expression is type-dependent if it contains:
@@ -547,7 +573,7 @@ ExprDependence clang::computeDependence(RecoveryExpr *
   //   - type-dependent if we don't know the type (fallback to an opaque
   //     dependent type), or the type is known and dependent, or it has
   //     type-dependent subexpressions.
-  auto D = toExprDependence(E->getType()->getDependence()) |
+  auto D = toExprDependenceForImpliedType(E->getType()->getDependence()) |
            ExprDependence::ErrorDependent;
   // FIXME: remove the type-dependent bit from subexpressions, if the
   // RecoveryExpr has a non-dependent type.
@@ -557,12 +583,12 @@ ExprDependence clang::computeDependence(SYCLUniqueStab
 }
 
 ExprDependence clang::computeDependence(SYCLUniqueStableNameExpr *E) {
-  return toExprDependence(E->getTypeSourceInfo()->getType()->getDependence());
+  return toExprDependenceAsWritten(
+      E->getTypeSourceInfo()->getType()->getDependence());
 }
 
 ExprDependence clang::computeDependence(PredefinedExpr *E) {
-  return toExprDependence(E->getType()->getDependence()) &
-         ~ExprDependence::UnexpandedPack;
+  return toExprDependenceForImpliedType(E->getType()->getDependence());
 }
 
 ExprDependence clang::computeDependence(CallExpr *E,
@@ -578,8 +604,8 @@ ExprDependence clang::computeDependence(OffsetOfExpr *
 }
 
 ExprDependence clang::computeDependence(OffsetOfExpr *E) {
-  auto D = turnTypeToValueDependence(
-      toExprDependence(E->getTypeSourceInfo()->getType()->getDependence()));
+  auto D = turnTypeToValueDependence(toExprDependenceAsWritten(
+      E->getTypeSourceInfo()->getType()->getDependence()));
   for (unsigned I = 0, N = E->getNumExpressions(); I < N; ++I)
     D |= turnTypeToValueDependence(E->getIndexExpr(I)->getDependence());
   return D;
@@ -615,7 +641,7 @@ ExprDependence clang::computeDependence(ShuffleVectorE
 }
 
 ExprDependence clang::computeDependence(ShuffleVectorExpr *E) {
-  auto D = toExprDependence(E->getType()->getDependence());
+  auto D = toExprDependenceForImpliedType(E->getType()->getDependence());
   for (auto *C : llvm::makeArrayRef(E->getSubExprs(), E->getNumSubExprs()))
     D |= C->getDependence();
   return D;
@@ -666,7 +692,9 @@ ExprDependence clang::computeDependence(CXXNewExpr *E)
 }
 
 ExprDependence clang::computeDependence(CXXNewExpr *E) {
-  auto D = toExprDependence(E->getType()->getDependence());
+  auto D = toExprDependenceAsWritten(
+      E->getAllocatedTypeSourceInfo()->getType()->getDependence());
+  D |= toExprDependenceForImpliedType(E->getAllocatedType()->getDependence());
   auto Size = E->getArraySize();
   if (Size.hasValue() && *Size)
     D |= turnTypeToValueDependence((*Size)->getDependence());
@@ -679,11 +707,11 @@ ExprDependence clang::computeDependence(CXXPseudoDestr
 
 ExprDependence clang::computeDependence(CXXPseudoDestructorExpr *E) {
   auto D = E->getBase()->getDependence();
-  if (!E->getDestroyedType().isNull())
-    D |= toExprDependence(E->getDestroyedType()->getDependence());
+  if (auto *TSI = E->getDestroyedTypeInfo())
+    D |= toExprDependenceAsWritten(TSI->getType()->getDependence());
   if (auto *ST = E->getScopeTypeInfo())
     D |= turnTypeToValueDependence(
-        toExprDependence(ST->getType()->getDependence()));
+        toExprDependenceAsWritten(ST->getType()->getDependence()));
   if (auto *Q = E->getQualifier())
     D |= toExprDependence(Q->getDependence() &
                           ~NestedNameSpecifierDependence::Dependent);
@@ -738,12 +766,20 @@ ExprDependence clang::computeDependence(CXXConstructEx
 }
 
 ExprDependence clang::computeDependence(CXXConstructExpr *E) {
-  auto D = toExprDependence(E->getType()->getDependence());
+  ExprDependence D =
+      toExprDependenceForImpliedType(E->getType()->getDependence());
   for (auto *A : E->arguments())
     D |= A->getDependence() & ~ExprDependence::Type;
   return D;
 }
 
+ExprDependence clang::computeDependence(CXXTemporaryObjectExpr *E) {
+  CXXConstructExpr *BaseE = E;
+  return toExprDependenceAsWritten(
+             E->getTypeSourceInfo()->getType()->getDependence()) |
+         computeDependence(BaseE);
+}
+
 ExprDependence clang::computeDependence(CXXDefaultInitExpr *E) {
   return E->getExpr()->getDependence();
 }
@@ -754,7 +790,7 @@ ExprDependence clang::computeDependence(LambdaExpr *E,
 
 ExprDependence clang::computeDependence(LambdaExpr *E,
                                         bool ContainsUnexpandedParameterPack) {
-  auto D = toExprDependence(E->getType()->getDependence());
+  auto D = toExprDependenceForImpliedType(E->getType()->getDependence());
   if (ContainsUnexpandedParameterPack)
     D |= ExprDependence::UnexpandedPack;
   return D;
@@ -762,7 +798,8 @@ ExprDependence clang::computeDependence(CXXUnresolvedC
 
 ExprDependence clang::computeDependence(CXXUnresolvedConstructExpr *E) {
   auto D = ExprDependence::ValueInstantiation;
-  D |= toExprDependence(E->getType()->getDependence());
+  D |= toExprDependenceAsWritten(E->getTypeAsWritten()->getDependence());
+  D |= toExprDependenceForImpliedType(E->getType()->getDependence());
   for (auto *A : E->arguments())
     D |= A->getDependence() &
          (ExprDependence::UnexpandedPack | ExprDependence::Error);
@@ -797,8 +834,8 @@ ExprDependence clang::computeDependence(TypeTraitExpr 
 ExprDependence clang::computeDependence(TypeTraitExpr *E) {
   auto D = ExprDependence::None;
   for (const auto *A : E->getArgs())
-    D |=
-        toExprDependence(A->getType()->getDependence()) & ~ExprDependence::Type;
+    D |= toExprDependenceAsWritten(A->getType()->getDependence()) &
+         ~ExprDependence::Type;
   return D;
 }
 
@@ -845,7 +882,7 @@ ExprDependence clang::computeDependence(ObjCMessageExp
   if (auto *R = E->getInstanceReceiver())
     D |= R->getDependence();
   else
-    D |= toExprDependence(E->getType()->getDependence());
+    D |= toExprDependenceForImpliedType(E->getType()->getDependence());
   for (auto *A : E->arguments())
     D |= A->getDependence();
   return D;
diff -rupN --exclude=.git* root_v6.28.12_unpatched/root_v6.28.12-source/interpreter/llvm/src/tools/clang/lib/AST/ExprCXX.cpp root_v6.28.12_patched/root_v6.28.12-source/interpreter/llvm/src/tools/clang/lib/AST/ExprCXX.cpp
--- root_v6.28.12_unpatched/root_v6.28.12-source/interpreter/llvm/src/tools/clang/lib/AST/ExprCXX.cpp	2024-09-18 13:23:11
+++ root_v6.28.12_patched/root_v6.28.12-source/interpreter/llvm/src/tools/clang/lib/AST/ExprCXX.cpp	2024-09-18 13:49:28
@@ -989,7 +989,9 @@ CXXTemporaryObjectExpr::CXXTemporaryObjectExpr(
           Cons, /* Elidable=*/false, Args, HadMultipleCandidates,
           ListInitialization, StdInitListInitialization, ZeroInitialization,
           CXXConstructExpr::CK_Complete, ParenOrBraceRange),
-      TSI(TSI) {}
+      TSI(TSI) {
+  setDependence(computeDependence(this));
+}
 
 CXXTemporaryObjectExpr::CXXTemporaryObjectExpr(EmptyShell Empty,
                                                unsigned NumArgs)
@@ -1075,7 +1077,9 @@ CXXConstructExpr::CXXConstructExpr(
     TrailingArgs[I] = Args[I];
   }
 
-  setDependence(computeDependence(this));
+  // CXXTemporaryObjectExpr does this itself after setting its TypeSourceInfo.
+  if (SC == CXXConstructExprClass)
+    setDependence(computeDependence(this));
 }
 
 CXXConstructExpr::CXXConstructExpr(StmtClass SC, EmptyShell Empty,
diff -rupN --exclude=.git* root_v6.28.12_unpatched/root_v6.28.12-source/interpreter/llvm/src/tools/clang/lib/AST/Type.cpp root_v6.28.12_patched/root_v6.28.12-source/interpreter/llvm/src/tools/clang/lib/AST/Type.cpp
--- root_v6.28.12_unpatched/root_v6.28.12-source/interpreter/llvm/src/tools/clang/lib/AST/Type.cpp	2024-09-18 13:23:11
+++ root_v6.28.12_patched/root_v6.28.12-source/interpreter/llvm/src/tools/clang/lib/AST/Type.cpp	2024-09-18 13:49:28
@@ -722,8 +722,7 @@ ObjCTypeParamType::ObjCTypeParamType(const ObjCTypePar
 
 ObjCTypeParamType::ObjCTypeParamType(const ObjCTypeParamDecl *D, QualType can,
                                      ArrayRef<ObjCProtocolDecl *> protocols)
-    : Type(ObjCTypeParam, can,
-           can->getDependence() & ~TypeDependence::UnexpandedPack),
+    : Type(ObjCTypeParam, can, toSemanticDependence(can->getDependence())),
       OTPDecl(const_cast<ObjCTypeParamDecl *>(D)) {
   initialize(protocols);
 }
@@ -3383,7 +3382,7 @@ TypedefType::TypedefType(TypeClass tc, const TypedefNa
 
 TypedefType::TypedefType(TypeClass tc, const TypedefNameDecl *D,
                          QualType underlying, QualType can)
-    : Type(tc, can, underlying->getDependence()),
+    : Type(tc, can, toSemanticDependence(underlying->getDependence())),
       Decl(const_cast<TypedefNameDecl *>(D)) {
   assert(!isa<TypedefType>(can) && "Invalid canonical type");
 }
@@ -3639,8 +3638,7 @@ TemplateSpecializationType::TemplateSpecializationType
     : Type(TemplateSpecialization, Canon.isNull() ? QualType(this, 0) : Canon,
            (Canon.isNull()
                 ? TypeDependence::DependentInstantiation
-                : Canon->getDependence() & ~(TypeDependence::VariablyModified |
-                                             TypeDependence::UnexpandedPack)) |
+                : toSemanticDependence(Canon->getDependence())) |
                (toTypeDependence(T.getDependence()) &
                 TypeDependence::UnexpandedPack)),
       Template(T) {
diff -rupN --exclude=.git* root_v6.28.12_unpatched/root_v6.28.12-source/io/io/src/TFile.cxx root_v6.28.12_patched/root_v6.28.12-source/io/io/src/TFile.cxx
--- root_v6.28.12_unpatched/root_v6.28.12-source/io/io/src/TFile.cxx	2024-09-18 13:23:15
+++ root_v6.28.12_patched/root_v6.28.12-source/io/io/src/TFile.cxx	2024-09-18 13:49:29
@@ -4249,8 +4249,9 @@ TFile *TFile::Open(const char *url, Option_t *options,
                   f = (TFile*) h->ExecPlugin(4, name.Data(), option, ftitle, compress);
             } else {
                // Just try to open it locally but via TFile::Open, so that we pick-up the correct
-               // plug-in in the case file name contains information about a special backend (e.g.
-               f = TFile::Open(urlname.GetFileAndOptions(), option, ftitle, compress);
+               // plug-in in the case file name contains information about a special backend (e.g.)
+               if (strcmp(name, urlname.GetFileAndOptions()) != 0)
+                  f = TFile::Open(urlname.GetFileAndOptions(), option, ftitle, compress);
             }
          }
       }
@@ -4258,7 +4259,7 @@ TFile *TFile::Open(const char *url, Option_t *options,
       if (f && f->IsZombie()) {
          TString newUrl = f->GetNewUrl();
          delete f;
-         if( newUrl.Length() && gEnv->GetValue("TFile.CrossProtocolRedirects", 1) )
+         if( newUrl.Length() && (newUrl != name) && gEnv->GetValue("TFile.CrossProtocolRedirects", 1) )
             f = TFile::Open( newUrl, option, ftitle, compress );
          else
             f = nullptr;
diff -rupN --exclude=.git* root_v6.28.12_unpatched/root_v6.28.12-source/math/mathcore/src/FitUtil.cxx root_v6.28.12_patched/root_v6.28.12-source/math/mathcore/src/FitUtil.cxx
--- root_v6.28.12_unpatched/root_v6.28.12-source/math/mathcore/src/FitUtil.cxx	2024-09-18 13:23:15
+++ root_v6.28.12_patched/root_v6.28.12-source/math/mathcore/src/FitUtil.cxx	2024-09-18 13:49:29
@@ -1118,7 +1118,7 @@ double FitUtil::EvaluateLogL(const IModelFunction &fun
          } else {
             // use (-inf +inf)
             data.Range().GetRange(&xmin[0],&xmax[0]);
-            // check if funcition is zero at +- inf
+            // check if function is zero at +- inf
             if (func(xmin.data(), p) != 0 || func(xmax.data(), p) != 0) {
                MATH_ERROR_MSG("FitUtil::EvaluateLogLikelihood","A range has not been set and the function is not zero at +/- inf");
                return 0;
diff -rupN --exclude=.git* root_v6.28.12_unpatched/root_v6.28.12-source/math/mathcore/src/Fitter.cxx root_v6.28.12_patched/root_v6.28.12-source/math/mathcore/src/Fitter.cxx
--- root_v6.28.12_unpatched/root_v6.28.12-source/math/mathcore/src/Fitter.cxx	2024-09-18 13:23:15
+++ root_v6.28.12_patched/root_v6.28.12-source/math/mathcore/src/Fitter.cxx	2024-09-18 13:49:29
@@ -870,14 +870,16 @@ bool Fitter::DoWeightMinimization(std::unique_ptr<ObjF
 template<class ObjFunc_t>
 bool Fitter::DoWeightMinimization(std::unique_ptr<ObjFunc_t> objFunc, const ROOT::Math::IMultiGenFunction * chi2func) {
    // perform the minimization initializing the minimizer starting from a given obj function
-   // and apply afterwards the correction for weights. This applyies only for logL fitting
+   // and apply afterwards the correction for weights. This applies only for logL fitting
    this->fFitType = objFunc->Type();
    fExtObjFunction = nullptr;
-   fObjFunction = std::move(objFunc);
+   // need to use a temporary shared pointer to the objective function since we cannot use the unique pointer when it has been moved
+   std::shared_ptr<ObjFunc_t> sObjFunc{ std::move(objFunc)};
+   fObjFunction = sObjFunc;
    if (!DoInitMinimizer()) return false;
    if (!DoMinimization(chi2func)) return false;
-   objFunc->UseSumOfWeightSquare();
-   return ApplyWeightCorrection(*objFunc);
+   sObjFunc->UseSumOfWeightSquare();
+   return ApplyWeightCorrection(*sObjFunc);
 }
 
 
diff -rupN --exclude=.git* root_v6.28.12_unpatched/root_v6.28.12-source/requirements.txt root_v6.28.12_patched/root_v6.28.12-source/requirements.txt
--- root_v6.28.12_unpatched/root_v6.28.12-source/requirements.txt	2024-09-18 13:23:14
+++ root_v6.28.12_patched/root_v6.28.12-source/requirements.txt	2024-09-18 13:49:29
@@ -1,8 +1,18 @@
 # ROOT requirements for third-party Python packages
 
 # PyROOT: Interoperability with numpy arrays
-# TMVA: PyMVA interfaces
 numpy>=1.4.1
+
+# TMVA: SOFIE
+# graph_nets
+onnx
+# sonnet # used for GNNs
+
+# TMVA: PyMVA interfaces
+scikit-learn
+tensorflow<2.16
+torch
+xgboost
 
 # PyROOT: ROOT.Numba.Declare decorator
 numba>=0.47.0
diff -rupN --exclude=.git* root_v6.28.12_unpatched/root_v6.28.12-source/roofit/hs3/src/JSONFactories_RooFitCore.cxx root_v6.28.12_patched/root_v6.28.12-source/roofit/hs3/src/JSONFactories_RooFitCore.cxx
--- root_v6.28.12_unpatched/root_v6.28.12-source/roofit/hs3/src/JSONFactories_RooFitCore.cxx	2024-09-18 13:23:15
+++ root_v6.28.12_patched/root_v6.28.12-source/roofit/hs3/src/JSONFactories_RooFitCore.cxx	2024-09-18 13:49:29
@@ -17,7 +17,6 @@
 #include <RooBinWidthFunction.h>
 #include <RooCategory.h>
 #include <RooDataHist.h>
-#include <RooExpPoly.h>
 #include <RooFit/Detail/JSONInterface.h>
 #include <RooFitHS3/JSONIO.h>
 #include <RooFormulaVar.h>
@@ -213,37 +212,6 @@ class RooPolynomialFactory : public RooFit::JSONIO::Im
    }
 };
 
-class RooExpPolyFactory : public RooFit::JSONIO::Importer {
-public:
-   bool importArg(RooJSONFactoryWSTool *tool, const JSONNode &p) const override
-   {
-      std::string name(RooJSONFactoryWSTool::name(p));
-      if (!p.has_child("coefficients")) {
-         RooJSONFactoryWSTool::error("no coefficients given in '" + name + "'");
-      }
-      RooAbsReal *x = tool->requestArg<RooAbsReal>(p, "x");
-      RooArgList coefs;
-      int order = 0;
-      int lowestOrder = 0;
-      for (const auto &coef : p["coefficients"].children()) {
-         // As long as the coefficients match the default coefficients in
-         // RooFit, we don't have to instantiate RooFit objects but can
-         // increase the lowestOrder flag.
-         if (order == 0 && coef.val() == "1.0") {
-            ++lowestOrder;
-         } else if (coefs.empty() && coef.val() == "0.0") {
-            ++lowestOrder;
-         } else {
-            coefs.add(*tool->request<RooAbsReal>(coef.val(), name));
-         }
-         ++order;
-      }
-
-      tool->wsEmplace<RooExpPoly>(name, *x, coefs, lowestOrder);
-      return true;
-   }
-};
-
 class RooMultiVarGaussianFactory : public RooFit::JSONIO::Importer {
 public:
    bool importArg(RooJSONFactoryWSTool *tool, const JSONNode &p) const override
@@ -445,28 +413,6 @@ class RooPolynomialStreamer : public RooFit::JSONIO::E
    }
 };
 
-class RooExpPolyStreamer : public RooFit::JSONIO::Exporter {
-public:
-   std::string const &key() const override;
-   bool exportObject(RooJSONFactoryWSTool *, const RooAbsArg *func, JSONNode &elem) const override
-   {
-      auto *pdf = static_cast<const RooExpPoly *>(func);
-      elem["type"] << key();
-      elem["x"] << pdf->x().GetName();
-      auto &coefs = elem["coefficients"].set_seq();
-      // Write out the default coefficient that RooFit uses for the lower
-      // orders before the order of the first coefficient. Like this, the
-      // output is more self-documenting.
-      for (int i = 0; i < pdf->lowestOrder(); ++i) {
-         coefs.append_child() << (i == 0 ? "1.0" : "0.0");
-      }
-      for (const auto &coef : pdf->coefList()) {
-         coefs.append_child() << coef->GetName();
-      }
-      return true;
-   }
-};
-
 class RooMultiVarGaussianStreamer : public RooFit::JSONIO::Exporter {
 public:
    std::string const &key() const override;
@@ -519,7 +465,6 @@ DEFINE_EXPORTER_KEY(RooBinWidthFunctionStreamer, "binw
 DEFINE_EXPORTER_KEY(RooHistPdfStreamer, "histogram_dist");
 DEFINE_EXPORTER_KEY(RooBinSamplingPdfStreamer, "binsampling");
 DEFINE_EXPORTER_KEY(RooBinWidthFunctionStreamer, "binwidth");
-DEFINE_EXPORTER_KEY(RooExpPolyStreamer, "exp_poly_dist");
 DEFINE_EXPORTER_KEY(RooPolynomialStreamer, "polynomial_dist");
 DEFINE_EXPORTER_KEY(RooMultiVarGaussianStreamer, "multinormal_dist");
 DEFINE_EXPORTER_KEY(RooTFnBindingStreamer, "generic_function");
@@ -540,7 +485,6 @@ STATIC_EXECUTE([]() {
    registerImporter<RooBinWidthFunctionFactory>("binwidth", false);
    registerImporter<RooRealSumPdfFactory>("weighted_sum_dist", false);
    registerImporter<RooRealSumFuncFactory>("weighted_sum", false);
-   registerImporter<RooExpPolyFactory>("exp_poly_dist", false);
    registerImporter<RooPolynomialFactory>("polynomial_dist", false);
    registerImporter<RooMultiVarGaussianFactory>("multinormal_dist", false);
 
@@ -552,7 +496,6 @@ STATIC_EXECUTE([]() {
    registerExporter<RooFormulaArgStreamer<RooFormulaVar>>(RooFormulaVar::Class(), false);
    registerExporter<RooRealSumPdfStreamer>(RooRealSumPdf::Class(), false);
    registerExporter<RooRealSumFuncStreamer>(RooRealSumFunc::Class(), false);
-   registerExporter<RooExpPolyStreamer>(RooExpPoly::Class(), false);
    registerExporter<RooPolynomialStreamer>(RooPolynomial::Class(), false);
    registerExporter<RooMultiVarGaussianStreamer>(RooMultiVarGaussian::Class(), false);
    registerExporter<RooTFnBindingStreamer>(RooTFnBinding::Class(), false);
diff -rupN --exclude=.git* root_v6.28.12_unpatched/root_v6.28.12-source/roofit/hs3/test/testRooFitHS3.cxx root_v6.28.12_patched/root_v6.28.12-source/roofit/hs3/test/testRooFitHS3.cxx
--- root_v6.28.12_unpatched/root_v6.28.12-source/roofit/hs3/test/testRooFitHS3.cxx	2024-09-18 13:23:15
+++ root_v6.28.12_patched/root_v6.28.12-source/roofit/hs3/test/testRooFitHS3.cxx	2024-09-18 13:49:29
@@ -155,21 +155,6 @@ TEST(RooFitHS3, RooExponential)
    EXPECT_EQ(status, 0);
 }
 
-TEST(RooFitHS3, RooExpPoly)
-{
-   // To silence the numeric integration
-   RooHelpers::LocalChangeMsgLevel changeMsgLvl(RooFit::WARNING);
-
-   // Test different values for "lowestOrder"
-   int status = 0;
-   status = validate({"ExpPoly::exppoly0(x[0, 10], {a_0[3.0], a_1[-0.3, -10, 10], a_2[0.01, -10, 10]}, 0)"});
-   EXPECT_EQ(status, 0);
-   status = validate({"ExpPoly::exppoly1(x[0, 10], {a_1[-0.1, -10, 10], a_2[0.003, -10, 10]}, 1)"});
-   EXPECT_EQ(status, 0);
-   status = validate({"ExpPoly::exppoly1(x[0, 10], {a_2[0.003, -10, 10]}, 2)"});
-   EXPECT_EQ(status, 0);
-}
-
 TEST(RooFitHS3, RooGamma)
 {
    int status = validate({"Gamma::gamma_dist(x[5.0, 10.0], gamma[1.0, 0.1, 10.0], beta[1.0, 0.1, 10.0], mu[5.0])"});
@@ -255,13 +240,6 @@ TEST(RooFitHS3, RooPolynomial)
    status = validate({"Polynomial::poly1(x[0, 10], {a_1[-0.1, -10, 10], a_2[0.003, -10, 10]}, 1)"});
    EXPECT_EQ(status, 0);
    status = validate({"Polynomial::poly1(x[0, 10], {a_2[0.003, -10, 10]}, 2)"});
-   EXPECT_EQ(status, 0);
-}
-
-TEST(RooFitHS3, RooPower)
-{
-   int status = 0;
-   status = validate({"Power::power(x[0, 10], {a_0[3.0], a_1[-0.3, -10, 10]}, {1.0, 2.0})"});
    EXPECT_EQ(status, 0);
 }
 
diff -rupN --exclude=.git* root_v6.28.12_unpatched/root_v6.28.12-source/roofit/jsoninterface/CMakeLists.txt root_v6.28.12_patched/root_v6.28.12-source/roofit/jsoninterface/CMakeLists.txt
--- root_v6.28.12_unpatched/root_v6.28.12-source/roofit/jsoninterface/CMakeLists.txt	2024-09-18 13:23:15
+++ root_v6.28.12_patched/root_v6.28.12-source/roofit/jsoninterface/CMakeLists.txt	2024-09-18 13:49:29
@@ -12,8 +12,14 @@
 # If RapidYAML can be found on the system, we will also compile the RapidYAML backend besides the
 # nlohmann-json backend. Like this we can also convert to yaml.
 
-message(STATUS "Looking for RapidYAML (used by RooFit)")
-find_package(ryml)
+# The RapidYAML backend is always disabled because it doesn't work anymore for
+# RooFitHS3. The nlohmann_json interface is always used and works well, hence
+# rapidyaml was not tested anymore. The relevant code is still left in the
+# CMakeLists.txt in case someone wants to revive the RapilYAML backend.
+
+# message(STATUS "Looking for RapidYAML (used by RooFit)")
+# find_package(ryml)
+
 if(${RYML_FOUND})
   message(STATUS "RapidYAML found, compiling also RooFit JSON Interface with RapidYAML parser")
   set(ParserSources src/JSONParser.cxx src/RYMLParser.cxx)
diff -rupN --exclude=.git* root_v6.28.12_unpatched/root_v6.28.12-source/roofit/roofit/CMakeLists.txt root_v6.28.12_patched/root_v6.28.12-source/roofit/roofit/CMakeLists.txt
--- root_v6.28.12_unpatched/root_v6.28.12-source/roofit/roofit/CMakeLists.txt	2024-09-18 13:23:15
+++ root_v6.28.12_patched/root_v6.28.12-source/roofit/roofit/CMakeLists.txt	2024-09-18 13:49:29
@@ -35,8 +35,6 @@ ROOT_STANDARD_LIBRARY_PACKAGE(RooFit
     RooDecay.h
     RooDstD0BG.h
     RooExponential.h
-    RooExpPoly.h
-    RooPower.h    
     RooFunctor1DBinding.h
     RooFunctorBinding.h
     RooGamma.h
@@ -98,8 +96,6 @@ ROOT_STANDARD_LIBRARY_PACKAGE(RooFit
     src/RooDecay.cxx
     src/RooDstD0BG.cxx
     src/RooExponential.cxx
-    src/RooExpPoly.cxx
-    src/RooPower.cxx
     src/RooFunctor1DBinding.cxx
     src/RooFunctorBinding.cxx
     src/RooGamma.cxx
diff -rupN --exclude=.git* root_v6.28.12_unpatched/root_v6.28.12-source/roofit/roofit/inc/LinkDef1.h root_v6.28.12_patched/root_v6.28.12-source/roofit/roofit/inc/LinkDef1.h
--- root_v6.28.12_unpatched/root_v6.28.12-source/roofit/roofit/inc/LinkDef1.h	2024-09-18 13:23:15
+++ root_v6.28.12_patched/root_v6.28.12-source/roofit/roofit/inc/LinkDef1.h	2024-09-18 13:49:29
@@ -18,8 +18,6 @@
 #pragma link C++ class RooDecay+ ;
 #pragma link C++ class RooDstD0BG+ ;
 #pragma link C++ class RooExponential+ ;
-#pragma link C++ class RooExpPoly+ ;
-#pragma link C++ class RooPower+ ;
 #pragma link C++ class RooGaussian+ ;
 #pragma link C++ class RooLognormal+ ;
 #pragma link C++ class RooGamma+ ;
diff -rupN --exclude=.git* root_v6.28.12_unpatched/root_v6.28.12-source/roofit/roofit/inc/RooExpPoly.h root_v6.28.12_patched/root_v6.28.12-source/roofit/roofit/inc/RooExpPoly.h
--- root_v6.28.12_unpatched/root_v6.28.12-source/roofit/roofit/inc/RooExpPoly.h	2024-09-18 13:23:15
+++ root_v6.28.12_patched/root_v6.28.12-source/roofit/roofit/inc/RooExpPoly.h	1969-12-31 16:00:00
@@ -1,56 +0,0 @@
-/*
- * Project: RooFit
- *
- * Copyright (c) 2022, CERN
- *
- * Redistribution and use in source and binary forms,
- * with or without modification, are permitted according to the terms
- * listed in LICENSE (http://roofit.sourceforge.net/license.txt)
- */
-
-#ifndef RooFit_RooExpPoly_h
-#define RooFit_RooExpPoly_h
-
-#include <RooAbsPdf.h>
-#include <RooRealProxy.h>
-#include <RooListProxy.h>
-
-class RooExpPoly : public RooAbsPdf {
-public:
-   RooExpPoly() {}
-   RooExpPoly(const char *name, const char *title, RooAbsReal &x, const RooArgList &coefList, int lowestOrder = 1);
-
-   RooExpPoly(const RooExpPoly &other, const char *name = nullptr);
-   TObject *clone(const char *newname) const override { return new RooExpPoly(*this, newname); }
-
-   /// Get the x variable.
-   RooAbsReal const &x() const { return _x.arg(); }
-
-   /// Get the coefficient list.
-   RooArgList const &coefList() const { return _coefList; }
-
-   /// Return the order for the first coefficient in the list.
-   int lowestOrder() const { return _lowestOrder; }
-
-   double getLogVal(const RooArgSet *nset) const override;
-
-   std::string getFormulaExpression(bool expand) const;
-
-   int getAnalyticalIntegral(RooArgSet &allVars, RooArgSet &analVars, const char *rangeName = nullptr) const override;
-   double analyticalIntegral(int code, const char *rangeName = nullptr) const override;
-
-   void adjustLimits();
-
-protected:
-   RooRealProxy _x;
-   RooListProxy _coefList;
-   int _lowestOrder;
-
-   /// Evaluation
-   double evaluate() const override;
-   double evaluateLog() const;
-
-   ClassDefOverride(RooExpPoly, 1) // ExpPoly PDF
-};
-
-#endif
diff -rupN --exclude=.git* root_v6.28.12_unpatched/root_v6.28.12-source/roofit/roofit/inc/RooPower.h root_v6.28.12_patched/root_v6.28.12-source/roofit/roofit/inc/RooPower.h
--- root_v6.28.12_unpatched/root_v6.28.12-source/roofit/roofit/inc/RooPower.h	2024-09-18 13:23:15
+++ root_v6.28.12_patched/root_v6.28.12-source/roofit/roofit/inc/RooPower.h	1969-12-31 16:00:00
@@ -1,55 +0,0 @@
-/*
- * Project: RooFit
- *
- * Copyright (c) 2022, CERN
- *
- * Redistribution and use in source and binary forms,
- * with or without modification, are permitted according to the terms
- * listed in LICENSE (http://roofit.sourceforge.net/license.txt)
- */
-
-#ifndef RooFit_RooPower_h
-#define RooFit_RooPower_h
-
-#include <RooAbsPdf.h>
-#include <RooRealProxy.h>
-#include <RooListProxy.h>
-
-#include <vector>
-
-class RooPower : public RooAbsPdf {
-public:
-   RooPower() {}
-   RooPower(const char *name, const char *title, RooAbsReal &x, const RooArgList &coefList, const RooArgList &expList);
-
-   RooPower(const RooPower &other, const char *name = nullptr);
-   TObject *clone(const char *newname) const override { return new RooPower(*this, newname); }
-
-   /// Get the base of the exponentiated terms (aka. x variable).
-   RooAbsReal const &base() const { return *_x; }
-
-   /// Get the list of coefficients.
-   RooArgList const &coefList() const { return _coefList; }
-
-   /// Get the list of exponents.
-   RooArgList const &expList() const { return _expList; }
-
-   std::string getFormulaExpression(bool expand) const;
-
-   int getAnalyticalIntegral(RooArgSet &allVars, RooArgSet &analVars, const char *rangeName = nullptr) const override;
-   double analyticalIntegral(int code, const char *rangeName = nullptr) const override;
-
-protected:
-   RooRealProxy _x;
-   RooListProxy _coefList;
-   RooListProxy _expList;
-
-   mutable std::vector<double> _wksp; //! do not persist
-
-   /// Evaluation
-   double evaluate() const override;
-
-   ClassDefOverride(RooPower, 1) // Power PDF
-};
-
-#endif
diff -rupN --exclude=.git* root_v6.28.12_unpatched/root_v6.28.12-source/roofit/roofit/src/RooExpPoly.cxx root_v6.28.12_patched/root_v6.28.12-source/roofit/roofit/src/RooExpPoly.cxx
--- root_v6.28.12_unpatched/root_v6.28.12-source/roofit/roofit/src/RooExpPoly.cxx	2024-09-18 13:23:15
+++ root_v6.28.12_patched/root_v6.28.12-source/roofit/roofit/src/RooExpPoly.cxx	1969-12-31 16:00:00
@@ -1,301 +0,0 @@
-/*
- * Project: RooFit
- *
- * Copyright (c) 2022, CERN
- *
- * Redistribution and use in source and binary forms,
- * with or without modification, are permitted according to the terms
- * listed in LICENSE (http://roofit.sourceforge.net/license.txt)
- */
-
-/** \class RooExpPoly
-    \ingroup Roofit
-
-RooExpPoly implements a polynomial PDF of the form \f[ f(x) =
-\mathcal{N} \cdot \exp( \sum_{i} a_{i} * x^{i} ) \f] \f$ \mathcal{N}
-\f$ is a normalisation constant that is automatically calculated when
-the function is used in computations.
-
-The sum can be truncated at the low end. See the main constructor
-RooExpPoly::RooExpPoly(const char*, const char*, RooAbsReal&, const RooArgList&, int)
-
-\image html RooExpPoly.png
-
-**/
-
-#include <RooExpPoly.h>
-
-#include <RooAbsReal.h>
-#include <RooArgList.h>
-#include <RooMath.h>
-#include <RooMsgService.h>
-#include <RooRealVar.h>
-
-#include <TMath.h>
-#include <TError.h>
-
-#include <cmath>
-#include <sstream>
-#include <cassert>
-#include <complex>
-
-ClassImp(RooExpPoly);
-
-////////////////////////////////////////////////////////////////////////////////
-/// Create a polynomial in the variable `x`.
-/// \param[in] name Name of the PDF
-/// \param[in] title Title for plotting the PDF
-/// \param[in] x The variable of the polynomial
-/// \param[in] coefList The coefficients \f$ a_i \f$
-/// \param[in] lowestOrder [optional] Truncate the sum such that it skips the lower orders:
-/// \f[
-///     1. + \sum_{i=0}^{\mathrm{coefList.size()}} a_{i} * x^{(i + \mathrm{lowestOrder})}
-/// \f]
-///
-/// This means that
-/// \code{.cpp}
-/// RooExpPoly pol("pol", "pol", x, RooArgList(a, b), lowestOrder = 2)
-/// \endcode
-/// computes
-/// \f[
-///   \mathrm{pol}(x) = 1 * x^0 + (0 * x^{\ldots}) + a * x^2 + b * x^3.
-/// \f]
-
-RooExpPoly::RooExpPoly(const char *name, const char *title, RooAbsReal &x, const RooArgList &coefList, int lowestOrder)
-   : RooAbsPdf(name, title),
-     _x("x", "Dependent", this, x),
-     _coefList("coefList", "List of coefficients", this),
-     _lowestOrder(lowestOrder)
-{
-   // Check lowest order
-   if (_lowestOrder < 0) {
-      coutE(InputArguments) << "RooExpPoly::ctor(" << GetName()
-                            << ") WARNING: lowestOrder must be >=0, setting value to 0" << std::endl;
-      _lowestOrder = 0;
-   }
-
-   for (auto coef : coefList) {
-      if (!dynamic_cast<RooAbsReal *>(coef)) {
-         coutE(InputArguments) << "RooExpPoly::ctor(" << GetName() << ") ERROR: coefficient " << coef->GetName()
-                               << " is not of type RooAbsReal" << std::endl;
-         R__ASSERT(0);
-      }
-      _coefList.add(*coef);
-   }
-}
-
-////////////////////////////////////////////////////////////////////////////////
-/// Copy constructor
-
-RooExpPoly::RooExpPoly(const RooExpPoly &other, const char *name)
-   : RooAbsPdf(other, name),
-     _x("x", this, other._x),
-     _coefList("coefList", this, other._coefList),
-     _lowestOrder(other._lowestOrder)
-{
-}
-
-////////////////////////////////////////////////////////////////////////////////
-
-double RooExpPoly::evaluateLog() const
-{
-   // Calculate and return value of polynomial
-
-   const unsigned sz = _coefList.size();
-   const int lowestOrder = _lowestOrder;
-   if (!sz)
-      return lowestOrder ? 1. : 0.;
-   std::vector<double> coefs;
-   coefs.reserve(sz);
-
-   const RooArgSet *nset = _coefList.nset();
-   for (auto coef : _coefList) {
-      coefs.push_back(static_cast<RooAbsReal *>(coef)->getVal(nset));
-   };
-   const double x = _x;
-   double xpow = std::pow(x, lowestOrder);
-   double retval = 0;
-   for (size_t i = 0; i < sz; ++i) {
-      retval += coefs[i] * xpow;
-      xpow *= x;
-   }
-
-   if (std::numeric_limits<double>::max_exponent < retval) {
-      coutE(InputArguments) << "RooExpPoly::evaluateLog(" << GetName() << ") ERROR: exponent at " << x
-                            << " larger than allowed maximum, result will be infinite! " << retval << " > "
-                            << std::numeric_limits<double>::max_exponent << " in " << this->getFormulaExpression(true)
-                            << std::endl;
-   }
-   return retval;
-}
-
-////////////////////////////////////////////////////////////////////////////////
-
-void RooExpPoly::adjustLimits()
-{
-   // Adjust the limits of all the coefficients to reflect the numeric boundaries
-
-   const unsigned sz = _coefList.size();
-   double max = std::numeric_limits<double>::max_exponent / sz;
-   const int lowestOrder = _lowestOrder;
-   std::vector<double> coefs;
-   coefs.reserve(sz);
-
-   RooRealVar *x = dynamic_cast<RooRealVar *>(&(*_x));
-   if (x) {
-      const double xmax = x->getMax();
-      double xmaxpow = std::pow(xmax, lowestOrder);
-      for (size_t i = 0; i < sz; ++i) {
-         double thismax = max / xmaxpow;
-         RooRealVar *coef = dynamic_cast<RooRealVar *>(this->_coefList.at(i));
-         if (coef) {
-            coef->setVal(thismax);
-            coef->setMax(thismax);
-         }
-         xmaxpow *= xmax;
-      }
-   }
-}
-
-////////////////////////////////////////////////////////////////////////////////
-
-double RooExpPoly::evaluate() const
-{
-   // Calculate and return value of function
-
-   const double logval = this->evaluateLog();
-   const double val = exp(logval);
-   if (std::isinf(val)) {
-      coutE(InputArguments) << "RooExpPoly::evaluate(" << GetName()
-                            << ") ERROR: result of exponentiation is infinite! exponent was " << logval << std::endl;
-   }
-   return val;
-}
-
-////////////////////////////////////////////////////////////////////////////////
-
-double RooExpPoly::getLogVal(const RooArgSet *nset) const
-{
-   return RooAbsPdf::getLogVal(nset);
-   //  return this->evaluateLog();
-}
-
-////////////////////////////////////////////////////////////////////////////////
-
-int RooExpPoly::getAnalyticalIntegral(RooArgSet &allVars, RooArgSet &analVars, const char * /*rangeName*/) const
-{
-
-   if ((_coefList.size() + _lowestOrder < 4) &&
-       ((_coefList.size() + _lowestOrder < 3) ||
-        (static_cast<RooAbsReal *>(_coefList.at(2 - _lowestOrder))->getVal() <= 0)) &&
-       matchArgs(allVars, analVars, _x)) {
-      return 0;
-   }
-   return 0;
-}
-
-////////////////////////////////////////////////////////////////////////////////
-
-#define PI TMath::Pi()
-
-namespace {
-double deltaerf(long double x1, long double x2)
-{
-   // several things happening here
-   // 1. use "erf(x) = -erf(-x)" to evaluate the function only ever for the positive side (higher precision)
-   // 2. use "erf(x) = 1.-erfc(x)" and, instead of "erf(x1) - erf(x2)", do "(1.-erfc(x1)) - (1.-erfc(x2)) = erfc(x2) -
-   // erfc(x1)"
-   double y2 = x1 > 0 ? erfc(x1) : -erfc(-x1);
-   double y1 = x2 > 0 ? erfc(x2) : -erfc(-x2);
-   if (y1 == y2) {
-      std::cout << "WARNING in calculation of analytical integral limited by numerical precision" << std::endl;
-      std::cout << "x: " << x1 << " , " << x2 << std::endl;
-      std::cout << "y: " << y1 << " , " << y2 << std::endl;
-   }
-   return y1 - y2;
-}
-
-double deltaerfi(double x1, double x2)
-{
-   std::complex<double> u1 = {x1, 0.};
-   std::complex<double> u2 = {x2, 0.};
-
-   std::complex<double> y2 = x2 > 0 ? RooMath::faddeeva(u2) : RooMath::faddeeva(-u2);
-   std::complex<double> y1 = x1 > 0 ? RooMath::faddeeva(u1) : RooMath::faddeeva(-u1);
-   if (y1 == y2) {
-      std::cout << "WARNING in calculation of analytical integral limited by numerical precision" << std::endl;
-      std::cout << "x: " << x1 << " , " << x2 << std::endl;
-      std::cout << "y: " << y1 << " , " << y2 << std::endl;
-   }
-   return y1.imag() - y2.imag();
-}
-} // namespace
-
-double RooExpPoly::analyticalIntegral(int /*code*/, const char *rangeName) const
-{
-   const double xmin = _x.min(rangeName), xmax = _x.max(rangeName);
-   const unsigned sz = _coefList.size();
-   if (!sz)
-      return xmax - xmin;
-
-   std::vector<double> coefs;
-   coefs.reserve(sz);
-   const RooArgSet *nset = _coefList.nset();
-   for (auto c : _coefList) {
-      coefs.push_back(static_cast<RooAbsReal *>(c)->getVal(nset));
-   }
-
-   switch (_coefList.size() + _lowestOrder) {
-   case 1: return xmax - xmin;
-   case 2: {
-      const double a = coefs[1 - _lowestOrder];
-      if (a != 0) {
-         return 1. / a * (exp(a * xmax) - exp(a * xmin)) * (_lowestOrder == 0 ? exp(coefs[0]) : 1);
-      } else {
-         return xmax - xmin;
-      }
-   }
-   case 3: {
-      const double a = coefs[2 - _lowestOrder];
-      const double b = _lowestOrder == 2 ? 0. : coefs[1 - _lowestOrder];
-      const double c = _lowestOrder == 0 ? coefs[0] : 0.;
-      const double absa = std::abs(a);
-      const double sqrta = std::sqrt(absa);
-      if (a < 0) {
-         double d = ::deltaerf((-b + 2 * absa * xmax) / (2 * sqrta), (-b + 2 * absa * xmin) / (2 * sqrta));
-         double retval = exp(b * b / (4 * absa) + c) * std::sqrt(PI) * d / (2 * sqrta);
-         return retval;
-      } else if (a > 0) {
-         double d = ::deltaerfi((b + 2 * absa * xmax) / (2 * sqrta), (b + 2 * absa * xmin) / (2 * sqrta));
-         double retval = exp(-b * b / (4 * absa) + c) * std::sqrt(PI) * d / (2 * sqrta);
-         return retval;
-      } else if (b != 0) {
-         return 1. / b * (std::exp(b * xmax) - exp(b * xmin)) * exp(c);
-      } else {
-         return xmax - xmin;
-      }
-   }
-   }
-   return 0.;
-}
-
-////////////////////////////////////////////////////////////////////////////////
-
-std::string RooExpPoly::getFormulaExpression(bool expand) const
-{
-   std::stringstream ss;
-   ss << "exp(";
-   int order = _lowestOrder;
-   for (auto coef : _coefList) {
-      if (order != _lowestOrder)
-         ss << "+";
-      if (expand)
-         ss << ((RooAbsReal *)coef)->getVal();
-      else
-         ss << coef->GetName();
-      ss << "*pow(" << _x.GetName() << "," << order << ")";
-      ++order;
-   }
-   ss << ")";
-   return ss.str();
-}
diff -rupN --exclude=.git* root_v6.28.12_unpatched/root_v6.28.12-source/roofit/roofit/src/RooPower.cxx root_v6.28.12_patched/root_v6.28.12-source/roofit/roofit/src/RooPower.cxx
--- root_v6.28.12_unpatched/root_v6.28.12-source/roofit/roofit/src/RooPower.cxx	2024-09-18 13:23:15
+++ root_v6.28.12_patched/root_v6.28.12-source/roofit/roofit/src/RooPower.cxx	1969-12-31 16:00:00
@@ -1,186 +0,0 @@
-/*
- * Project: RooFit
- *
- * Copyright (c) 2022, CERN
- *
- * Redistribution and use in source and binary forms,
- * with or without modification, are permitted according to the terms
- * listed in LICENSE (http://roofit.sourceforge.net/license.txt)
- */
-
-/** \class RooPower
-    \ingroup Roofit
-
-RooPower implements a power law PDF of the form
-\f[ f(x) = \mathcal{N} \cdot \sum_{i} a_{i} * x^{b_i} \f]
-
-\image html RooPower.png
-**/
-
-#include <RooPower.h>
-
-#include <RooAbsReal.h>
-#include <RooArgList.h>
-#include <RooMsgService.h>
-
-#include <TError.h>
-
-#include <cmath>
-#include <cassert>
-#include <sstream>
-
-ClassImp(RooPower);
-
-////////////////////////////////////////////////////////////////////////////////
-/// Create a power law in the variable `x`.
-/// \param[in] name Name of the PDF
-/// \param[in] title Title for plotting the PDF
-/// \param[in] x The variable of the polynomial
-/// \param[in] coefList The coefficients \f$ a_i \f$
-/// \param[in] expList The exponentials \f$ b_i \f$
-/// \f[
-///     \sum_{i=0}^{n} a_{i} * x^{b_{i}}
-/// \f]
-///
-/// This means that
-/// \code{.cpp}
-/// RooPower powl("pow", "pow", x, RooArgList(a1, a2), RooArgList(b1,b2))
-/// \endcode
-/// computes
-/// \f[
-///   \mathrm{pol}(x) = a1 * x^b1 + a2 * x^b2
-/// \f]
-
-RooPower::RooPower(const char *name, const char *title, RooAbsReal &x, const RooArgList &coefList,
-                   const RooArgList &expList)
-   : RooAbsPdf(name, title),
-     _x("x", "Dependent", this, x),
-     _coefList("coefList", "List of coefficients", this),
-     _expList("expList", "List of exponents", this)
-{
-   if (coefList.size() != expList.size()) {
-      coutE(InputArguments) << "RooPower::ctor(" << GetName()
-                            << ") ERROR: coefficient list and exponent list must be of same length" << std::endl;
-      return;
-   }
-   for (auto coef : coefList) {
-      if (!dynamic_cast<RooAbsReal *>(coef)) {
-         coutE(InputArguments) << "RooPower::ctor(" << GetName() << ") ERROR: coefficient " << coef->GetName()
-                               << " is not of type RooAbsReal" << std::endl;
-         R__ASSERT(0);
-      }
-      _coefList.add(*coef);
-   }
-   for (auto exp : expList) {
-      if (!dynamic_cast<RooAbsReal *>(exp)) {
-         coutE(InputArguments) << "RooPower::ctor(" << GetName() << ") ERROR: coefficient " << exp->GetName()
-                               << " is not of type RooAbsReal" << std::endl;
-         R__ASSERT(0);
-      }
-      _expList.add(*exp);
-   }
-}
-
-////////////////////////////////////////////////////////////////////////////////
-/// Copy constructor
-
-RooPower::RooPower(const RooPower &other, const char *name)
-   : RooAbsPdf(other, name),
-     _x("x", this, other._x),
-     _coefList("coefList", this, other._coefList),
-     _expList("expList", this, other._expList)
-{
-}
-
-////////////////////////////////////////////////////////////////////////////////
-
-double RooPower::evaluate() const
-{
-   // Calculate and return value of polynomial
-
-   const unsigned sz = _coefList.size();
-   if (!sz) {
-      return 0.;
-   }
-
-   std::vector<double> coefs;
-   std::vector<double> exps;
-   coefs.reserve(sz);
-   exps.reserve(sz);
-   const RooArgSet *nset = _coefList.nset();
-   for (auto c : _coefList) {
-      coefs.push_back(static_cast<RooAbsReal *>(c)->getVal(nset));
-   }
-   for (auto c : _expList) {
-      exps.push_back(static_cast<RooAbsReal *>(c)->getVal(nset));
-   }
-   double x = this->_x;
-   double retval = 0;
-   for (unsigned int i = 0; i < sz; ++i) {
-      retval += coefs[i] * pow(x, exps[i]);
-   }
-   return retval;
-}
-
-////////////////////////////////////////////////////////////////////////////////
-/// Advertise to RooFit that this function can be analytically integrated.
-int RooPower::getAnalyticalIntegral(RooArgSet &allVars, RooArgSet &analVars, const char * /*rangeName*/) const
-{
-   if (matchArgs(allVars, analVars, _x))
-      return 1;
-   return 0;
-}
-
-////////////////////////////////////////////////////////////////////////////////
-/// Do the analytical integral according to the code that was returned by getAnalyticalIntegral().
-double RooPower::analyticalIntegral(int /*code*/, const char *rangeName) const
-{
-   const double xmin = _x.min(rangeName);
-   const double xmax = _x.max(rangeName);
-   const unsigned sz = _coefList.size();
-   if (!sz) {
-      return xmax - xmin;
-   }
-
-   std::vector<double> coefs;
-   std::vector<double> exps;
-   coefs.reserve(sz);
-   exps.reserve(sz);
-   const RooArgSet *nset = _coefList.nset();
-   for (auto c : _coefList) {
-      coefs.push_back(static_cast<RooAbsReal *>(c)->getVal(nset));
-   }
-   for (auto c : _expList) {
-      exps.push_back(static_cast<RooAbsReal *>(c)->getVal(nset));
-   }
-
-   double retval = 0;
-   for (unsigned int i = 0; i < sz; ++i) {
-      if (exps[i] == -1) {
-         retval += coefs[i] * (log(xmax) - log(xmin));
-      } else {
-         retval += coefs[i] / (exps[i] + 1) * (pow(xmax, (exps[i] + 1)) - pow(xmin, (exps[i] + 1)));
-      }
-   }
-   return retval;
-}
-
-std::string RooPower::getFormulaExpression(bool expand) const
-{
-   std::stringstream ss;
-   for (std::size_t i = 0; i < _coefList.size(); ++i) {
-      if (i != 0)
-         ss << "+";
-      if (expand)
-         ss << static_cast<RooAbsReal *>(_coefList.at(i))->getVal();
-      else
-         ss << _coefList.at(i)->GetName();
-      ss << "*pow(" << _x.GetName() << ",";
-      if (expand)
-         ss << static_cast<RooAbsReal *>(_expList.at(i))->getVal();
-      else
-         ss << _expList.at(i)->GetName();
-      ss << ")";
-   }
-   return ss.str().c_str();
-}
diff -rupN --exclude=.git* root_v6.28.12_unpatched/root_v6.28.12-source/roofit/roofitcore/test/testTestStatistics.cxx root_v6.28.12_patched/root_v6.28.12-source/roofit/roofitcore/test/testTestStatistics.cxx
--- root_v6.28.12_unpatched/root_v6.28.12-source/roofit/roofitcore/test/testTestStatistics.cxx	2024-09-18 13:23:15
+++ root_v6.28.12_patched/root_v6.28.12-source/roofit/roofitcore/test/testTestStatistics.cxx	2024-09-18 13:49:29
@@ -73,7 +73,7 @@ TEST_P(TestStatisticTest, IntegrateBins)
 TEST_P(TestStatisticTest, IntegrateBins)
 {
    RooWorkspace ws;
-   ws.factory("Power::pow(x[0.1, 5.1], {1.0}, {a[-0.3, -5., 5.]})");
+   ws.factory("EXPR::pow('std::pow(x, a)', {x[0.1, 5.1], a[-0.3, -5., 5.]})");
 
    RooRealVar &x = *ws.var("x");
    RooRealVar &a = *ws.var("a");
@@ -120,7 +120,7 @@ TEST_P(TestStatisticTest, IntegrateBins_SubRange)
 TEST_P(TestStatisticTest, IntegrateBins_SubRange)
 {
    RooWorkspace ws;
-   ws.factory("Power::pow(x[0.1, 5.1], {1.0}, {a[-0.3, -5., 5.]})");
+   ws.factory("EXPR::pow('std::pow(x, a)', {x[0.1, 5.1], a[-0.3, -5., 5.]})");
 
    RooRealVar &x = *ws.var("x");
    RooRealVar &a = *ws.var("a");
@@ -169,7 +169,7 @@ TEST_P(TestStatisticTest, IntegrateBins_CustomBinning)
 TEST_P(TestStatisticTest, IntegrateBins_CustomBinning)
 {
    RooWorkspace ws;
-   ws.factory("Power::pow(x[1.0, 5.], {1.0}, {a[-0.3, -5., 5.]})");
+   ws.factory("EXPR::pow('std::pow(x, a)', {x[1.0, 5.], a[-0.3, -5., 5.]})");
 
    RooRealVar &x = *ws.var("x");
    RooRealVar &a = *ws.var("a");
@@ -222,7 +222,7 @@ TEST_P(TestStatisticTest, IntegrateBins_RooDataHist)
 TEST_P(TestStatisticTest, IntegrateBins_RooDataHist)
 {
    RooWorkspace ws;
-   ws.factory("Power::pow(x[0.1, 5.0], {1.0}, {a[-0.3, -5., 5.]})");
+   ws.factory("EXPR::pow('std::pow(x, a)', {x[0.1, 5.], a[-0.3, -5., 5.]})");
 
    RooRealVar &x = *ws.var("x");
    RooRealVar &a = *ws.var("a");
@@ -270,7 +270,7 @@ TEST(RooChi2Var, IntegrateBins)
    RooRandom::randomGenerator()->SetSeed(1337ul);
 
    RooWorkspace ws;
-   ws.factory("Power::pow(x[0.1, 5.1], {1.0}, {a[-0.3, -5., 5.]})");
+   ws.factory("EXPR::pow('std::pow(x, a)', {x[0.1, 5.1], a[-0.3, -5., 5.]})");
 
    RooRealVar &x = *ws.var("x");
    RooRealVar &a = *ws.var("a");
diff -rupN --exclude=.git* root_v6.28.12_unpatched/root_v6.28.12-source/test/stressHistoFit.cxx root_v6.28.12_patched/root_v6.28.12-source/test/stressHistoFit.cxx
--- root_v6.28.12_unpatched/root_v6.28.12-source/test/stressHistoFit.cxx	2024-09-18 13:23:14
+++ root_v6.28.12_patched/root_v6.28.12-source/test/stressHistoFit.cxx	2024-09-18 13:49:29
@@ -771,6 +771,7 @@ int test1DObjects(vector< vector<algoType> >& listH,
       for (int i = 1; i <= h1->GetNbinsX() + 1; ++i)
          h1->SetBinContent(i, rndm.Poisson(func->Eval(h1->GetBinCenter(i))));
 
+      h1->Sumw2(); // make as a weighted histo to test weighted fits
       gTestIndex++;
       if (gSelectedTest == 0 || gSelectedTest == gTestIndex) {
          // fill equal bin 1D  histogram
@@ -803,7 +804,7 @@ int test1DObjects(vector< vector<algoType> >& listH,
                                              h2->GetXaxis()->GetBinUpEdge(i));
             h2->SetBinContent(i,rndm.Poisson(expValue));
          }
-
+         h2->Sumw2(); // make as a weighted histo to test weighted fits
          if (c0 && !__DRAW__) delete c0;
          c0 = new TCanvas(TString::Format("c%d_H1D", gTestIndex), "Histogram1D Variable");
          ObjectWrapper<TH1D *> owh2(h2);
@@ -1219,6 +1220,7 @@ void init_structures()
    noGraphAlgos.push_back( algoType( "Minuit2",     "Migrad",      "EX", CompareResult()) );
    noGraphAlgos.push_back( algoType( "Minuit",      "Migrad",      "L", CompareResult(defCmpOpt,3,0.1)) );  // normal binned likelihood fit
    noGraphAlgos.push_back( algoType( "Minuit2",     "Migrad",      "L", CompareResult(defCmpOpt,3,0.1)) );
+   noGraphAlgos.push_back( algoType( "Minuit2",     "Migrad",      "WL", CompareResult(defCmpOpt,3,0.1)) );
    noGraphAlgos.push_back( algoType( "Minuit2",     "Migrad",      "G", CompareResult()) ); // gradient chi2 fit
    //noGraphAlgos.push_back( algoType( "Minuit",      "Migrad",      "G", CompareResult()) );   // skip TMinuit with G
    noGraphAlgos.push_back( algoType( "Minuit2",     "Minimize",    "G", CompareResult()) );
diff -rupN --exclude=.git* root_v6.28.12_unpatched/root_v6.28.12-source/tmva/pymva/src/MethodPyAdaBoost.cxx root_v6.28.12_patched/root_v6.28.12-source/tmva/pymva/src/MethodPyAdaBoost.cxx
--- root_v6.28.12_unpatched/root_v6.28.12-source/tmva/pymva/src/MethodPyAdaBoost.cxx	2024-09-18 13:23:14
+++ root_v6.28.12_patched/root_v6.28.12-source/tmva/pymva/src/MethodPyAdaBoost.cxx	2024-09-18 13:49:29
@@ -231,7 +231,7 @@ void MethodPyAdaBoost::Train()
    }
 
    // Create classifier object
-   PyRunString("classifier = sklearn.ensemble.AdaBoostClassifier(base_estimator=baseEstimator, n_estimators=nEstimators, learning_rate=learningRate, algorithm=algorithm, random_state=randomState)",
+   PyRunString("classifier = sklearn.ensemble.AdaBoostClassifier(estimator=baseEstimator, n_estimators=nEstimators, learning_rate=learningRate, algorithm=algorithm, random_state=randomState)",
       "Failed to setup classifier");
 
    // Fit classifier
diff -rupN --exclude=.git* root_v6.28.12_unpatched/root_v6.28.12-source/tmva/pymva/src/MethodPyGTB.cxx root_v6.28.12_patched/root_v6.28.12-source/tmva/pymva/src/MethodPyGTB.cxx
--- root_v6.28.12_unpatched/root_v6.28.12-source/tmva/pymva/src/MethodPyGTB.cxx	2024-09-18 13:23:14
+++ root_v6.28.12_patched/root_v6.28.12-source/tmva/pymva/src/MethodPyGTB.cxx	2024-09-18 13:49:29
@@ -301,7 +301,7 @@ void MethodPyGTB::ProcessOptions()
    pVerbose = Eval(Form("%i", fVerbose));
    PyDict_SetItemString(fLocalNS, "verbose", pVerbose);
 
-   pWarmStart = Eval(Form("%i", UInt_t(fWarmStart)));
+   pWarmStart = (fWarmStart) ? Eval("True") : Eval("False");
    PyDict_SetItemString(fLocalNS, "warmStart", pWarmStart);
 
    // If no filename is given, set default
diff -rupN --exclude=.git* root_v6.28.12_unpatched/root_v6.28.12-source/tmva/pymva/src/MethodPyRandomForest.cxx root_v6.28.12_patched/root_v6.28.12-source/tmva/pymva/src/MethodPyRandomForest.cxx
--- root_v6.28.12_unpatched/root_v6.28.12-source/tmva/pymva/src/MethodPyRandomForest.cxx	2024-09-18 13:23:14
+++ root_v6.28.12_patched/root_v6.28.12-source/tmva/pymva/src/MethodPyRandomForest.cxx	2024-09-18 13:49:29
@@ -284,13 +284,13 @@ void MethodPyRandomForest::ProcessOptions()
    pNjobs = Eval(Form("%i", fNjobs));
    PyDict_SetItemString(fLocalNS, "nJobs", pNjobs);
 
-   pBootstrap = Eval(Form("%i", UInt_t(fBootstrap)));
+   pBootstrap = (fBootstrap) ? Eval("True") : Eval("False");
    PyDict_SetItemString(fLocalNS, "bootstrap", pBootstrap);
-   pOobScore = Eval(Form("%i", UInt_t(fOobScore)));
+   pOobScore = (fOobScore) ? Eval("True") : Eval("False");
    PyDict_SetItemString(fLocalNS, "oobScore", pOobScore);
    pVerbose = Eval(Form("%i", fVerbose));
    PyDict_SetItemString(fLocalNS, "verbose", pVerbose);
-   pWarmStart = Eval(Form("%i", UInt_t(fWarmStart)));
+   pWarmStart = (fWarmStart) ? Eval("True") : Eval("False");
    PyDict_SetItemString(fLocalNS, "warmStart", pWarmStart);
 
    // If no filename is given, set default
diff -rupN --exclude=.git* root_v6.28.12_unpatched/root_v6.28.12-source/tmva/pymva/src/RModelParser_PyTorch.cxx root_v6.28.12_patched/root_v6.28.12-source/tmva/pymva/src/RModelParser_PyTorch.cxx
--- root_v6.28.12_unpatched/root_v6.28.12-source/tmva/pymva/src/RModelParser_PyTorch.cxx	2024-09-18 13:23:14
+++ root_v6.28.12_patched/root_v6.28.12-source/tmva/pymva/src/RModelParser_PyTorch.cxx	2024-09-18 13:26:26
@@ -398,7 +398,7 @@ RModel Parse(std::string filename, std::vector<std::ve
     PyRunString("import torch",fGlobalNS,fLocalNS);
     PyRunString("print('Torch Version: '+torch.__version__)",fGlobalNS,fLocalNS);
     PyRunString("from torch.onnx.utils import _model_to_graph",fGlobalNS,fLocalNS);
-    PyRunString("from torch.onnx.symbolic_helper import _set_onnx_shape_inference",fGlobalNS,fLocalNS);
+    //PyRunString("from torch.onnx.symbolic_helper import _set_onnx_shape_inference",fGlobalNS,fLocalNS);
     PyRunString(TString::Format("model= torch.jit.load('%s')",filename.c_str()),fGlobalNS,fLocalNS);
     PyRunString("globals().update(locals())",fGlobalNS,fLocalNS);
     PyRunString("model.cpu()",fGlobalNS,fLocalNS);
@@ -416,7 +416,7 @@ RModel Parse(std::string filename, std::vector<std::ve
 
 
     //Getting the ONNX graph from model using the dummy inputs and example outputs
-    PyRunString("_set_onnx_shape_inference(True)",fGlobalNS,fLocalNS);
+    //PyRunString("_set_onnx_shape_inference(True)",fGlobalNS,fLocalNS);
     PyRunString("graph=_model_to_graph(model,dummyInputs)",fGlobalNS,fLocalNS);
 
 
diff -rupN --exclude=.git* root_v6.28.12_unpatched/root_v6.28.12-source/tmva/pymva/test/CMakeLists.txt root_v6.28.12_patched/root_v6.28.12-source/tmva/pymva/test/CMakeLists.txt
--- root_v6.28.12_unpatched/root_v6.28.12-source/tmva/pymva/test/CMakeLists.txt	2024-09-18 13:23:14
+++ root_v6.28.12_patched/root_v6.28.12-source/tmva/pymva/test/CMakeLists.txt	2024-09-18 13:49:29
@@ -88,7 +88,6 @@ if(PY_TORCH_FOUND)
          LIBRARIES
          ROOTTMVASofie
          TMVA
-         blas
          ${PYTHON_LIBRARIES}
          INCLUDE_DIRS
          SYSTEM
@@ -96,6 +95,7 @@ if(PY_TORCH_FOUND)
          ${NUMPY_INCLUDE_DIRS}
          ${CMAKE_CURRENT_BINARY_DIR}
       )
+   target_link_libraries(TestRModelParserPyTorch ${BLAS_LINKER_FLAGS} ${BLAS_LIBRARIES})
    if(APPLE)
       target_link_options(TestRModelParserPyTorch PRIVATE ${PYTHON_LINK_OPTIONS_Development_Main})
    endif()
@@ -183,7 +183,6 @@ endif()
    ROOT_ADD_GTEST(TestRModelParserKeras TestRModelParserKeras.C
     LIBRARIES
     ROOTTMVASofie
-    blas
     ${PYTHON_LIBRARIES}
     INCLUDE_DIRS
     SYSTEM
@@ -191,6 +190,7 @@ endif()
     ${NUMPY_INCLUDE_DIRS}
     ${CMAKE_CURRENT_BINARY_DIR}
    )
+   target_link_libraries(TestRModelParserKeras ${BLAS_LINKER_FLAGS} ${BLAS_LIBRARIES})
    if(APPLE)
    target_link_options(TestRModelParserKeras PRIVATE ${PYTHON_LINK_OPTIONS_Development_Main})
    endif()
diff -rupN --exclude=.git* root_v6.28.12_unpatched/root_v6.28.12-source/tmva/pymva/test/Classification.C root_v6.28.12_patched/root_v6.28.12-source/tmva/pymva/test/Classification.C
--- root_v6.28.12_unpatched/root_v6.28.12-source/tmva/pymva/test/Classification.C	2024-09-18 13:23:14
+++ root_v6.28.12_patched/root_v6.28.12-source/tmva/pymva/test/Classification.C	2024-09-18 13:49:29
@@ -21,7 +21,7 @@ void Classification()
    TMVA::Tools::Instance();
    TMVA::PyMethodBase::PyInitialize();
 
-   TString outfileName("TMVA.root");
+   TString outfileName("RMVAC.root");
    TFile *outputFile = TFile::Open(outfileName, "RECREATE");
 
    TMVA::Factory *factory = new TMVA::Factory("TMVAClassification", outputFile,
diff -rupN --exclude=.git* root_v6.28.12_unpatched/root_v6.28.12-source/tmva/pymva/test/EmitCustomModel.cxx root_v6.28.12_patched/root_v6.28.12-source/tmva/pymva/test/EmitCustomModel.cxx
--- root_v6.28.12_unpatched/root_v6.28.12-source/tmva/pymva/test/EmitCustomModel.cxx	2024-09-18 13:23:14
+++ root_v6.28.12_patched/root_v6.28.12-source/tmva/pymva/test/EmitCustomModel.cxx	2024-09-18 13:49:29
@@ -34,7 +34,7 @@ model.fit(x_train, y_train, epochs=10, batch_size=1)\n
 \n\
 model.compile(loss='mean_squared_error', optimizer=SGD(learning_rate=0.01))\n\
 model.fit(x_train, y_train, epochs=10, batch_size=1)\n\
-model.save('KerasModelForCustomOp.keras')\n";
+model.save('KerasModelForCustomOp.h5')\n";
 
 int main(){
    Py_Initialize();
@@ -43,7 +43,7 @@ int main(){
    PyRun_SimpleString(pythonSrc);
 
     //Parsing the saved Keras .keras file into RModel object
-    RModel model = PyKeras::Parse("KerasModelForCustomOp.keras");
+    RModel model = PyKeras::Parse("KerasModelForCustomOp.h5");
     model.Generate();
 
     std::unique_ptr<ROperator> op;
diff -rupN --exclude=.git* root_v6.28.12_unpatched/root_v6.28.12-source/tmva/pymva/test/EmitFromKeras.cxx root_v6.28.12_patched/root_v6.28.12-source/tmva/pymva/test/EmitFromKeras.cxx
--- root_v6.28.12_unpatched/root_v6.28.12-source/tmva/pymva/test/EmitFromKeras.cxx	2024-09-18 13:23:14
+++ root_v6.28.12_patched/root_v6.28.12-source/tmva/pymva/test/EmitFromKeras.cxx	2024-09-18 13:49:29
@@ -22,49 +22,49 @@ int main(){
    PyRun_SimpleFile(fKerasModels, "generateKerasModels.py");
 
    //Emitting header file for Keras Sequential Model
-   RModel modelSequential = TMVA::Experimental::SOFIE::PyKeras::Parse("KerasModelSequential.keras");
+   RModel modelSequential = TMVA::Experimental::SOFIE::PyKeras::Parse("KerasModelSequential.h5");
    modelSequential.Generate();
    modelSequential.OutputGenerated("KerasSequentialModel.hxx");
 
    //Emitting header file for Keras Functional API Model
-   RModel modelFunctional = TMVA::Experimental::SOFIE::PyKeras::Parse("KerasModelFunctional.keras");
+   RModel modelFunctional = TMVA::Experimental::SOFIE::PyKeras::Parse("KerasModelFunctional.h5");
    modelFunctional.Generate();
    modelFunctional.OutputGenerated("KerasFunctionalModel.hxx");
 
    //Emitting header file for Keras BatchNorm Model
-   RModel modelBatchNorm = TMVA::Experimental::SOFIE::PyKeras::Parse("KerasModelBatchNorm.keras");
+   RModel modelBatchNorm = TMVA::Experimental::SOFIE::PyKeras::Parse("KerasModelBatchNorm.h5");
    modelBatchNorm.Generate();
    modelBatchNorm.OutputGenerated("KerasBatchNormModel.hxx");
 
 #if PY_MAJOR_VERSION >= 3  // parsing of convolutional models supported only for Python3
    // Emitting header file for Keras Conv2D Model with valid padding
-   RModel modelConv2D_Valid = TMVA::Experimental::SOFIE::PyKeras::Parse("KerasModelConv2D_Valid.keras");
+   RModel modelConv2D_Valid = TMVA::Experimental::SOFIE::PyKeras::Parse("KerasModelConv2D_Valid.h5");
    modelConv2D_Valid.Generate();
    modelConv2D_Valid.OutputGenerated("KerasConv2D_Valid.hxx");
 
    // Emitting header file for Keras Conv2D Model with valid padding
-   RModel modelConv2D_Same = TMVA::Experimental::SOFIE::PyKeras::Parse("KerasModelConv2D_Same.keras");
+   RModel modelConv2D_Same = TMVA::Experimental::SOFIE::PyKeras::Parse("KerasModelConv2D_Same.h5");
    modelConv2D_Same.Generate();
    modelConv2D_Same.OutputGenerated("KerasConv2D_Same.hxx");
 #endif
 
    //Emitting header file for Keras model with Reshape layer
-   RModel modelReshape = TMVA::Experimental::SOFIE::PyKeras::Parse("KerasModelReshape.keras");
+   RModel modelReshape = TMVA::Experimental::SOFIE::PyKeras::Parse("KerasModelReshape.h5");
    modelReshape.Generate();
    modelReshape.OutputGenerated("KerasReshapeModel.hxx");
 
    //Emitting header file for Keras model with Concatenate layer
-   RModel modelConcatenate = TMVA::Experimental::SOFIE::PyKeras::Parse("KerasModelConcatenate.keras");
+   RModel modelConcatenate = TMVA::Experimental::SOFIE::PyKeras::Parse("KerasModelConcatenate.h5");
    modelConcatenate.Generate();
    modelConcatenate.OutputGenerated("KerasConcatenateModel.hxx");
 
    // Emitting header file for Keras Binary Op Model
-   RModel modelBinaryOp = TMVA::Experimental::SOFIE::PyKeras::Parse("KerasModelBinaryOp.keras");
+   RModel modelBinaryOp = TMVA::Experimental::SOFIE::PyKeras::Parse("KerasModelBinaryOp.h5");
    modelBinaryOp.Generate();
    modelBinaryOp.OutputGenerated("KerasBinaryOpModel.hxx");
 
    //Emitting header file for Keras activation functions model
-   RModel modelActivations = TMVA::Experimental::SOFIE::PyKeras::Parse("KerasModelActivations.keras");
+   RModel modelActivations = TMVA::Experimental::SOFIE::PyKeras::Parse("KerasModelActivations.h5");
    modelActivations.Generate();
    modelActivations.OutputGenerated("KerasActivationsModel.hxx");
 
diff -rupN --exclude=.git* root_v6.28.12_unpatched/root_v6.28.12-source/tmva/pymva/test/TestRModelParserKeras.C root_v6.28.12_patched/root_v6.28.12-source/tmva/pymva/test/TestRModelParserKeras.C
--- root_v6.28.12_unpatched/root_v6.28.12-source/tmva/pymva/test/TestRModelParserKeras.C	2024-09-18 13:23:14
+++ root_v6.28.12_patched/root_v6.28.12-source/tmva/pymva/test/TestRModelParserKeras.C	2024-09-18 13:49:29
@@ -47,7 +47,7 @@ TEST(RModelParser_Keras, SEQUENTIAL)
     PyRun_String("os.environ['TF_CPP_MIN_LOG_LEVEL'] = '3'",Py_single_input,fGlobalNS,fLocalNS);
     PyRun_String("from tensorflow.keras.models import load_model",Py_single_input,fGlobalNS,fLocalNS);
     PyRun_String("import numpy",Py_single_input,fGlobalNS,fLocalNS);
-    PyRun_String("model=load_model('KerasModelSequential.keras')",Py_single_input,fGlobalNS,fLocalNS);
+    PyRun_String("model=load_model('KerasModelSequential.h5')",Py_single_input,fGlobalNS,fLocalNS);
     PyRun_String("input=numpy.array([0.12107884, 0.89718615, 0.89123899, 0.32197549,"
                                     "0.17891638, 0.83555135, 0.98680066, 0.14496809,"
                                     "0.07255503, 0.55386989, 0.6628149 , 0.29843291,"
@@ -94,7 +94,7 @@ TEST(RModelParser_Keras, FUNCTIONAL)
     PyRun_String("os.environ['TF_CPP_MIN_LOG_LEVEL'] = '3'",Py_single_input,fGlobalNS,fLocalNS);
     PyRun_String("from tensorflow.keras.models import load_model",Py_single_input,fGlobalNS,fLocalNS);
     PyRun_String("import numpy",Py_single_input,fGlobalNS,fLocalNS);
-    PyRun_String("model=load_model('KerasModelFunctional.keras')",Py_single_input,fGlobalNS,fLocalNS);
+    PyRun_String("model=load_model('KerasModelFunctional.h5')",Py_single_input,fGlobalNS,fLocalNS);
     PyRun_String("input=numpy.array([0.60828574, 0.50069386, 0.75186709, 0.14968806, 0.7692464 ,0.77027585, 0.75095316, 0.96651197,"
                                     "0.38536308, 0.95565917, 0.62796356, 0.13818375, 0.65484891,0.89220363, 0.23879365, 0.00635323]).reshape(2,8)",Py_single_input,fGlobalNS,fLocalNS);
     PyRun_String("output=model(input).numpy()",Py_single_input,fGlobalNS,fLocalNS);
@@ -135,7 +135,7 @@ TEST(RModelParser_Keras, BATCH_NORM)
     PyRun_String("os.environ['TF_CPP_MIN_LOG_LEVEL'] = '3'",Py_single_input,fGlobalNS,fLocalNS);
     PyRun_String("from tensorflow.keras.models import load_model",Py_single_input,fGlobalNS,fLocalNS);
     PyRun_String("import numpy",Py_single_input,fGlobalNS,fLocalNS);
-    PyRun_String("model=load_model('KerasModelBatchNorm.keras')",Py_single_input,fGlobalNS,fLocalNS);
+    PyRun_String("model=load_model('KerasModelBatchNorm.h5')",Py_single_input,fGlobalNS,fLocalNS);
     PyRun_String("input=numpy.array([0.22308163, 0.95274901, 0.44712538, 0.84640867,"
                                     "0.69947928, 0.29743695, 0.81379782, 0.39650574]).reshape(2,4)",Py_single_input,fGlobalNS,fLocalNS);
     PyRun_String("output=model(input).numpy()",Py_single_input,fGlobalNS,fLocalNS);
@@ -182,7 +182,7 @@ TEST(DISABLED_RModelParser_Keras, CONV_VALID)
     PyRun_String("os.environ['TF_CPP_MIN_LOG_LEVEL'] = '3'",Py_single_input,fGlobalNS,fLocalNS);
     PyRun_String("from tensorflow.keras.models import load_model",Py_single_input,fGlobalNS,fLocalNS);
     PyRun_String("import numpy",Py_single_input,fGlobalNS,fLocalNS);
-    PyRun_String("model=load_model('KerasModelConv2D_Valid.keras')",Py_single_input,fGlobalNS,fLocalNS);
+    PyRun_String("model=load_model('KerasModelConv2D_Valid.h5')",Py_single_input,fGlobalNS,fLocalNS);
     PyRun_String("input=numpy.ones((1,4,4,1))",Py_single_input,fGlobalNS,fLocalNS);
     PyRun_String("output=model(input).numpy()",Py_single_input,fGlobalNS,fLocalNS);
     PyRun_String("outputSize=output.size",Py_single_input,fGlobalNS,fLocalNS);
@@ -228,7 +228,7 @@ TEST(DISABLED_RModelParser_Keras, CONV_SAME)
     PyRun_String("os.environ['TF_CPP_MIN_LOG_LEVEL'] = '3'",Py_single_input,fGlobalNS,fLocalNS);
     PyRun_String("from tensorflow.keras.models import load_model",Py_single_input,fGlobalNS,fLocalNS);
     PyRun_String("import numpy",Py_single_input,fGlobalNS,fLocalNS);
-    PyRun_String("model=load_model('KerasModelConv2D_Same.keras')",Py_single_input,fGlobalNS,fLocalNS);
+    PyRun_String("model=load_model('KerasModelConv2D_Same.h5')",Py_single_input,fGlobalNS,fLocalNS);
     PyRun_String("input=numpy.ones((1,4,4,1))",Py_single_input,fGlobalNS,fLocalNS);
     PyRun_String("output=model(input).numpy()",Py_single_input,fGlobalNS,fLocalNS);
     PyRun_String("outputSize=output.size",Py_single_input,fGlobalNS,fLocalNS);
@@ -270,7 +270,7 @@ TEST(RModelParser_Keras, RESHAPE)
     PyRun_String("os.environ['TF_CPP_MIN_LOG_LEVEL'] = '3'",Py_single_input,fGlobalNS,fLocalNS);
     PyRun_String("from tensorflow.keras.models import load_model",Py_single_input,fGlobalNS,fLocalNS);
     PyRun_String("import numpy",Py_single_input,fGlobalNS,fLocalNS);
-    PyRun_String("model=load_model('KerasModelReshape.keras')",Py_single_input,fGlobalNS,fLocalNS);
+    PyRun_String("model=load_model('KerasModelReshape.h5')",Py_single_input,fGlobalNS,fLocalNS);
     PyRun_String("input=numpy.ones((1,4,4,1))",Py_single_input,fGlobalNS,fLocalNS);
     PyRun_String("output=model(input).numpy()",Py_single_input,fGlobalNS,fLocalNS);
     PyRun_String("outputSize=output.size",Py_single_input,fGlobalNS,fLocalNS);
@@ -311,7 +311,7 @@ TEST(RModelParser_Keras, CONCATENATE)
     PyRun_String("os.environ['TF_CPP_MIN_LOG_LEVEL'] = '3'",Py_single_input,fGlobalNS,fLocalNS);
     PyRun_String("from tensorflow.keras.models import load_model",Py_single_input,fGlobalNS,fLocalNS);
     PyRun_String("import numpy",Py_single_input,fGlobalNS,fLocalNS);
-    PyRun_String("model=load_model('KerasModelConcatenate.keras')",Py_single_input,fGlobalNS,fLocalNS);
+    PyRun_String("model=load_model('KerasModelConcatenate.h5')",Py_single_input,fGlobalNS,fLocalNS);
     PyRun_String("input_1=numpy.ones((1,2))",Py_single_input,fGlobalNS,fLocalNS);
     PyRun_String("input_2=numpy.ones((1,2))",Py_single_input,fGlobalNS,fLocalNS);
     PyRun_String("output=model([input_1,input_2]).numpy()",Py_single_input,fGlobalNS,fLocalNS);
@@ -353,7 +353,7 @@ TEST(RModelParser_Keras, BINARY_OP)
     PyRun_String("os.environ['TF_CPP_MIN_LOG_LEVEL'] = '3'",Py_single_input,fGlobalNS,fLocalNS);
     PyRun_String("from tensorflow.keras.models import load_model",Py_single_input,fGlobalNS,fLocalNS);
     PyRun_String("import numpy",Py_single_input,fGlobalNS,fLocalNS);
-    PyRun_String("model=load_model('KerasModelBinaryOp.keras')",Py_single_input,fGlobalNS,fLocalNS);
+    PyRun_String("model=load_model('KerasModelBinaryOp.h5')",Py_single_input,fGlobalNS,fLocalNS);
     PyRun_String("input1=numpy.array([1,1])",Py_single_input,fGlobalNS,fLocalNS);
     PyRun_String("input2=numpy.array([1,1])",Py_single_input,fGlobalNS,fLocalNS);
     PyRun_String("output=model([input1,input2]).numpy()",Py_single_input,fGlobalNS,fLocalNS);
@@ -393,7 +393,7 @@ TEST(RModelParser_Keras, ACTIVATIONS)
     PyRun_String("os.environ['TF_CPP_MIN_LOG_LEVEL'] = '3'",Py_single_input,fGlobalNS,fLocalNS);
     PyRun_String("from tensorflow.keras.models import load_model",Py_single_input,fGlobalNS,fLocalNS);
     PyRun_String("import numpy",Py_single_input,fGlobalNS,fLocalNS);
-    PyRun_String("model=load_model('KerasModelActivations.keras')",Py_single_input,fGlobalNS,fLocalNS);
+    PyRun_String("model=load_model('KerasModelActivations.h5')",Py_single_input,fGlobalNS,fLocalNS);
     PyRun_String("input=numpy.ones((1,8))",Py_single_input,fGlobalNS,fLocalNS);
     PyRun_String("output=model(input).numpy()",Py_single_input,fGlobalNS,fLocalNS);
     PyRun_String("outputSize=output.size",Py_single_input,fGlobalNS,fLocalNS);
@@ -436,7 +436,7 @@ TEST(RModel, CUSTOM_OP)
 
     PyRun_String("from tensorflow.keras.layers import Lambda",Py_single_input,fGlobalNS,fLocalNS);
     PyRun_String("import numpy",Py_single_input,fGlobalNS,fLocalNS);
-    PyRun_String("model=load_model('KerasModelForCustomOp.keras')",Py_single_input,fGlobalNS,fLocalNS);
+    PyRun_String("model=load_model('KerasModelForCustomOp.h5')",Py_single_input,fGlobalNS,fLocalNS);
     PyRun_String("model.add(Lambda(lambda x: x * 2))",Py_single_input,fGlobalNS,fLocalNS);
     PyRun_String("input=numpy.array([1,1,1,1,1,1,1,1]).reshape(1,8)",Py_single_input,fGlobalNS,fLocalNS);
     PyRun_String("output=model(input).numpy()",Py_single_input,fGlobalNS,fLocalNS);
diff -rupN --exclude=.git* root_v6.28.12_unpatched/root_v6.28.12-source/tmva/pymva/test/generateKerasModels.py root_v6.28.12_patched/root_v6.28.12-source/tmva/pymva/test/generateKerasModels.py
--- root_v6.28.12_unpatched/root_v6.28.12-source/tmva/pymva/test/generateKerasModels.py	2024-09-18 13:23:14
+++ root_v6.28.12_patched/root_v6.28.12-source/tmva/pymva/test/generateKerasModels.py	2024-09-18 13:49:29
@@ -24,7 +24,7 @@ def generateFunctionalModel():
 
     model.compile(loss='mean_squared_error', optimizer=SGD(learning_rate=0.01))
     model.fit(x_train, y_train, epochs=10, batch_size=2)
-    model.save('KerasModelFunctional.keras')
+    model.save('KerasModelFunctional.h5')
 
 def generateSequentialModel():
     model=Sequential()
@@ -39,7 +39,7 @@ def generateSequentialModel():
 
     model.compile(loss='mean_squared_error', optimizer=SGD(learning_rate=0.01))
     model.fit(x_train, y_train, epochs=10, batch_size=4)
-    model.save('KerasModelSequential.keras')
+    model.save('KerasModelSequential.h5')
 
 def generateBatchNormModel():
     model=Sequential()
@@ -53,7 +53,7 @@ def generateBatchNormModel():
 
     model.compile(loss='mean_squared_error', optimizer=SGD(learning_rate=0.01))
     model.fit(x_train, y_train, epochs=10, batch_size=2)
-    model.save('KerasModelBatchNorm.keras')
+    model.save('KerasModelBatchNorm.h5')
 
 def generateConv2DModel_ValidPadding():
     model=Sequential()
@@ -65,7 +65,7 @@ def generateConv2DModel_ValidPadding():
 
     model.compile(loss='mean_squared_error', optimizer=SGD(learning_rate=0.01))
     model.fit(x_train, y_train, epochs=10, batch_size=2)
-    model.save('KerasModelConv2D_Valid.keras')
+    model.save('KerasModelConv2D_Valid.h5')
 
 def generateConv2DModel_SamePadding():
     model=Sequential()
@@ -77,7 +77,7 @@ def generateConv2DModel_SamePadding():
 
     model.compile(loss='mean_squared_error', optimizer=SGD(learning_rate=0.01))
     model.fit(x_train, y_train, epochs=10, batch_size=2)
-    model.save('KerasModelConv2D_Same.keras')
+    model.save('KerasModelConv2D_Same.h5')
 
 def generateReshapeModel():
     model = Sequential()
@@ -90,7 +90,7 @@ def generateReshapeModel():
 
     model.compile(loss='mean_squared_error', optimizer=SGD(learning_rate=0.01))
     model.fit(x_train, y_train, epochs=10, batch_size=2)
-    model.save('KerasModelReshape.keras')
+    model.save('KerasModelReshape.h5')
 
 def generateConcatModel():
     input_1 = Input(shape=(2,))
@@ -107,7 +107,7 @@ def generateConcatModel():
 
     model.compile(loss='mean_squared_error', optimizer=SGD(learning_rate=0.01))
     model.fit([x1_train,x2_train], y_train, epochs=10, batch_size=1)
-    model.save('KerasModelConcatenate.keras')
+    model.save('KerasModelConcatenate.h5')
 
 def generateBinaryOpModel():
     input1 = Input(shape=(2, ))
@@ -124,7 +124,7 @@ def generateBinaryOpModel():
 
     model.compile(loss='mean_squared_error', optimizer=SGD(learning_rate=0.01))
     model.fit([x1_train,x2_train], y_train, epochs=10, batch_size=2)
-    model.save('KerasModelBinaryOp.keras')
+    model.save('KerasModelBinaryOp.h5')
 
 def generateActivationModel():
     input=Input(shape=(8,))
@@ -140,8 +140,8 @@ def generateActivationModel():
 
     model.compile(loss='mean_squared_error', optimizer=SGD(learning_rate=0.01))
     model.fit(x_train, y_train, epochs=10, batch_size=1)
-    model.save('KerasModelActivations.keras')
-    
+    model.save('KerasModelActivations.h5')
+
 
 generateFunctionalModel()
 generateSequentialModel()
diff -rupN --exclude=.git* root_v6.28.12_unpatched/root_v6.28.12-source/tmva/pymva/test/testPyKerasClassification.C root_v6.28.12_patched/root_v6.28.12-source/tmva/pymva/test/testPyKerasClassification.C
--- root_v6.28.12_unpatched/root_v6.28.12-source/tmva/pymva/test/testPyKerasClassification.C	2024-09-18 13:23:14
+++ root_v6.28.12_patched/root_v6.28.12-source/tmva/pymva/test/testPyKerasClassification.C	2024-09-18 13:49:29
@@ -30,19 +30,20 @@ int testPyKerasClassification(){
    TFile *input = TFile::Open(fname);
 
    // Build model from python file
-   std::cout << "Generate keras model..." << std::endl;
-   UInt_t ret;
-   ret = gSystem->Exec("echo '"+pythonSrc+"' > generateKerasModelClassification.py");
-   if(ret!=0){
-       std::cout << "[ERROR] Failed to write python code to file" << std::endl;
-       return 1;
+   if (gSystem->AccessPathName("kerasModelClassification.h5")) {
+      std::cout << "Generate keras model..." << std::endl;
+      UInt_t ret;
+      ret = gSystem->Exec("echo '"+pythonSrc+"' > generateKerasModelClassification.py");
+      if(ret!=0){
+         std::cout << "[ERROR] Failed to write python code to file" << std::endl;
+         return 1;
+      }
+      ret = gSystem->Exec(TMVA::Python_Executable() + " generateKerasModelClassification.py");
+      if(ret!=0){
+         std::cout << "[ERROR] Failed to generate model using python" << std::endl;
+         return 1;
+      }
    }
-   ret = gSystem->Exec(TMVA::Python_Executable() + " generateKerasModelClassification.py");
-   if(ret!=0){
-       std::cout << "[ERROR] Failed to generate model using python" << std::endl;
-       return 1;
-   }
-
    // Setup PyMVA and factory
    std::cout << "Setup TMVA..." << std::endl;
    TMVA::PyMethodBase::PyInitialize();
diff -rupN --exclude=.git* root_v6.28.12_unpatched/root_v6.28.12-source/tmva/rmva/test/Classification.C root_v6.28.12_patched/root_v6.28.12-source/tmva/rmva/test/Classification.C
--- root_v6.28.12_unpatched/root_v6.28.12-source/tmva/rmva/test/Classification.C	2024-09-18 13:23:14
+++ root_v6.28.12_patched/root_v6.28.12-source/tmva/rmva/test/Classification.C	2024-09-18 13:49:29
@@ -23,7 +23,7 @@ void Classification()
    TMVA::Tools::Instance();
    ROOT::R::TRInterface &r = ROOT::R::TRInterface::Instance();
 
-   TString outfileName("TMVA.root");
+   TString outfileName("RMVA.root");
    TFile *outputFile = TFile::Open(outfileName, "RECREATE");
 
    TMVA::Factory *factory = new TMVA::Factory("RMVAClassification", outputFile,
diff -rupN --exclude=.git* root_v6.28.12_unpatched/root_v6.28.12-source/tmva/sofie/test/TestSofieModels.cxx root_v6.28.12_patched/root_v6.28.12-source/tmva/sofie/test/TestSofieModels.cxx
--- root_v6.28.12_unpatched/root_v6.28.12-source/tmva/sofie/test/TestSofieModels.cxx	2024-09-18 13:23:14
+++ root_v6.28.12_patched/root_v6.28.12-source/tmva/sofie/test/TestSofieModels.cxx	2024-09-18 13:26:26
@@ -94,11 +94,7 @@ void TestLinear(int nbatches, bool useBN = false, int 
       f >> refValue[i];
       if (verbose)
          std::cout << " result " << result.at(i) << " reference " << refValue[i] << std::endl;
-      if (std::abs(refValue[i]) > 0.5)
-         EXPECT_FLOAT_EQ(result.at(i), refValue[i]);
-      else
-         // expect float fails for small values
-         EXPECT_NEAR(result.at(i), refValue[i], 10 * std::numeric_limits<float>::epsilon());
+      EXPECT_NEAR(result.at(i), refValue[i], 10 * std::numeric_limits<float>::epsilon());
    }
 }
 
@@ -177,11 +173,7 @@ void TestConv( std::string type, int nbatches, bool us
    for (size_t i = 0; i < refValue.size(); ++i) {
       f >> refValue[i];
       if (verbose) std::cout << " result " << result.at(i) << " reference " << refValue[i] << std::endl;
-      if (std::abs(refValue[i]) > 0.5)
-         EXPECT_FLOAT_EQ(result.at(i), refValue[i]);
-      else
-         // expect float fails for small values
-         EXPECT_NEAR(result.at(i), refValue[i], 10 * std::numeric_limits<float>::epsilon());
+      EXPECT_NEAR(result.at(i), refValue[i], 10 * std::numeric_limits<float>::epsilon());
    }
 }
 
@@ -253,11 +245,7 @@ void TestRecurrent(std::string type, int nbatches, int
       f >> refValue[i];
       if (verbose)
          std::cout << " result " << result.at(i) << " reference " << refValue[i] << std::endl;
-      if (std::abs(refValue[i]) > 0.5)
-         EXPECT_FLOAT_EQ(result.at(i), refValue[i]);
-      else
-         // expect float fails for small values
-         EXPECT_NEAR(result.at(i), refValue[i], 10 * std::numeric_limits<float>::epsilon());
+      EXPECT_NEAR(result.at(i), refValue[i], 10 * std::numeric_limits<float>::epsilon());
    }
 }
 
@@ -336,11 +324,7 @@ void TestConvTranspose( std::string type, int nbatches
    for (size_t i = 0; i < refValue.size(); ++i) {
       f >> refValue[i];
       if (verbose) std::cout << " result " << result.at(i) << " reference " << refValue[i] << std::endl;
-      if (std::abs(refValue[i]) > 0.5)
-         EXPECT_FLOAT_EQ(result.at(i), refValue[i]);
-      else
-         // expect float fails for small values
-         EXPECT_NEAR(result.at(i), refValue[i], 10 * std::numeric_limits<float>::epsilon());
+      EXPECT_NEAR(result.at(i), refValue[i], 10 * std::numeric_limits<float>::epsilon());
    }
 }
 
diff -rupN --exclude=.git* root_v6.28.12_unpatched/root_v6.28.12-source/tmva/tmva/test/CMakeLists.txt root_v6.28.12_patched/root_v6.28.12-source/tmva/tmva/test/CMakeLists.txt
--- root_v6.28.12_unpatched/root_v6.28.12-source/tmva/tmva/test/CMakeLists.txt	2024-09-18 13:23:14
+++ root_v6.28.12_patched/root_v6.28.12-source/tmva/tmva/test/CMakeLists.txt	2024-09-18 13:49:29
@@ -33,9 +33,12 @@ endif()
     endif()
 endif()
 
-if(dataframe AND NOT pyroot_legacy)
-  find_python_module(xgboost QUIET)
-  if (PY_XGBOOST_FOUND)
-    ROOT_ADD_PYUNITTEST(rbdt_xgboost rbdt_xgboost.py)
-  endif()
-endif()
+# Disabled because RBDT doesn't support the imbalanced tree structure of
+# XGBoost models. See https://github.com/root-project/root/issues/15197
+# TODO: Re-enable once fixed
+# if(dataframe)
+#   find_python_module(xgboost QUIET)
+#   if (PY_XGBOOST_FOUND)
+#     ROOT_ADD_PYUNITTEST(rbdt_xgboost rbdt_xgboost.py)
+#   endif()
+# endif()
diff -rupN --exclude=.git* root_v6.28.12_unpatched/root_v6.28.12-source/tmva/tmva/test/rbdt_xgboost.py root_v6.28.12_patched/root_v6.28.12-source/tmva/tmva/test/rbdt_xgboost.py
--- root_v6.28.12_unpatched/root_v6.28.12-source/tmva/tmva/test/rbdt_xgboost.py	2024-09-18 13:23:14
+++ root_v6.28.12_patched/root_v6.28.12-source/tmva/tmva/test/rbdt_xgboost.py	2024-09-18 13:49:29
@@ -21,7 +21,7 @@ def _test_XGBBinary(backend, label):
     x, y = create_dataset(1000, 10, 2)
     xgb = xgboost.XGBClassifier(n_estimators=100, max_depth=3)
     xgb.fit(x, y)
-    ROOT.TMVA.Experimental.SaveXGBoost(xgb, "myModel", "testXGBBinary{}.root".format(label))
+    ROOT.TMVA.Experimental.SaveXGBoost(xgb, "myModel", "testXGBBinary{}.root".format(label), num_inputs=10)
     bdt = ROOT.TMVA.Experimental.RBDT[backend]("myModel", "testXGBBinary{}.root".format(label))
 
     y_xgb = xgb.predict_proba(x)[:, 1].squeeze()
@@ -51,7 +51,7 @@ def _test_XGBMulticlass(backend, label):
     x, y = create_dataset(1000, 10, 3)
     xgb = xgboost.XGBClassifier(n_estimators=100, max_depth=3)
     xgb.fit(x, y)
-    ROOT.TMVA.Experimental.SaveXGBoost(xgb, "myModel", "testXGBMulticlass{}.root".format(label))
+    ROOT.TMVA.Experimental.SaveXGBoost(xgb, "myModel", "testXGBMulticlass{}.root".format(label), num_inputs=10)
     bdt = ROOT.TMVA.Experimental.RBDT[backend]("myModel", "testXGBMulticlass{}.root".format(label))
 
     y_xgb = xgb.predict_proba(x)
diff -rupN --exclude=.git* root_v6.28.12_unpatched/root_v6.28.12-source/tree/dataframe/inc/ROOT/RDF/RAction.hxx root_v6.28.12_patched/root_v6.28.12-source/tree/dataframe/inc/ROOT/RDF/RAction.hxx
--- root_v6.28.12_unpatched/root_v6.28.12-source/tree/dataframe/inc/ROOT/RDF/RAction.hxx	2024-09-18 13:23:13
+++ root_v6.28.12_patched/root_v6.28.12-source/tree/dataframe/inc/ROOT/RDF/RAction.hxx	2024-09-18 13:49:29
@@ -102,7 +102,8 @@ class R__CLING_PTRCHECK(off) RAction : public RActionB
    template <typename... ColTypes, std::size_t... S>
    void CallExec(unsigned int slot, Long64_t entry, TypeList<ColTypes...>, std::index_sequence<S...>)
    {
-      fHelper.Exec(slot, fValues[slot][S]->template Get<ColTypes>(entry)...);
+      ROOT::Internal::RDF::CallGuaranteedOrder{[&](auto &&...args) { return fHelper.Exec(slot, args...); },
+                                               fValues[slot][S]->template Get<ColTypes>(entry)...};
       (void)entry; // avoid unused parameter warning (gcc 12.1)
    }
 
diff -rupN --exclude=.git* root_v6.28.12_unpatched/root_v6.28.12-source/tree/dataframe/inc/ROOT/RDF/Utils.hxx root_v6.28.12_patched/root_v6.28.12-source/tree/dataframe/inc/ROOT/RDF/Utils.hxx
--- root_v6.28.12_unpatched/root_v6.28.12-source/tree/dataframe/inc/ROOT/RDF/Utils.hxx	2024-09-18 13:23:13
+++ root_v6.28.12_patched/root_v6.28.12-source/tree/dataframe/inc/ROOT/RDF/Utils.hxx	2024-09-18 13:49:29
@@ -283,6 +283,23 @@ std::vector<T> Union(const std::vector<T> &v1, const s
    return res;
 }
 
+/**
+ * \brief Struct to wrap the call to a function with a guaranteed order of
+ *        execution of its arguments.
+ * \tparam F Type of the callable.
+ * \tparam Args Variadic types of the arguments to the callable.
+ *
+ * The execution order is guaranteed by calling the function in the constructor
+ * thus enabling the exploitation of the list-initialization sequenced-before
+ * feature (See rule 9 at https://en.cppreference.com/w/cpp/language/eval_order).
+ */
+struct CallGuaranteedOrder {
+   template <typename F, typename... Args>
+   CallGuaranteedOrder(F &&f, Args &&...args)
+   {
+      f(std::forward<Args>(args)...);
+   }
+};
 } // end NS RDF
 } // end NS Internal
 } // end NS ROOT
diff -rupN --exclude=.git* root_v6.28.12_unpatched/root_v6.28.12-source/tree/dataframe/src/RDataFrame.cxx root_v6.28.12_patched/root_v6.28.12-source/tree/dataframe/src/RDataFrame.cxx
--- root_v6.28.12_unpatched/root_v6.28.12-source/tree/dataframe/src/RDataFrame.cxx	2024-09-18 13:23:13
+++ root_v6.28.12_patched/root_v6.28.12-source/tree/dataframe/src/RDataFrame.cxx	2024-09-18 13:49:29
@@ -611,6 +611,22 @@ for el in df.Take[int]("x"):
     print(f"Element: {el}")
 ~~~
 
+### Actions and readers
+
+An action that needs values for its computations will request it from a reader, e.g. a column created via `Define` or
+available from the input dataset. The action will request values from each column of the list of input columns (either
+inferred or specified by the user), in order. For example:
+
+~~~{.cpp}
+ROOT::RDataFrame df{1};
+auto df1 = df.Define("x", []{ return 11; });
+auto df2 = df1.Define("y", []{ return 22; });
+auto graph = df2.Graph<int, int>("x","y");
+~~~
+
+The `Graph` action is going to request first the value from column "x", then that of column "y". Specifically, the order
+of execution of the operations of nodes in this branch of the computation graph is guaranteed to be top to bottom.
+
 \anchor distrdf
 ## Distributed execution
 
diff -rupN --exclude=.git* root_v6.28.12_unpatched/root_v6.28.12-source/tree/dataframe/test/CMakeLists.txt root_v6.28.12_patched/root_v6.28.12-source/tree/dataframe/test/CMakeLists.txt
--- root_v6.28.12_unpatched/root_v6.28.12-source/tree/dataframe/test/CMakeLists.txt	2024-09-18 13:23:13
+++ root_v6.28.12_patched/root_v6.28.12-source/tree/dataframe/test/CMakeLists.txt	2024-09-18 13:49:29
@@ -53,6 +53,7 @@ ROOT_ADD_GTEST(dataframe_vary dataframe_vary.cxx LIBRA
 ROOT_ADD_GTEST(dataframe_merge_results dataframe_merge_results.cxx LIBRARIES ROOTDataFrame)
 ROOT_ADD_GTEST(dataframe_samplecallback dataframe_samplecallback.cxx CounterHelper.h LIBRARIES ROOTDataFrame)
 ROOT_ADD_GTEST(dataframe_vary dataframe_vary.cxx LIBRARIES ROOTDataFrame)
+ROOT_ADD_GTEST(dataframe_compgraph dataframe_compgraph.cxx LIBRARIES ROOTDataFrame)
 
 #### TESTS FOR DIFFERENT DATASOURCES ####
 if(MSVC AND MSVC_VERSION GREATER_EQUAL 1925 AND MSVC_VERSION LESS 1929 OR CMAKE_CXX_STANDARD LESS 17)
diff -rupN --exclude=.git* root_v6.28.12_unpatched/root_v6.28.12-source/tree/dataframe/test/dataframe_compgraph.cxx root_v6.28.12_patched/root_v6.28.12-source/tree/dataframe/test/dataframe_compgraph.cxx
--- root_v6.28.12_unpatched/root_v6.28.12-source/tree/dataframe/test/dataframe_compgraph.cxx	1969-12-31 16:00:00
+++ root_v6.28.12_patched/root_v6.28.12-source/tree/dataframe/test/dataframe_compgraph.cxx	2024-09-18 13:26:26
@@ -0,0 +1,86 @@
+#include "TInterpreter.h"
+#include "ROOT/RDataFrame.hxx"
+#include "gtest/gtest.h"
+
+TEST(CompGraphTests, ExecOrderTwoDefines)
+{
+   ROOT::RDataFrame d{1};
+   int i{42};
+   auto graph = d.Define("x",
+                         [&i]() {
+                            auto ret = i;
+                            i = 10;
+                            return ret;
+                         })
+                   .Define("y", [&i]() { return i; })
+                   .Graph<int, int>("x", "y");
+
+   // Expected x=42,y=10
+   EXPECT_EQ(graph->GetN(), 1);
+   EXPECT_EQ(graph->GetPointX(0), 42);
+   EXPECT_EQ(graph->GetPointY(0), 10);
+}
+
+TEST(CompGraphTests, ExecOrderTwoDefinesInterpreted)
+{
+   ROOT::RDataFrame d{1};
+   gInterpreter->Declare(R"(
+    namespace ROOT::Internal::RDF::Testing{
+        int myInt{42};
+    }
+   )");
+   auto graph =
+      d.Define("x", "return [&i = ROOT::Internal::RDF::Testing::myInt]() { auto ret = i; i = 10; return ret; }();")
+         .Define("y", "return [&i = ROOT::Internal::RDF::Testing::myInt]() { return i; }();")
+         .Graph<int, int>("x", "y");
+
+   // Expected x=42,y=10
+   EXPECT_EQ(graph->GetN(), 1);
+   EXPECT_EQ(graph->GetPointX(0), 42);
+   EXPECT_EQ(graph->GetPointY(0), 10);
+}
+
+TEST(CompGraphTests, ExecOrderThreeDefines)
+{
+   struct Filler {
+      int fA;
+      float fB;
+      std::string fC;
+      void Fill(int a, float b, const std::string &c)
+      {
+         fA = a;
+         fB = b;
+         fC = c;
+      }
+      void Merge(const std::vector<Filler *> &)
+      {
+         // no-op to comply with interface for RInterface::Fill
+      }
+   };
+
+   int i{};
+   ROOT::RDataFrame d{1};
+   auto obj = d.Define("x",
+                       [&i]() {
+                          auto ret{i == 0 ? 33 : 999};
+                          i = 10;
+                          return ret;
+                       })
+                 .Define("y",
+                         [&i]() {
+                            auto ret{i == 10 ? 42.f : 33.f};
+                            i = 20;
+                            return ret;
+                         })
+                 .Define("z",
+                         [&i]() {
+                            std::string ret{i == 20 ? "correct" : "wrong"};
+                            i = 30;
+                            return ret;
+                         })
+                 .Fill<int, float, std::string>(Filler{}, {"x", "y", "z"});
+
+   EXPECT_EQ(obj->fA, 33);
+   EXPECT_EQ(obj->fB, 42.f);
+   EXPECT_EQ(obj->fC, "correct");
+}
diff -rupN --exclude=.git* root_v6.28.12_unpatched/root_v6.28.12-source/tree/ntuple/v7/test/ntuple_storage.cxx root_v6.28.12_patched/root_v6.28.12-source/tree/ntuple/v7/test/ntuple_storage.cxx
--- root_v6.28.12_unpatched/root_v6.28.12-source/tree/ntuple/v7/test/ntuple_storage.cxx	2024-09-18 13:23:13
+++ root_v6.28.12_patched/root_v6.28.12-source/tree/ntuple/v7/test/ntuple_storage.cxx	2024-09-18 13:49:29
@@ -397,7 +397,11 @@ TEST(RPageSinkBuf, ParallelZip) {
             auto *parallel_zip = ntuple->GetMetrics().GetCounter(
                "RNTupleWriter.RPageSinkBuf.ParallelZip");
             ASSERT_FALSE(parallel_zip == nullptr);
+#ifdef R__USE_IMT
             EXPECT_EQ(1, parallel_zip->GetValueAsInt());
+#else
+            EXPECT_EQ(0, parallel_zip->GetValueAsInt());
+#endif
          }
       }
    }
@@ -455,10 +459,15 @@ TEST(RPageSinkBuf, CommitSealedPageV)
       ntuple->Fill();
       ntuple->Fill();
       ntuple->CommitCluster();
+#ifdef R__USE_IMT
       // All pages in all columns committed via a single call to `CommitSealedPageV()`
       EXPECT_EQ(0, counters.fNCommitPage);
-      EXPECT_EQ(0, counters.fNCommitSealedPage);
       EXPECT_EQ(1, counters.fNCommitSealedPageV);
+#else
+      EXPECT_EQ(2, counters.fNCommitPage);
+      EXPECT_EQ(0, counters.fNCommitSealedPageV);
+#endif
+      EXPECT_EQ(0, counters.fNCommitSealedPage);
    }
 }
 
diff -rupN --exclude=.git* root_v6.28.12_unpatched/root_v6.28.12-source/tree/tree/src/TBranch.cxx root_v6.28.12_patched/root_v6.28.12-source/tree/tree/src/TBranch.cxx
--- root_v6.28.12_unpatched/root_v6.28.12-source/tree/tree/src/TBranch.cxx	2024-09-18 13:23:13
+++ root_v6.28.12_patched/root_v6.28.12-source/tree/tree/src/TBranch.cxx	2024-09-18 13:49:29
@@ -350,7 +350,7 @@ void TBranch::Init(const char* name, const char* leafl
          }
          if (lenName == 0 || ctype == leafname) {
             Warning("TBranch","No name was given to the leaf number '%d' in the leaflist of the branch '%s'.",fNleaves,name);
-            snprintf(leafname,640,"__noname%d",fNleaves);
+            snprintf(leafname, len + 1, "__noname%d", fNleaves);
          }
          TLeaf* leaf = 0;
          if (leaftype[1] == '[' && !strchr(leaftype, ',')) {
diff -rupN --exclude=.git* root_v6.28.12_unpatched/root_v6.28.12-source/tutorials/CMakeLists.txt root_v6.28.12_patched/root_v6.28.12-source/tutorials/CMakeLists.txt
--- root_v6.28.12_unpatched/root_v6.28.12-source/tutorials/CMakeLists.txt	2024-09-18 13:23:16
+++ root_v6.28.12_patched/root_v6.28.12-source/tutorials/CMakeLists.txt	2024-09-18 13:49:29
@@ -145,6 +145,10 @@ else()
     if(CMAKE_SIZEOF_VOID_P EQUAL 8)
       list(APPEND roofit_veto roofit/rf409_NumPyPandasToRooFit.py)
     endif()
+    # The following tutorials are failing with this error:
+    # IncrementalExecutor::executeFunction: symbol '__std_find_trivial_4@12' unresolved while linking [cling interface function]!
+    # with Visual Studio v17.8
+    list(APPEND roofit_veto roofit/rf509_wsinteractive.C roofit/rf614_binned_fit_problems.C)
   endif()
 endif()
 
@@ -256,6 +260,12 @@ if(MSVC)
 if(MSVC)
   #---Multiproc is not supported on Windows
   set(imt_veto ${imt_veto} multicore/mp*.C multicore/mtbb201_parallelHistoFill.C)
+  if(NOT win_broken_tests)
+    # std::this_thread::sleep_for(std::chrono::duration<double, std::nano>(500));
+    # fails on Windows 32 bit and Visual Studio v17.9 with the following error:
+    # IncrementalExecutor::executeFunction: symbol '_Thrd_sleep_for@4' unresolved while linking [cling interface function]!
+    set(imt_veto ${imt_veto} multicore/mt201_parallelHistoFill.C)
+  endif()
 endif()
 
 if(ROOT_CLASSIC_BUILD)
@@ -287,15 +297,21 @@ else()
 if (NOT ROOT_tmva_FOUND)
   list(APPEND tmva_veto tmva/*.C tmva/*.py tmva/envelope/*.C tmva/keras/*.C tmva/keras/*.py tmva/pytorch/*.py )
 else()
+  # RBDT with xgboost is currently broken, disable all tutorials that use it
+  # See https://github.com/root-project/root/issues/15197
+  # TODO: Re-enable once fixed
+  list(APPEND tmva_veto tmva/tmva10[0-2]_*.py)
   #---These do not need to run for TMVA
   list(APPEND tmva_veto tmva/createData.C)
   if(MSVC AND NOT win_broken_tests)
     list(APPEND tmva_veto tmva/envelope/classification.C)
   endif()
   #these depends on external packages
-  find_python_module(torch QUIET)
-  find_python_module(keras QUIET)
-  find_python_module(sklearn QUIET)
+  if (tmva-pymva)
+    find_python_module(torch QUIET)
+    find_python_module(keras QUIET)
+    find_python_module(sklearn QUIET)
+  endif()
   if (NOT PY_KERAS_FOUND)
     list(APPEND tmva_veto tmva/TMVA_SOFIE_Keras.C)
     list(APPEND tmva_veto tmva/TMVA_SOFIE_Keras_HiggsModel.C)
@@ -305,6 +321,11 @@ else()
     list(APPEND tmva_veto tmva/TMVA_SOFIE_Inference.py)
     list(APPEND tmva_veto tmva/TMVA_SOFIE_RSofieReader.C)
   endif()
+  # The TMVA_SOFIE_RSofieReader test is disabled because it uses two differnt
+  # openblas versions via SOFIE and NumPy (indirectly from Keras) at the same
+  # time. This can cause crashes, for example on alma9.
+  # TODO: remove the next line once this problem is fixed.
+  list(APPEND tmva_veto tmva/TMVA_SOFIE_RSofieReader.C)
   if (NOT PY_SKLEARN_FOUND)
     list(APPEND tmva_veto tmva/TMVA_SOFIE_Models.py)
   endif()
@@ -560,19 +581,11 @@ set (tmva-tmva004_RStandardScaler-depends tutorial-tmv
 set (tmva-tmva102_Testing-depends tutorial-tmva-tmva101_Training-py)
 set (tmva-tmva003_RReader-depends tutorial-tmva-TMVAClassification)
 set (tmva-tmva004_RStandardScaler-depends tutorial-tmva-tmva003_RReader)
-if (PY_TORCH_FOUND)
-  set (tmva-pytorch-ApplicationClassificationPyTorch-depends tutorial-tmva-pytorch-ClassificationPyTorch-py)
-  set (tmva-pytorch-RegressionPyTorch-depends tutorial-tmva-pytorch-ApplicationClassificationPyTorch-py)
-  set (tmva-pytorch-ApplicationRegressionPyTorch-depends tutorial-tmva-pytorch-RegressionPyTorch-py)
-endif()
 if (PY_KERAS_FOUND)
   set (tmva-TMVA_SOFIE_Keras_HiggsModel-depends tutorial-tmva-TMVA_Higgs_Classification)
   set (tmva-TMVA_SOFIE_RDataFrame-depends tutorial-tmva-TMVA_SOFIE_Keras_HiggsModel)
   set (tmva-TMVA_SOFIE_RDataFrame_JIT-depends tutorial-tmva-TMVA_SOFIE_Keras_HiggsModel)
-  set (tmva-TMVA_SOFIE_Inference-depends tutorial-tmva-TMVA_Higgs_Classification)
-  set (tmva-TMVA_SOFIE_RSofieReader-depends tutorial-tmva-TMVA_Higgs_Classification)
-  set (tmva-keras-ApplicationRegressionKeras-depends tutorial-tmva-keras-RegressionKeras-py)
-  set (tmva-keras-ApplicationClassificationKeras-depends tutorial-tmva-keras-ClassificationKeras-py)
+  set (tmva-TMVA_SOFIE_RSofieReader-depends tutorial-tmva-TMVA_SOFIE_RDataFrame_JIT)
 endif()
 
 #--List long-running tutorials to label them as "longtest"
@@ -755,7 +768,7 @@ if(ROOT_pyroot_FOUND)
   endif()
 
   find_python_module(keras QUIET)
-  if(NOT PY_KERAS_FOUND)
+  if(NOT tmva-pymva OR NOT PY_KERAS_FOUND)
     file(GLOB tmva_veto_py RELATIVE ${CMAKE_CURRENT_SOURCE_DIR} tmva/keras/*.py)
     list(APPEND pyveto ${tmva_veto_py})
   elseif(ROOT_ARCHITECTURE MATCHES macosx)
@@ -766,7 +779,7 @@ if(ROOT_pyroot_FOUND)
   endif()
 
   find_python_module(torch QUIET)
-  if(NOT PY_TORCH_FOUND)
+  if(NOT tmva-pymva OR NOT PY_TORCH_FOUND)
     file(GLOB tmva_veto_py RELATIVE ${CMAKE_CURRENT_SOURCE_DIR} tmva/pytorch/*.py)
     list(APPEND pyveto ${tmva_veto_py})
   endif()
@@ -796,13 +809,22 @@ if(ROOT_pyroot_FOUND)
   set(pyroot-na49view-depends tutorial-pyroot-geometry-py)
   set(roofit-rf503_wspaceread-depends tutorial-roofit-rf502_wspacewrite-py)
 
-  # Avoid a race condition: make sure Python tutorial is ran after C++ tutorial
+  # Avoid a race condition: make sure Python tutorial is run after C++ tutorial
   set(roofit-rf104_classfactory-depends tutorial-roofit-rf104_classfactory)
   set(roofit-rf512_wsfactory_oper-depends tutorial-roofit-rf512_wsfactory_oper)
-  set (tmva-Higgs_CNN_Classification-depends tutorial-tmva-TMVA_Higgs_Classification)
+  set (tmva-TMVA_Higgs_Classification-depends tutorial-tmva-TMVA_Higgs_Classification)
   set (tmva-TMVA_CNN_Classification-depends tutorial-tmva-TMVA_CNN_Classification)
   set (tmva-TMVA_RNN_Classification-depends tutorial-tmva-TMVA_RNN_Classification)
-
+  if(PY_KERAS_FOUND)
+    set (tmva-TMVA_SOFIE_Inference-depends tutorial-tmva-TMVA_Higgs_Classification)
+    set (tmva-keras-ApplicationRegressionKeras-depends tutorial-tmva-keras-RegressionKeras-py)
+    set (tmva-keras-ApplicationClassificationKeras-depends tutorial-tmva-keras-ClassificationKeras-py)
+  endif()
+  if(PY_TORCH_FOUND)
+    set (tmva-pytorch-ApplicationClassificationPyTorch-depends tutorial-tmva-pytorch-ClassificationPyTorch-py)
+    set (tmva-pytorch-RegressionPyTorch-depends tutorial-tmva-pytorch-ApplicationClassificationPyTorch-py)
+    set (tmva-pytorch-ApplicationRegressionPyTorch-depends tutorial-tmva-pytorch-RegressionPyTorch-py)
+  endif()
   #----------------------------------------------------------------------
   # List requirements for python tutorials.
   # To add a new requirement, add a glob expression that's named requires_<packageName>,
diff -rupN --exclude=.git* root_v6.28.12_unpatched/root_v6.28.12-source/tutorials/roofit/rf614_binned_fit_problems.C root_v6.28.12_patched/root_v6.28.12-source/tutorials/roofit/rf614_binned_fit_problems.C
--- root_v6.28.12_unpatched/root_v6.28.12-source/tutorials/roofit/rf614_binned_fit_problems.C	2024-09-18 13:23:16
+++ root_v6.28.12_patched/root_v6.28.12-source/tutorials/roofit/rf614_binned_fit_problems.C	2024-09-18 13:49:29
@@ -105,7 +105,7 @@ void rf614_binned_fit_problems()
 
    // Let's not look at another example: a power law \f[x^a\f].
    RooRealVar a{"a", "a", -0.3, -5.0, 5.0};
-   RooPower powerlaw{"powerlaw", "powerlaw", x, RooConst(1.0), a};
+   RooGenericPdf powerlaw{"powerlaw", "std::pow(x, a)", {x, a}};
    std::unique_ptr<RooAbsData> powerlawData{generateBinnedAsimov(powerlaw, x, 10000)};
 
    // Again, if you do a vanilla fit, you'll get a bias
diff -rupN --exclude=.git* root_v6.28.12_unpatched/root_v6.28.12-source/tutorials/roofit/rf614_binned_fit_problems.py root_v6.28.12_patched/root_v6.28.12-source/tutorials/roofit/rf614_binned_fit_problems.py
--- root_v6.28.12_unpatched/root_v6.28.12-source/tutorials/roofit/rf614_binned_fit_problems.py	2024-09-18 13:23:16
+++ root_v6.28.12_patched/root_v6.28.12-source/tutorials/roofit/rf614_binned_fit_problems.py	2024-09-18 13:49:29
@@ -110,7 +110,7 @@ a = ROOT.RooRealVar("a", "a", -0.3, -5.0, 5.0)
 
 # Let's not look at another example: a power law \f[x^a\f].
 a = ROOT.RooRealVar("a", "a", -0.3, -5.0, 5.0)
-powerlaw = ROOT.RooPower("powerlaw", "powerlaw", x, ROOT.RooFit.RooConst(1.0), a)
+powerlaw = ROOT.RooGenericPdf("powerlaw", "std::pow(x, a)", [x, a]);
 powerlaw_data = generateBinnedAsimov(powerlaw, x, 10000)
 
 # Again, if you do a vanilla fit, you'll get a bias
diff -rupN --exclude=.git* root_v6.28.12_unpatched/root_v6.28.12-source/tutorials/tmva/TMVAClassification.C root_v6.28.12_patched/root_v6.28.12-source/tutorials/tmva/TMVAClassification.C
--- root_v6.28.12_unpatched/root_v6.28.12-source/tutorials/tmva/TMVAClassification.C	2024-09-18 13:23:16
+++ root_v6.28.12_patched/root_v6.28.12-source/tutorials/tmva/TMVAClassification.C	2024-09-18 13:49:29
@@ -13,7 +13,7 @@
 ///
 /// (note that the backslashes are mandatory)
 /// If no method given, a default set of classifiers is used.
-/// The output file "TMVA.root" can be analysed with the use of dedicated
+/// The output file "TMVAC.root" can be analysed with the use of dedicated
 /// macros (simply say: root -l <macro.C>), which can be conveniently
 /// invoked through a GUI that will appear at the end of the run of this macro.
 /// Launch the GUI via the command:
@@ -193,7 +193,7 @@ int TMVAClassification( TString myMethodList = "" )
    TTree *background     = (TTree*)input->Get("TreeB");
 
    // Create a ROOT output file where TMVA will store ntuples, histograms, etc.
-   TString outfileName( "TMVA.root" );
+   TString outfileName( "TMVAC.root" );
    TFile* outputFile = TFile::Open( outfileName, "RECREATE" );
 
    // Create the factory object. Later you can choose the methods
diff -rupN --exclude=.git* root_v6.28.12_unpatched/root_v6.28.12-source/tutorials/tmva/TMVAClassificationCategory.C root_v6.28.12_patched/root_v6.28.12-source/tutorials/tmva/TMVAClassificationCategory.C
--- root_v6.28.12_unpatched/root_v6.28.12-source/tutorials/tmva/TMVAClassificationCategory.C	2024-09-18 13:23:16
+++ root_v6.28.12_patched/root_v6.28.12-source/tutorials/tmva/TMVAClassificationCategory.C	2024-09-18 13:26:26
@@ -15,7 +15,7 @@
 ///
 ///     root -l TMVAClassificationCategory.C
 ///
-/// The output file "TMVA.root" can be analysed with the use of dedicated
+/// The output file "TMVACC.root" can be analysed with the use of dedicated
 /// macros (simply say: root -l <macro.C>), which can be conveniently
 /// invoked through a GUI that will appear at the end of the run of this macro.
 ///
@@ -60,7 +60,7 @@ void TMVAClassificationCategory()
    bool batchMode = false;
 
    // Create a new root output file.
-   TString outfileName( "TMVA.root" );
+   TString outfileName( "TMVACC.root" );
    TFile* outputFile = TFile::Open( outfileName, "RECREATE" );
 
    // Create the factory object (see TMVAClassification.C for more information)
diff -rupN --exclude=.git* root_v6.28.12_unpatched/root_v6.28.12-source/tutorials/tmva/TMVACrossValidation.C root_v6.28.12_patched/root_v6.28.12-source/tutorials/tmva/TMVACrossValidation.C
--- root_v6.28.12_unpatched/root_v6.28.12-source/tutorials/tmva/TMVACrossValidation.C	2024-09-18 13:23:16
+++ root_v6.28.12_patched/root_v6.28.12-source/tutorials/tmva/TMVACrossValidation.C	2024-09-18 13:49:29
@@ -7,13 +7,13 @@
 /// As input data is used a toy-MC sample consisting of two gaussian
 /// distributions.
 ///
-/// The output file "TMVA.root" can be analysed with the use of dedicated
+/// The output file "TMVACV.root" can be analysed with the use of dedicated
 /// macros (simply say: root -l <macro.C>), which can be conveniently
 /// invoked through a GUI that will appear at the end of the run of this macro.
 /// Launch the GUI via the command:
 ///
 /// ```
-/// root -l -e 'TMVA::TMVAGui("TMVA.root")'
+/// root -l -e 'TMVA::TMVAGui("TMVACV.root")'
 /// ```
 ///
 /// ## Cross Evaluation
@@ -121,7 +121,7 @@ int TMVACrossValidation(bool useRandomSplitting = fals
    TTree *bkgTree = genTree(1000, -1.0, 1.0, 101);
 
    // Create a ROOT output file where TMVA will store ntuples, histograms, etc.
-   TString outfileName("TMVA.root");
+   TString outfileName("TMVACV.root");
    TFile *outputFile = TFile::Open(outfileName, "RECREATE");
 
    // DataLoader definitions; We declare variables in the tree so that TMVA can
diff -rupN --exclude=.git* root_v6.28.12_unpatched/root_v6.28.12-source/tutorials/tmva/TMVACrossValidationRegression.C root_v6.28.12_patched/root_v6.28.12-source/tutorials/tmva/TMVACrossValidationRegression.C
--- root_v6.28.12_unpatched/root_v6.28.12-source/tutorials/tmva/TMVACrossValidationRegression.C	2024-09-18 13:23:16
+++ root_v6.28.12_patched/root_v6.28.12-source/tutorials/tmva/TMVACrossValidationRegression.C	2024-09-18 13:49:29
@@ -7,13 +7,13 @@
 /// As input data is used a toy-MC sample consisting of two gaussian
 /// distributions.
 ///
-/// The output file "TMVA.root" can be analysed with the use of dedicated
+/// The output file "TMVARegCv.root" can be analysed with the use of dedicated
 /// macros (simply say: root -l <macro.C>), which can be conveniently
 /// invoked through a GUI that will appear at the end of the run of this macro.
 /// Launch the GUI via the command:
 ///
 /// ```
-/// root -l -e 'TMVA::TMVAGui("TMVA.root")'
+/// root -l -e 'TMVA::TMVAGui("TMVARegCv.root")'
 /// ```
 ///
 /// ## Cross Evaluation
diff -rupN --exclude=.git* root_v6.28.12_unpatched/root_v6.28.12-source/tutorials/tmva/TMVA_CNN_Classification.C root_v6.28.12_patched/root_v6.28.12-source/tutorials/tmva/TMVA_CNN_Classification.C
--- root_v6.28.12_unpatched/root_v6.28.12-source/tutorials/tmva/TMVA_CNN_Classification.C	2024-09-18 13:23:16
+++ root_v6.28.12_patched/root_v6.28.12-source/tutorials/tmva/TMVA_CNN_Classification.C	2024-09-18 13:26:26
@@ -32,6 +32,7 @@ void MakeImagesTree(int n, int nh, int nw)
    // image size (nh x nw)
    const int ntot = nh * nw;
    const TString fileOutName = TString::Format("images_data_%dx%d.root", nh, nw);
+   TFile f(fileOutName, "RECREATE");
 
    const int nRndmEvts = 10000; // number of events we use to fill each image
    double delta_sigma = 0.1;    // 5% difference in the sigma
@@ -42,15 +43,15 @@ void MakeImagesTree(int n, int nh, int nw)
    double sX2 = sX1 + delta_sigma;
    double sY2 = sY1 - delta_sigma;
 
-   auto h1 = new TH2D("h1", "h1", nh, 0, 10, nw, 0, 10);
-   auto h2 = new TH2D("h2", "h2", nh, 0, 10, nw, 0, 10);
+   TH2D h1("h1", "h1", nh, 0, 10, nw, 0, 10);
+   TH2D h2("h2", "h2", nh, 0, 10, nw, 0, 10);
 
-   auto f1 = new TF2("f1", "xygaus");
-   auto f2 = new TF2("f2", "xygaus");
+   TF2 f1("f1", "xygaus");
+   TF2 f2("f2", "xygaus");
+
    TTree sgn("sig_tree", "signal_tree");
    TTree bkg("bkg_tree", "background_tree");
 
-   TFile f(fileOutName, "RECREATE");
 
    std::vector<float> x1(ntot);
    std::vector<float> x2(ntot);
@@ -69,30 +70,30 @@ void MakeImagesTree(int n, int nh, int nw)
    sgn.SetDirectory(&f);
    bkg.SetDirectory(&f);
 
-   f1->SetParameters(1, 5, sX1, 5, sY1);
-   f2->SetParameters(1, 5, sX2, 5, sY2);
+   f1.SetParameters(1, 5, sX1, 5, sY1);
+   f2.SetParameters(1, 5, sX2, 5, sY2);
    gRandom->SetSeed(0);
    std::cout << "Filling ROOT tree " << std::endl;
    for (int i = 0; i < n; ++i) {
       if (i % 1000 == 0)
          std::cout << "Generating image event ... " << i << std::endl;
-      h1->Reset();
-      h2->Reset();
+      h1.Reset();
+      h2.Reset();
       // generate random means in range [3,7] to be not too much on the border
-      f1->SetParameter(1, gRandom->Uniform(3, 7));
-      f1->SetParameter(3, gRandom->Uniform(3, 7));
-      f2->SetParameter(1, gRandom->Uniform(3, 7));
-      f2->SetParameter(3, gRandom->Uniform(3, 7));
+      f1.SetParameter(1, gRandom->Uniform(3, 7));
+      f1.SetParameter(3, gRandom->Uniform(3, 7));
+      f2.SetParameter(1, gRandom->Uniform(3, 7));
+      f2.SetParameter(3, gRandom->Uniform(3, 7));
 
-      h1->FillRandom("f1", nRndmEvts);
-      h2->FillRandom("f2", nRndmEvts);
+      h1.FillRandom("f1", nRndmEvts);
+      h2.FillRandom("f2", nRndmEvts);
 
       for (int k = 0; k < nh; ++k) {
          for (int l = 0; l < nw; ++l) {
             int m = k * nw + l;
             // add some noise in each bin
-            x1[m] = h1->GetBinContent(k + 1, l + 1) + gRandom->Gaus(0, pixelNoise);
-            x2[m] = h2->GetBinContent(k + 1, l + 1) + gRandom->Gaus(0, pixelNoise);
+            x1[m] = h1.GetBinContent(k + 1, l + 1) + gRandom->Gaus(0, pixelNoise);
+            x2[m] = h2.GetBinContent(k + 1, l + 1) + gRandom->Gaus(0, pixelNoise);
          }
       }
       sgn.Fill();
@@ -119,6 +120,16 @@ void TMVA_CNN_Classification(int nevts = 1000, std::ve
 void TMVA_CNN_Classification(int nevts = 1000, std::vector<bool> opt = {1, 1, 1, 1, 1})
 {
 
+   int imgSize = 16 * 16;
+   TString inputFileName = "images_data_16x16.root";
+
+   bool fileExist = !gSystem->AccessPathName(inputFileName);
+
+   // if file does not exists create it
+   if (!fileExist) {
+      MakeImagesTree(nevts, 16, 16);
+   }
+
    bool useTMVACNN = (opt.size() > 0) ? opt[0] : false;
    bool useKerasCNN = (opt.size() > 1) ? opt[1] : false;
    bool useTMVADNN = (opt.size() > 2) ? opt[2] : false;
@@ -202,7 +213,7 @@ void TMVA_CNN_Classification(int nevts = 1000, std::ve
 
    **/
 
-   TMVA::DataLoader *loader = new TMVA::DataLoader("dataset");
+   TMVA::DataLoader loader("dataset");
 
    /***
 
@@ -212,19 +223,7 @@ void TMVA_CNN_Classification(int nevts = 1000, std::ve
 
    **/
 
-   int imgSize = 16 * 16;
-   TString inputFileName = "images_data_16x16.root";
-
-   bool fileExist = !gSystem->AccessPathName(inputFileName);
-
-   // if file does not exists create it
-   if (!fileExist) {
-      MakeImagesTree(nevts, 16, 16);
-   }
-
-   // TString inputFileName = "tmva_class_example.root";
-
-   auto inputFile = TFile::Open(inputFileName);
+   std::unique_ptr<TFile> inputFile{TFile::Open(inputFileName)};
    if (!inputFile) {
       Error("TMVA_CNN_Classification", "Error opening input file %s - exit", inputFileName.Data());
       return;
@@ -232,9 +231,18 @@ void TMVA_CNN_Classification(int nevts = 1000, std::ve
 
    // --- Register the training and test trees
 
-   TTree *signalTree = (TTree *)inputFile->Get("sig_tree");
-   TTree *backgroundTree = (TTree *)inputFile->Get("bkg_tree");
+   auto signalTree = inputFile->Get<TTree>("sig_tree");
+   auto backgroundTree = inputFile->Get<TTree>("bkg_tree");
 
+   if (!signalTree) {
+      Error("TMVA_CNN_Classification", "Could not find signal tree in file '%s'", inputFileName.Data());
+      return;
+   }
+   if (!backgroundTree) {
+      Error("TMVA_CNN_Classification", "Could not find background tree in file '%s'", inputFileName.Data());
+      return;
+   }
+
    int nEventsSig = signalTree->GetEntries();
    int nEventsBkg = backgroundTree->GetEntries();
 
@@ -243,17 +251,17 @@ void TMVA_CNN_Classification(int nevts = 1000, std::ve
    Double_t backgroundWeight = 1.0;
 
    // You can add an arbitrary number of signal or background trees
-   loader->AddSignalTree(signalTree, signalWeight);
-   loader->AddBackgroundTree(backgroundTree, backgroundWeight);
+   loader.AddSignalTree(signalTree, signalWeight);
+   loader.AddBackgroundTree(backgroundTree, backgroundWeight);
 
    /// add event variables (image)
    /// use new method (from ROOT 6.20 to add a variable array for all image data)
-   loader->AddVariablesArray("vars", imgSize);
+   loader.AddVariablesArray("vars", imgSize);
 
    // Set individual event weights (the variables must exist in the original TTree)
    //    for signal    : factory->SetSignalWeightExpression    ("weight1*weight2");
    //    for background: factory->SetBackgroundWeightExpression("weight1*weight2");
-   // loader->SetBackgroundWeightExpression( "weight" );
+   // loader.SetBackgroundWeightExpression( "weight" );
 
    // Apply additional cuts on the signal and background samples (can be different)
    TCut mycuts = ""; // for example: TCut mycuts = "abs(var1)<0.5 && abs(var2-0.5)<1";
@@ -263,7 +271,7 @@ void TMVA_CNN_Classification(int nevts = 1000, std::ve
    //
    // If no numbers of events are given, half of the events in the tree are used
    // for training, and the other half for testing:
-   //    loader->PrepareTrainingAndTestTree( mycut, "SplitMode=random:!V" );
+   //    loader.PrepareTrainingAndTestTree( mycut, "SplitMode=random:!V" );
    // It is possible also to specify the number of training and testing events,
    // note we disable the computation of the correlation matrix of the input variables
 
@@ -275,7 +283,7 @@ void TMVA_CNN_Classification(int nevts = 1000, std::ve
       "nTrain_Signal=%d:nTrain_Background=%d:SplitMode=Random:SplitSeed=100:NormMode=NumEvents:!V:!CalcCorrelations",
       nTrainSig, nTrainBkg);
 
-   loader->PrepareTrainingAndTestTree(mycuts, mycutb, prepareOptions);
+   loader.PrepareTrainingAndTestTree(mycuts, mycutb, prepareOptions);
 
    /***
 
@@ -288,8 +296,6 @@ void TMVA_CNN_Classification(int nevts = 1000, std::ve
 
    **/
 
-   // signalTree->Print();
-
    /****
         # Booking Methods
 
@@ -299,7 +305,7 @@ void TMVA_CNN_Classification(int nevts = 1000, std::ve
 
    // Boosted Decision Trees
    if (useTMVABDT) {
-      factory.BookMethod(loader, TMVA::Types::kBDT, "BDT",
+      factory.BookMethod(&loader, TMVA::Types::kBDT, "BDT",
                          "!V:NTrees=200:MinNodeSize=2.5%:MaxDepth=2:BoostType=AdaBoost:AdaBoostBeta=0.5:"
                          "UseBaggedBoost:BaggedSampleFraction=0.5:SeparationType=GiniIndex:nCuts=20");
    }
@@ -346,7 +352,7 @@ void TMVA_CNN_Classification(int nevts = 1000, std::ve
       dnnOptions += ":Architecture=CPU";
 #endif
 
-      factory.BookMethod(loader, TMVA::Types::kDL, dnnMethodName, dnnOptions);
+      factory.BookMethod(&loader, TMVA::Types::kDL, dnnMethodName, dnnOptions);
    }
 
    /***
@@ -419,7 +425,7 @@ void TMVA_CNN_Classification(int nevts = 1000, std::ve
       cnnMethodName = "TMVA_CNN_CPU";
 #endif
 
-      factory.BookMethod(loader, TMVA::Types::kDL, cnnMethodName, cnnOptions);
+      factory.BookMethod(&loader, TMVA::Types::kDL, cnnMethodName, cnnOptions);
    }
 
    /**
@@ -427,6 +433,11 @@ void TMVA_CNN_Classification(int nevts = 1000, std::ve
 
    **/
 
+#ifdef R__HAS_PYMVA
+   // The next section uses Python packages, execute it only if PyMVA is available
+   TString tmva_python_exe{TMVA::Python_Executable()};
+   TString python_exe = tmva_python_exe.IsNull() ? "python" : tmva_python_exe;
+
    if (useKerasCNN) {
 
       Info("TMVA_CNN_Classification", "Building convolutional keras model");
@@ -457,8 +468,6 @@ void TMVA_CNN_Classification(int nevts = 1000, std::ve
 
       m.SaveSource("make_cnn_model.py");
       // execute
-      auto ret = (TString *)gROOT->ProcessLine("TMVA::Python_Executable()");
-      TString python_exe = (ret) ? *(ret) : "python";
       gSystem->Exec(python_exe + " make_cnn_model.py");
 
       if (gSystem->AccessPathName("model_cnn.h5")) {
@@ -467,7 +476,7 @@ void TMVA_CNN_Classification(int nevts = 1000, std::ve
          // book PyKeras method only if Keras model could be created
          Info("TMVA_CNN_Classification", "Booking tf.Keras CNN model");
          factory.BookMethod(
-            loader, TMVA::Types::kPyKeras, "PyKeras",
+            &loader, TMVA::Types::kPyKeras, "PyKeras",
             "H:!V:VarTransform=None:FilenameModel=model_cnn.h5:tf.keras:"
             "FilenameTrainedModel=trained_model_cnn.h5:NumEpochs=10:BatchSize=100:"
             "GpuOptions=allow_growth=True"); // needed for RTX NVidia card and to avoid TF allocates all GPU memory
@@ -478,9 +487,8 @@ void TMVA_CNN_Classification(int nevts = 1000, std::ve
 
       Info("TMVA_CNN_Classification", "Using Convolutional PyTorch Model");
       TString pyTorchFileName = gROOT->GetTutorialDir() + TString("/tmva/PyTorch_Generate_CNN_Model.py");
-      // check that pytorch can be imported and file defining the model and used later when booking the method is existing
-      auto ret = (TString *)gROOT->ProcessLine("TMVA::Python_Executable()");
-      TString python_exe = (ret) ? *(ret) : "python";
+      // check that pytorch can be imported and file defining the model and used later when booking the method is
+      // existing
       if (gSystem->Exec(python_exe + " -c 'import torch'") || gSystem->AccessPathName(pyTorchFileName)) {
          Warning("TMVA_CNN_Classification", "PyTorch is not installed or model building file is not existing - skip using PyTorch");
       } else {
@@ -489,11 +497,11 @@ void TMVA_CNN_Classification(int nevts = 1000, std::ve
          TString methodOpt = "H:!V:VarTransform=None:FilenameModel=PyTorchModelCNN.pt:"
                              "FilenameTrainedModel=PyTorchTrainedModelCNN.pt:NumEpochs=10:BatchSize=100";
          methodOpt += TString(":UserCode=") + pyTorchFileName;
-         factory.BookMethod(loader, TMVA::Types::kPyTorch, "PyTorch", methodOpt);
+         factory.BookMethod(&loader, TMVA::Types::kPyTorch, "PyTorch", methodOpt);
       }
    }
+#endif
 
-
    ////  ## Train Methods
 
    factory.TrainAllMethods();
@@ -506,7 +514,7 @@ void TMVA_CNN_Classification(int nevts = 1000, std::ve
 
    /// ## Plot ROC Curve
 
-   auto c1 = factory.GetROCCurve(loader);
+   auto c1 = factory.GetROCCurve(&loader);
    c1->Draw();
 
    // close outputfile to save output file
diff -rupN --exclude=.git* root_v6.28.12_unpatched/root_v6.28.12-source/tutorials/tmva/TMVA_CNN_Classification.py root_v6.28.12_patched/root_v6.28.12-source/tutorials/tmva/TMVA_CNN_Classification.py
--- root_v6.28.12_unpatched/root_v6.28.12-source/tutorials/tmva/TMVA_CNN_Classification.py	2024-09-18 13:23:16
+++ root_v6.28.12_patched/root_v6.28.12-source/tutorials/tmva/TMVA_CNN_Classification.py	2024-09-18 13:49:29
@@ -22,7 +22,34 @@
 ## The difference between signal and background is in the gaussian width.
 ## The width for the background gaussian is slightly larger than the signal width by few % values
 
+import os
+import importlib.util
 
+opt = [1, 1, 1, 1, 1]
+useTMVACNN = opt[0] if len(opt) > 0  else False
+useKerasCNN = opt[1] if len(opt) > 1 else False
+useTMVADNN = opt[2] if len(opt) > 2 else False
+useTMVABDT = opt[3] if len(opt) > 3 else False
+usePyTorchCNN = opt[4] if len(opt) > 4 else False
+
+tf_spec = importlib.util.find_spec("tensorflow")
+if tf_spec is None:
+    useKerasCNN = False
+    print("TMVA_CNN_Classificaton","Skip using Keras since tensorflow is not installed")
+else:
+    import tensorflow
+
+# PyTorch has to be imported before ROOT to avoid crashes because of clashing
+# std::regexp symbols that are exported by cppyy.
+# See also: https://github.com/wlav/cppyy/issues/227
+torch_spec = importlib.util.find_spec("torch")
+if torch_spec is None:
+    usePyTorchCNN = False
+    print("TMVA_CNN_Classificaton","Skip using PyTorch since torch is not installed")
+else:
+    import torch
+
+
 import ROOT
 
 #switch off MT in OpenMP (BLAS)
@@ -30,10 +57,6 @@ TFile = ROOT.TFile
 TMVA = ROOT.TMVA
 TFile = ROOT.TFile
 
-
-import os
-import importlib
-
 TMVA.Tools.Instance()
 
 def MakeImagesTree(n, nh, nw):
@@ -108,12 +131,6 @@ nevt = 1000    # use a larger value to get better resu
 hasCPU = "tmva-cpu" in ROOT.gROOT.GetConfigFeatures()
 
 nevt = 1000    # use a larger value to get better results
-opt = [1, 1, 1, 1, 1]
-useTMVACNN = opt[0] if len(opt) > 0  else False
-useKerasCNN = opt[1] if len(opt) > 1 else False
-useTMVADNN = opt[2] if len(opt) > 2 else False
-useTMVABDT = opt[3] if len(opt) > 3 else False
-usePyTorchCNN = opt[4] if len(opt) > 4 else False
 
 if (not hasCPU and not hasGPU) :
     ROOT.Warning("TMVA_CNN_Classificaton","ROOT is not supporting tmva-cpu and tmva-gpu skip using TMVA-DNN and TMVA-CNN")
@@ -125,16 +142,6 @@ else:
     usePyTorchCNN = False
 else:
     TMVA.PyMethodBase.PyInitialize()
-
-tf_spec = importlib.util.find_spec("tensorflow")
-if tf_spec is None:
-    useKerasCNN = False
-    ROOT.Warning("TMVA_CNN_Classificaton","Skip using Keras since tensorflow is not installed")
-
-torch_spec = importlib.util.find_spec("torch")
-if torch_spec is None:
-    usePyTorchCNN = False
-    ROOT.Warning("TMVA_CNN_Classificaton","Skip using PyTorch since torch is not installed")
 
 if not useTMVACNN:
     ROOT.Warning(
diff -rupN --exclude=.git* root_v6.28.12_unpatched/root_v6.28.12-source/tutorials/tmva/TMVA_RNN_Classification.C root_v6.28.12_patched/root_v6.28.12-source/tutorials/tmva/TMVA_RNN_Classification.C
--- root_v6.28.12_unpatched/root_v6.28.12-source/tutorials/tmva/TMVA_RNN_Classification.C	2024-09-18 13:23:16
+++ root_v6.28.12_patched/root_v6.28.12-source/tutorials/tmva/TMVA_RNN_Classification.C	2024-09-18 13:26:26
@@ -55,9 +55,9 @@ void MakeTimeData(int n, int ntime, int ndim )
    auto f1 = new TF1("f1", "gaus");
    auto f2 = new TF1("f2", "gaus");
 
+   TFile f(fname, "RECREATE");
    TTree sgn("sgn", "sgn");
    TTree bkg("bkg", "bkg");
-   TFile f(fname, "RECREATE");
 
    std::vector<std::vector<float>> x1(ntime);
    std::vector<std::vector<float>> x2(ntime);
@@ -192,8 +192,10 @@ void TMVA_RNN_Classification(int nevts = 2000, int use
 #endif
 
 #ifdef R__USE_IMT
-   int num_threads = 4;   // use by default all threads
-   gSystem->Setenv("OMP_NUM_THREADS", "1"); // switch off MT in OpenBLAS
+   int num_threads = 4; // use max 4 threads
+   // switch off MT in OpenBLAS to avoid conflict with tbb
+   gSystem->Setenv("OMP_NUM_THREADS", "1");
+
    // do enable MT running
    if (num_threads >= 0) {
       ROOT::EnableImplicitMT(num_threads);
diff -rupN --exclude=.git* root_v6.28.12_unpatched/root_v6.28.12-source/tutorials/tmva/TMVA_SOFIE_Inference.py root_v6.28.12_patched/root_v6.28.12-source/tutorials/tmva/TMVA_SOFIE_Inference.py
--- root_v6.28.12_unpatched/root_v6.28.12-source/tutorials/tmva/TMVA_SOFIE_Inference.py	2024-09-18 13:23:16
+++ root_v6.28.12_patched/root_v6.28.12-source/tutorials/tmva/TMVA_SOFIE_Inference.py	2024-09-18 13:49:29
@@ -31,7 +31,7 @@ model = ROOT.TMVA.Experimental.SOFIE.PyKeras.Parse(mod
 # parse the input Keras model into RModel object
 model = ROOT.TMVA.Experimental.SOFIE.PyKeras.Parse(modelFile)
 
-generatedHeaderFile = modelFile.replace(".h5",".hxx")
+generatedHeaderFile = "generatedSofieHiggsModel.hxx" #modelFile.replace(".h5",".hxx")
 print("Generating inference code for the Keras model from ",modelFile,"in the header ", generatedHeaderFile)
 #Generating inference code
 model.Generate()
@@ -44,7 +44,6 @@ ROOT.gInterpreter.Declare('#include "' + generatedHead
 ROOT.gInterpreter.Declare('#include "' + generatedHeaderFile + '"')
 
 
-generatedHeaderFile = modelFile.replace(".h5",".hxx")
 print("Generating inference code for the Keras model from ",modelFile,"in the header ", generatedHeaderFile)
 #Generating inference
 
@@ -67,7 +66,7 @@ print("size of data", dataset_size)
 print("size of data", dataset_size)
 
 #instantiate SOFIE session class 
-session = ROOT.TMVA_SOFIE_Higgs_trained_model.Session()
+session = ROOT.TMVA_SOFIE_Higgs_trained_model.Session("generatedSofieHiggsModel.dat")
 
 hs = ROOT.TH1D("hs","Signal result",100,0,1)
 for i in range(0,dataset_size):
diff -rupN --exclude=.git* root_v6.28.12_unpatched/root_v6.28.12-source/tutorials/tmva/TMVA_SOFIE_RDataFrame.py root_v6.28.12_patched/root_v6.28.12-source/tutorials/tmva/TMVA_SOFIE_RDataFrame.py
--- root_v6.28.12_unpatched/root_v6.28.12-source/tutorials/tmva/TMVA_SOFIE_RDataFrame.py	2024-09-18 13:23:16
+++ root_v6.28.12_patched/root_v6.28.12-source/tutorials/tmva/TMVA_SOFIE_RDataFrame.py	2024-09-18 13:49:29
@@ -27,14 +27,14 @@ model.Generate()
 
 # generating inference code
 model.Generate()
-model.OutputGenerated("Higgs_trained_model.hxx")
+model.OutputGenerated("Higgs_generated_Sofie_model.hxx")
 model.PrintGenerated()
 
 # compile using ROOT JIT trained model
 print("compiling SOFIE model and functor....")
-ROOT.gInterpreter.Declare('#include "Higgs_trained_model.hxx"')
+ROOT.gInterpreter.Declare('#include "Higgs_generated_Sofie_model.hxx"')
 modelName = "Higgs_trained_model"
-ROOT.gInterpreter.Declare('auto sofie_functor = TMVA::Experimental::SofieFunctor<7,TMVA_SOFIE_'+modelName+'::Session>(0);')
+ROOT.gInterpreter.Declare('auto sofie_functor = TMVA::Experimental::SofieFunctor<7,TMVA_SOFIE_'+modelName+'::Session>(0,"Higgs_generated_Sofie_model.dat");')
 
 # run inference over input data
 inputFile = "http://root.cern/files/Higgs_data.root"
diff -rupN --exclude=.git* root_v6.28.12_unpatched/root_v6.28.12-source/tutorials/tmva/keras/ApplicationClassificationKeras.py root_v6.28.12_patched/root_v6.28.12-source/tutorials/tmva/keras/ApplicationClassificationKeras.py
--- root_v6.28.12_unpatched/root_v6.28.12-source/tutorials/tmva/keras/ApplicationClassificationKeras.py	2024-09-18 13:23:16
+++ root_v6.28.12_patched/root_v6.28.12-source/tutorials/tmva/keras/ApplicationClassificationKeras.py	2024-09-18 13:49:29
@@ -20,10 +20,11 @@ reader = TMVA.Reader("Color:!Silent")
 reader = TMVA.Reader("Color:!Silent")
 
 # Load data
-if not isfile('tmva_class_example.root'):
-    call(['curl', '-L', '-O', 'http://root.cern.ch/files/tmva_class_example.root'])
+TFile.SetCacheFileDir(".")
+data = TFile.Open("http://root.cern.ch/files/tmva_class_example.root", "CACHEREAD");
+if data is None:
+    raise FileNotFoundError("Input file cannot be downloaded - exit")
 
-data = TFile.Open('tmva_class_example.root')
 signal = data.Get('TreeS')
 background = data.Get('TreeB')
 
diff -rupN --exclude=.git* root_v6.28.12_unpatched/root_v6.28.12-source/tutorials/tmva/keras/ApplicationRegressionKeras.py root_v6.28.12_patched/root_v6.28.12-source/tutorials/tmva/keras/ApplicationRegressionKeras.py
--- root_v6.28.12_unpatched/root_v6.28.12-source/tutorials/tmva/keras/ApplicationRegressionKeras.py	2024-09-18 13:23:16
+++ root_v6.28.12_patched/root_v6.28.12-source/tutorials/tmva/keras/ApplicationRegressionKeras.py	2024-09-18 13:49:29
@@ -20,10 +20,11 @@ reader = TMVA.Reader("Color:!Silent")
 reader = TMVA.Reader("Color:!Silent")
 
 # Load data
-if not isfile('tmva_reg_example.root'):
-    call(['curl', '-L', '-O', 'http://root.cern.ch/files/tmva_reg_example.root'])
+TFile.SetCacheFileDir(".")
+data = TFile.Open("http://root.cern.ch/files/tmva_reg_example.root", "CACHEREAD")
+if data is None:
+    raise FileNotFoundError("Input file cannot be downloaded - exit")
 
-data = TFile.Open('tmva_reg_example.root')
 tree = data.Get('TreeR')
 
 branches = {}
diff -rupN --exclude=.git* root_v6.28.12_unpatched/root_v6.28.12-source/tutorials/tmva/keras/ClassificationKeras.py root_v6.28.12_patched/root_v6.28.12-source/tutorials/tmva/keras/ClassificationKeras.py
--- root_v6.28.12_unpatched/root_v6.28.12-source/tutorials/tmva/keras/ClassificationKeras.py	2024-09-18 13:23:16
+++ root_v6.28.12_patched/root_v6.28.12-source/tutorials/tmva/keras/ClassificationKeras.py	2024-09-18 13:49:29
@@ -22,15 +22,15 @@ TMVA.PyMethodBase.PyInitialize()
 TMVA.Tools.Instance()
 TMVA.PyMethodBase.PyInitialize()
 
-output = TFile.Open('TMVA.root', 'RECREATE')
+output = TFile.Open('TMVA_Classification_Keras..root', 'RECREATE')
 factory = TMVA.Factory('TMVAClassification', output,
                        '!V:!Silent:Color:DrawProgressBar:Transformations=D,G:AnalysisType=Classification')
 
 # Load data
-if not isfile('tmva_class_example.root'):
-    call(['curl', '-L', '-O', 'http://root.cern.ch/files/tmva_class_example.root'])
-
-data = TFile.Open('tmva_class_example.root')
+TFile.SetCacheFileDir(".")
+data = TFile.Open("http://root.cern.ch/files/tmva_class_example.root", "CACHEREAD")
+if data is None:
+    raise FileNotFoundError("Input file cannot be downloaded - exit")
 signal = data.Get('TreeS')
 background = data.Get('TreeB')
 
diff -rupN --exclude=.git* root_v6.28.12_unpatched/root_v6.28.12-source/tutorials/tmva/keras/MulticlassKeras.py root_v6.28.12_patched/root_v6.28.12-source/tutorials/tmva/keras/MulticlassKeras.py
--- root_v6.28.12_unpatched/root_v6.28.12-source/tutorials/tmva/keras/MulticlassKeras.py	2024-09-18 13:23:16
+++ root_v6.28.12_patched/root_v6.28.12-source/tutorials/tmva/keras/MulticlassKeras.py	2024-09-18 13:49:29
@@ -21,7 +21,7 @@ TMVA.PyMethodBase.PyInitialize()
 TMVA.Tools.Instance()
 TMVA.PyMethodBase.PyInitialize()
 
-output = TFile.Open('TMVA.root', 'RECREATE')
+output = TFile.Open('TMVA_multiclass.root', 'RECREATE')
 factory = TMVA.Factory('TMVAClassification', output,
     '!V:!Silent:Color:DrawProgressBar:Transformations=D,G:AnalysisType=multiclass')
 
diff -rupN --exclude=.git* root_v6.28.12_unpatched/root_v6.28.12-source/tutorials/tmva/keras/RegressionKeras.py root_v6.28.12_patched/root_v6.28.12-source/tutorials/tmva/keras/RegressionKeras.py
--- root_v6.28.12_unpatched/root_v6.28.12-source/tutorials/tmva/keras/RegressionKeras.py	2024-09-18 13:23:16
+++ root_v6.28.12_patched/root_v6.28.12-source/tutorials/tmva/keras/RegressionKeras.py	2024-09-18 13:49:29
@@ -22,15 +22,16 @@ TMVA.PyMethodBase.PyInitialize()
 TMVA.Tools.Instance()
 TMVA.PyMethodBase.PyInitialize()
 
-output = TFile.Open('TMVA.root', 'RECREATE')
+output = TFile.Open('TMVA_Regression_Keras.root', 'RECREATE')
 factory = TMVA.Factory('TMVARegression', output,
         '!V:!Silent:Color:DrawProgressBar:Transformations=D,G:AnalysisType=Regression')
 
 # Load data
-if not isfile('tmva_reg_example.root'):
-    call(['curl', '-L', '-O', 'http://root.cern.ch/files/tmva_reg_example.root'])
+TFile.SetCacheFileDir(".")
+data = TFile.Open("http://root.cern.ch/files/tmva_reg_example.root", "CACHEREAD")
+if data is None:
+    raise FileNotFoundError("Input file cannot be downloaded - exit")
 
-data = TFile.Open('tmva_reg_example.root')
 tree = data.Get('TreeR')
 
 dataloader = TMVA.DataLoader('dataset')
diff -rupN --exclude=.git* root_v6.28.12_unpatched/root_v6.28.12-source/tutorials/tmva/pytorch/ApplicationClassificationPyTorch.py root_v6.28.12_patched/root_v6.28.12-source/tutorials/tmva/pytorch/ApplicationClassificationPyTorch.py
--- root_v6.28.12_unpatched/root_v6.28.12-source/tutorials/tmva/pytorch/ApplicationClassificationPyTorch.py	2024-09-18 13:23:16
+++ root_v6.28.12_patched/root_v6.28.12-source/tutorials/tmva/pytorch/ApplicationClassificationPyTorch.py	2024-09-18 13:49:29
@@ -10,6 +10,11 @@
 ## \author Anirudh Dagar <anirudhdagar6@gmail.com> - IIT, Roorkee
 
 
+# PyTorch has to be imported before ROOT to avoid crashes because of clashing
+# std::regexp symbols that are exported by cppyy.
+# See also: https://github.com/wlav/cppyy/issues/227
+import torch
+
 from ROOT import TMVA, TFile, TString
 from array import array
 from subprocess import call
@@ -23,10 +28,11 @@ reader = TMVA.Reader("Color:!Silent")
 
 
 # Load data
-if not isfile('tmva_class_example.root'):
-    call(['curl', '-L', '-O', 'http://root.cern.ch/files/tmva_class_example.root'])
+TFile.SetCacheFileDir(".")
+data = TFile.Open("http://root.cern.ch/files/tmva_class_example.root", "CACHEREAD")
+if data is None:
+    raise FileNotFoundError("Input file cannot be downloaded - exit")
 
-data = TFile.Open('tmva_class_example.root')
 signal = data.Get('TreeS')
 background = data.Get('TreeB')
 
@@ -43,7 +49,7 @@ def predict(model, test_X, batch_size=32):
 def predict(model, test_X, batch_size=32):
     # Set to eval mode
     model.eval()
-   
+
     test_dataset = torch.utils.data.TensorDataset(torch.Tensor(test_X))
     test_loader = torch.utils.data.DataLoader(test_dataset, batch_size=batch_size, shuffle=False)
 
@@ -54,7 +60,7 @@ def predict(model, test_X, batch_size=32):
             outputs = model(X)
             predictions.append(outputs)
         preds = torch.cat(predictions)
-   
+
     return preds.numpy()
 
 
diff -rupN --exclude=.git* root_v6.28.12_unpatched/root_v6.28.12-source/tutorials/tmva/pytorch/ApplicationRegressionPyTorch.py root_v6.28.12_patched/root_v6.28.12-source/tutorials/tmva/pytorch/ApplicationRegressionPyTorch.py
--- root_v6.28.12_unpatched/root_v6.28.12-source/tutorials/tmva/pytorch/ApplicationRegressionPyTorch.py	2024-09-18 13:23:16
+++ root_v6.28.12_patched/root_v6.28.12-source/tutorials/tmva/pytorch/ApplicationRegressionPyTorch.py	2024-09-18 13:49:29
@@ -10,6 +10,11 @@
 ## \author Anirudh Dagar <anirudhdagar6@gmail.com> - IIT, Roorkee
 
 
+# PyTorch has to be imported before ROOT to avoid crashes because of clashing
+# std::regexp symbols that are exported by cppyy.
+# See also: https://github.com/wlav/cppyy/issues/227
+import torch
+
 from ROOT import TMVA, TFile, TString
 from array import array
 from subprocess import call
@@ -23,10 +28,11 @@ reader = TMVA.Reader("Color:!Silent")
 
 
 # Load data
-if not isfile('tmva_reg_example.root'):
-    call(['curl', '-L', '-O', 'http://root.cern.ch/files/tmva_reg_example.root'])
+TFile.SetCacheFileDir(".")
+data = TFile.Open("http://root.cern.ch/files/tmva_reg_example.root", "CACHEREAD")
+if data is None:
+    raise FileNotFoundError("Input file cannot be downloaded - exit")
 
-data = TFile.Open('tmva_reg_example.root')
 tree = data.Get('TreeR')
 
 branches = {}
@@ -46,7 +52,7 @@ def predict(model, test_X, batch_size=32):
 def predict(model, test_X, batch_size=32):
     # Set to eval mode
     model.eval()
-   
+
     test_dataset = torch.utils.data.TensorDataset(torch.Tensor(test_X))
     test_loader = torch.utils.data.DataLoader(test_dataset, batch_size=batch_size, shuffle=False)
 
@@ -57,7 +63,7 @@ def predict(model, test_X, batch_size=32):
             outputs = model(X)
             predictions.append(outputs)
         preds = torch.cat(predictions)
-   
+
     return preds.numpy()
 
 load_model_custom_objects = {"optimizer": None, "criterion": None, "train_func": None, "predict_func": predict}
diff -rupN --exclude=.git* root_v6.28.12_unpatched/root_v6.28.12-source/tutorials/tmva/pytorch/ClassificationPyTorch.py root_v6.28.12_patched/root_v6.28.12-source/tutorials/tmva/pytorch/ClassificationPyTorch.py
--- root_v6.28.12_unpatched/root_v6.28.12-source/tutorials/tmva/pytorch/ClassificationPyTorch.py	2024-09-18 13:23:16
+++ root_v6.28.12_patched/root_v6.28.12-source/tutorials/tmva/pytorch/ClassificationPyTorch.py	2024-09-18 13:49:29
@@ -11,28 +11,32 @@
 ## \author Anirudh Dagar <anirudhdagar6@gmail.com> - IIT, Roorkee
 
 
+# PyTorch has to be imported before ROOT to avoid crashes because of clashing
+# std::regexp symbols that are exported by cppyy.
+# See also: https://github.com/wlav/cppyy/issues/227
+import torch
+from torch import nn
+
 from ROOT import TMVA, TFile, TTree, TCut
 from subprocess import call
 from os.path import isfile
 
-import torch
-from torch import nn
 
-
 # Setup TMVA
 TMVA.Tools.Instance()
 TMVA.PyMethodBase.PyInitialize()
 
-output = TFile.Open('TMVA.root', 'RECREATE')
-factory = TMVA.Factory('TMVAClassification', output,
+# create factory without output file since it is not needed
+factory = TMVA.Factory('TMVAClassification',
                        '!V:!Silent:Color:DrawProgressBar:Transformations=D,G:AnalysisType=Classification')
 
 
 # Load data
-if not isfile('tmva_class_example.root'):
-    call(['curl', '-L', '-O', 'http://root.cern.ch/files/tmva_class_example.root'])
+TFile.SetCacheFileDir(".")
+data = TFile.Open("http://root.cern.ch/files/tmva_class_example.root", "CACHEREAD")
+if data is None:
+    raise FileNotFoundError("Input file cannot be downloaded - exit")
 
-data = TFile.Open('tmva_class_example.root')
 signal = data.Get('TreeS')
 background = data.Get('TreeB')
 
diff -rupN --exclude=.git* root_v6.28.12_unpatched/root_v6.28.12-source/tutorials/tmva/pytorch/MulticlassPyTorch.py root_v6.28.12_patched/root_v6.28.12-source/tutorials/tmva/pytorch/MulticlassPyTorch.py
--- root_v6.28.12_unpatched/root_v6.28.12-source/tutorials/tmva/pytorch/MulticlassPyTorch.py	2024-09-18 13:23:16
+++ root_v6.28.12_patched/root_v6.28.12-source/tutorials/tmva/pytorch/MulticlassPyTorch.py	2024-09-18 13:26:26
@@ -11,19 +11,22 @@
 ## \author Anirudh Dagar <anirudhdagar6@gmail.com> - IIT, Roorkee
 
 
-from ROOT import TMVA, TFile, TTree, TCut, gROOT
-from os.path import isfile
-
+# PyTorch has to be imported before ROOT to avoid crashes because of clashing
+# std::regexp symbols that are exported by cppyy.
+# See also: https://github.com/wlav/cppyy/issues/227
 import torch
 from torch import nn
 
+from ROOT import TMVA, TFile, TTree, TCut, gROOT
+from os.path import isfile
 
+
 # Setup TMVA
 TMVA.Tools.Instance()
 TMVA.PyMethodBase.PyInitialize()
 
-output = TFile.Open('TMVA.root', 'RECREATE')
-factory = TMVA.Factory('TMVAClassification', output,
+# create factory without output file since it is not needed
+factory = TMVA.Factory('TMVAClassification',
     '!V:!Silent:Color:DrawProgressBar:Transformations=D,G:AnalysisType=multiclass')
 
 
@@ -163,4 +166,4 @@ roc = factory.GetROCCurve(dataloader)
 
 # Plot ROC Curves
 roc = factory.GetROCCurve(dataloader)
-roc.SaveAs('ROC_MulticlassPyTorch.png')
\ No newline at end of file
+roc.SaveAs('ROC_MulticlassPyTorch.png')
diff -rupN --exclude=.git* root_v6.28.12_unpatched/root_v6.28.12-source/tutorials/tmva/pytorch/RegressionPyTorch.py root_v6.28.12_patched/root_v6.28.12-source/tutorials/tmva/pytorch/RegressionPyTorch.py
--- root_v6.28.12_unpatched/root_v6.28.12-source/tutorials/tmva/pytorch/RegressionPyTorch.py	2024-09-18 13:23:16
+++ root_v6.28.12_patched/root_v6.28.12-source/tutorials/tmva/pytorch/RegressionPyTorch.py	2024-09-18 13:49:29
@@ -11,28 +11,32 @@
 ## \author Anirudh Dagar <anirudhdagar6@gmail.com> - IIT, Roorkee
 
 
+# PyTorch has to be imported before ROOT to avoid crashes because of clashing
+# std::regexp symbols that are exported by cppyy.
+# See also: https://github.com/wlav/cppyy/issues/227
+import torch
+from torch import nn
+
 from ROOT import TMVA, TFile, TTree, TCut
 from subprocess import call
 from os.path import isfile
 
-import torch
-from torch import nn
 
-
 # Setup TMVA
 TMVA.Tools.Instance()
 TMVA.PyMethodBase.PyInitialize()
 
-output = TFile.Open('TMVA.root', 'RECREATE')
-factory = TMVA.Factory('TMVARegression', output,
+# create factory without output file since it is not needed
+factory = TMVA.Factory('TMVARegression',
         '!V:!Silent:Color:DrawProgressBar:Transformations=D,G:AnalysisType=Regression')
 
 
 # Load data
-if not isfile('tmva_reg_example.root'):
-    call(['curl', '-L', '-O', 'http://root.cern.ch/files/tmva_reg_example.root'])
+TFile.SetCacheFileDir(".")
+data = TFile.Open("http://root.cern.ch/files/tmva_reg_example.root", "CACHEREAD")
+if data is None:
+    raise FileNotFoundError("Input file cannot be downloaded - exit")
 
-data = TFile.Open('tmva_reg_example.root')
 tree = data.Get('TreeR')
 
 dataloader = TMVA.DataLoader('dataset')
diff -rupN --exclude=.git* root_v6.28.12_unpatched/root_v6.28.12-source/tutorials/tmva/tmva003_RReader.C root_v6.28.12_patched/root_v6.28.12-source/tutorials/tmva/tmva003_RReader.C
--- root_v6.28.12_unpatched/root_v6.28.12-source/tutorials/tmva/tmva003_RReader.C	2024-09-18 13:23:16
+++ root_v6.28.12_patched/root_v6.28.12-source/tutorials/tmva/tmva003_RReader.C	2024-09-18 13:49:29
@@ -15,7 +15,7 @@ void train(const std::string &filename)
 void train(const std::string &filename)
 {
    // Create factory
-   auto output = TFile::Open("TMVA.root", "RECREATE");
+   auto output = TFile::Open("TMVARR.root", "RECREATE");
    auto factory = new TMVA::Factory("tmva003",
            output, "!V:!DrawProgressBar:AnalysisType=Classification");
 
diff -rupN --exclude=.git* root_v6.28.12_unpatched/root_v6.28.12-source/tutorials/tmva/tmva101_Training.py root_v6.28.12_patched/root_v6.28.12-source/tutorials/tmva/tmva101_Training.py
--- root_v6.28.12_unpatched/root_v6.28.12-source/tutorials/tmva/tmva101_Training.py	2024-09-18 13:23:16
+++ root_v6.28.12_patched/root_v6.28.12-source/tutorials/tmva/tmva101_Training.py	2024-09-18 13:26:26
@@ -12,9 +12,13 @@
 ## \date August 2019
 ## \author Stefan Wunsch
 
+# XGBoost has to be imported before ROOT to avoid crashes because of clashing
+# std::regexp symbols that are exported by cppyy.
+# See also: https://github.com/wlav/cppyy/issues/227
+from xgboost import XGBClassifier
+
 import ROOT
 import numpy as np
-import pickle
 
 from tmva100_DataPreparation import variables
 
@@ -45,7 +49,6 @@ if __name__ == "__main__":
     x, y, w = load_data("train_signal.root", "train_background.root")
 
     # Fit xgboost model
-    from xgboost import XGBClassifier
     bdt = XGBClassifier(max_depth=3, n_estimators=500)
     bdt.fit(x, y, sample_weight=w)
 
