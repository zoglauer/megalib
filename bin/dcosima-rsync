#!/bin/bash

# Part of the dmegalib distributed computation scripts
# rsync data back to the main server


# Show help
commandhelp() {
  echo ""
  echo "dcosima-rsync - rsync all files back";
  echo "Copyright by Andreas Zoglauer"
  echo ""
  echo "Usage: dcosima-rsync [options]";
  echo ""
  echo "Options:"
  echo "  --directory=[directory name]: The directory where to store the data"
  echo "  --instances=[number]: The number of total expected sim/tra files (may be larger than the instances)"
  echo "  --parallel=[number]: The maximum number of parallel rsync's (default: 2)"
  echo "  --sleep=[seconds]: Sleep time between rsync loops (default: 20 seconds, max: 1000 seconds)"
  echo "  --log: Log debug output"
  echo "  --help: Show this help."
  echo ""
  echo "";
  echo "Example: "
  echo "  dcosima-rsync --dir=Run_ID87236489726";
  echo "";
}


# Sync all data
sync() {
  # Parse the configuration file
  RSYNCS=( )
  while read LINE; do
    #echo "Line: ${LINE}"
    RSYNCS[${#RSYNCS[*]}]=${LINE}
  done < dcosima-rsync.cfg

  #echo "Found the following rsyncs: ${RSYNCS[@]}"

  # Download all data
  for (( m=0; m<=$(( ${#RSYNCS[*]} -1 )); m++ )); do
    #echo "psync: Checking ${RSYNCS[$m]}"
    if [[ ${RSYNCS[$m]} == rsync* ]]; then
      # Wait until we have no more than x of our rsync processes running, otherwise our system might be slowed down too much
      mwait -q -p="rsync -az --append-verify" -i=$((${PARALLEL} + ${PARALLEL}))
      echo "dcosima-rsync: Syncing: ${RSYNCS[$m]}"| ${LOGGING}
      eval ${RSYNCS[$m]} &
      sleep 1
    fi  
  done
  
  wait
}

# Delete sync'ed data
delete() {
  # Parse the configuration file
  RSYNCS=( )
  while read LINE; do
    #echo "Line: ${LINE}"
    RSYNCS[${#RSYNCS[*]}]=${LINE}
  done < dcosima-rsync.cfg

  # Download all data
  for (( m=0; m<=$(( ${#RSYNCS[*]} -1 )); m++ )); do
    #echo "psync: Checking ${RSYNCS[$m]}"
    if [[ ${RSYNCS[$m]} == rsync* ]]; then
      # Get a list of all sim/tra files which are not written to, i.e. which are closed and done
      SSH=$(echo "${RSYNCS[$m]}" | awk -F\' '{print $2}')
      MACHINE=$(echo "${RSYNCS[$m]}" | awk -F\' '{print $3}' | awk -F\: '{print $1}')
      DIR=$(echo "${RSYNCS[$m]}" | awk -F\' '{print $3}' | awk -F\: '{print $2}' | rev | cut -c5- | rev)
      CLOSEDFILES=$(${SSH} ${MACHINE} "cd ${DIR}; find -maxdepth 1 -type f | sort | while read myfile ; do fuser -s \$myfile || echo \$myfile | grep -F -e '.sim' -e '.tra' | cut -c3- ; done" | paste -sd " " -)
      echo "dcosima-rsync: Closed sim/tra files to delete: ${CLOSEDFILES}" | ${LOGGING}
      # Wait until we have no more than x of our rsync processes running, otherwise our system might be slowed down too much
      echo "dcosima-rsync: Syncing: ${RSYNCS[$m]}" | ${LOGGING}
      eval ${RSYNCS[$m]} 
      sleep 1
      # Deleting sim/tra files
      if [[ ${CLOSEDFILES} != "" ]]; then
        ${SSH} ${MACHINE} "cd ${DIR}; rm ${CLOSEDFILES}"
        echo "dcosima-rsync: Delete files: ${CLOSEDFILES}" | ${LOGGING}
      else
        echo "dcosima-rsync: No files to delete" | ${LOGGING}
      fi
    fi
  done
}



# Store command line as array
CMD=( "$@" )

# Check for help
for C in "${CMD[@]}"; do
  if [[ ${C} == *-h* ]]; then
    echo ""
    commandhelp
    exit 0
  fi
done


# Default options:
DIRECTORY=""
INSTANCES=0
SLEEP=20
PARALLEL=3
LOG="FALSE"
LOGFILE=""
LOGGING="tee"

# Overwrite default options with user options:
for C in "${CMD[@]}"; do
  if [[ ${C} == *-d*=* ]]; then
    DIRECTORY=`echo ${C} | awk -F"=" '{ print $2 }'`
    eval DIRECTORY=${DIRECTORY}
    #DIRECTORY=$(readlink -f ${DIRECTORY})
  elif [[ ${C} == *-i*=* ]]; then
    INSTANCES=`echo ${C} | awk -F"=" '{ print $2 }'`
  elif [[ ${C} == *-p*=* ]]; then
    PARALLEL=`echo ${C} | awk -F"=" '{ print $2 }'`
  elif [[ ${C} == *-s*=* ]]; then
    SLEEP=`echo ${C} | awk -F"=" '{ print $2 }'`
  elif [[ ${C} == *-l* ]]; then
    LOG="TRUE"
  elif [[ ${C} == *-h* ]]; then
    echo ""
    commandhelp
    exit 0
  else
    echo ""
    echo "ERROR: Unknown command line option: ${C}"
    echo "       See \"dcosima-rsync --help\" for a list of options"
    exit 1
  fi
done


# Provide feed back and perform error checks:
echo ""
echo "dcosima-rsync: Chosen options:"

if [ "${DIRECTORY}" == "" ]; then
  echo " "
  echo "ERROR: You need to give a directory"
  exit 1
fi
if [[ ! -d ${DIRECTORY} ]]; then 
  echo " "
  echo "ERROR: The directory (\"${DIRECTORY}\") must exist"
  exit 1
fi
echo " * Directory: ${DIRECTORY}"

if [ ${INSTANCES} -ge 0 ]; then
  echo " * Simulations instances: ${INSTANCES}"
else
  echo " "
  echo "ERROR: You need to set a positive number of instances and not ${INSTANCES}!"
  commandhelp
  exit 1
fi

if [ ${PARALLEL} -ge 1 ]; then
  echo " * Parallel rsync instances: ${PARALLEL}"
else
  echo " "
  echo "ERROR: You need at least 1 parallel instance and not ${PARALLEL}!"
  commandhelp
  exit 1
fi

if [ ${SLEEP} -lt 0 ]; then
  SLEEP=0
fi
if [ ${SLEEP} -gt 1000 ]; then
  SLEEP=1000
fi
echo " * Sleep time between rsync loops: ${SLEEP}"

if [[ ${LOG} == "TRUE" ]]; then
  LOGFILE="Sync.log"
  LOGGING="tee -a ${LOGFILE}"
  echo " * Logging output to file: ${LOGFILE}"
fi



cd ${DIRECTORY}

MAXINITIALWAIT=300

STARTLASTWAIT=${SECONDS}
MAXLASTWAIT=120

WAITDELETE=600
LASTDELETE=$(( $(date +%s) - ${WAITDELETE} - 1 ))  # We always want to start with a delete in case we restart and have accumulated a alot


echo "" | ${LOGGING}
echo "Starting..." | ${LOGGING}

  
# Cases to consider:
# A) Everything normal --> Wait until all expected sim files are there & nothing is running any more
# B) No free slot -- nothing got started yet --> Wait until all expected sim files are there & nothing is running any more
# C) Extremely short simulations -- running instances will always be 0 --> Wait until all expected sim files are there & nothing is running any more
# D) Long time before first events and thus sim file show up --> Wait until all expected sim files are there & nothing is running any more
# E) Faulty simulation -- nothing will ever get simulated --> dcosima should do a test sim...
# F) dcosima got aborted and we never get all sims --> dcosima must do a kill all, a last rsync, and a final clean
# G) More than one sim file per cosima run --> dcosima must set the correct number of sim files 
# H) We need to significantly wait between deletes to wait for slow simulations 


KEEPGOING=true
while ${KEEPGOING}; do

  # Sleep .....
  echo "dcosima-rsync: Waiting for ${SLEEP} seconds for more data to be simulated..." | ${LOGGING} 
  sleep ${SLEEP}
  
  # Check if we have a configuration file
  if [ ! -f dcosima-rsync.cfg ]; then
    echo "ERROR: we must have a dcosima-rsync.cfg file. Make sure it exists before you start dcosima-rsync! Terminating!" | ${LOGGING}
    exit 
  fi
    
  # Check how many instances are running
  RUNNING=$(dcosima-listrunning | grep ${DIRECTORY} | awk '{ print $3 }');
  if [[ ${RUNNING} == "" ]]; then RUNNING=0; fi
  
  # Check for delete (delete is not parallel, thus we do not do it always)
  if (( $(date +%s) > $(( ${LASTDELETE} + ${WAITDELETE} )) )); then
    delete
    LASTDELETE=$(date +%s)
  fi
   
  # Do the sync
  sync
  
  # If nothing was running before check if it is now
  if [ ${RUNNING} -eq 0 ]; then
    RUNNING=$(dcosima-listrunning | grep ${DIRECTORY} | awk '{ print $3 }');
    if [[ ${RUNNING} == "" ]]; then RUNNING=0; fi
  fi
  
  # Check how many instances have started, i.e. how many sim or tra files we have 
  SIMFILECOUNT=`ls -U -1 *.p*.inc*.id*.sim* 2>/dev/null | wc -l`
  TRAFILECOUNT=`ls -U -1 *.p*.inc*.id*.tra* 2>/dev/null | wc -l`
  if [ ${SIMFILECOUNT} -gt ${TRAFILECOUNT} ]; then
    FILECOUNT=${SIMFILECOUNT}
  else
    FILECOUNT=${TRAFILECOUNT}
  fi

  # If we have all files and nothing is running any more (before and after), we are done, but do one last rsync to make sure nothing finished between our rsyncs:
  if [ ${RUNNING} -eq 0 ]; then
    if [ ${FILECOUNT} -ge ${INSTANCES} ]; then
      echo "dcosima-rsync: All expected sim files present and no instances are running. Doing a final sync." | ${LOGGING}
      sync
      echo "dcosima-rsync: Syncing: ${RSYNCS[$m]}" | ${LOGGING}
      KEEPGOING=false
    else
      # If the last one is there we assume we had a crash and stop, otherwise continue (It's -ge 1 since we can have tra or sim files)
      if [ $(ls -U -1 *.p*.inc${INSTANCES}.id*.* 2>/dev/null | wc -l) -ge 1 ]; then
        echo "dcosima-rsync: Some sim files are missing, but the last sim file is present and no instances are running. Doing a final sync." | ${LOGGING}
        sync
        echo "dcosima-rsync: Syncing: ${RSYNCS[$m]}" | ${LOGGING}
        KEEPGOING=false
      else
        echo "dcosima-rsync: Expecting more data later: Sim files present: ${SIMFILECOUNT}/${INSTANCES}. Running instances: ${RUNNING}" | ${LOGGING}
      fi 
    fi
  else
    echo "dcosima-rsync: Expecting more data later: Sim files present: ${SIMFILECOUNT}/${INSTANCES}. Running instances: ${RUNNING}" | ${LOGGING}    
  fi
done
  
chown ${USER}:${USER} .

echo "dcosima-rsync: All rsync processes have finished! Done!" | ${LOGGING}


exit 0;

